AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template to upload files to S3 with full S3 and CloudWatch access, and generate pre-signed URLs

Parameters:
  BucketName:
    Type: String
    Description: ats-cloudinityinc

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  UploadToS3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UploadToS3Function
      Handler: new_upload_to_s3.lambda_handler
      Runtime: python3.9
      Role: !GetAtt UploadToS3FunctionRole.Arn
      Events:
        UploadApi:
          Type: Api
          Properties:
            Path: /upload/{filename}
            Method: post
            RestApiId: !Ref ApiWithCors
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName

  GeneratePresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GeneratePresignedUrlFunction
      Handler: new_generate_presigned_url.lambda_handler
      Runtime: python3.9
      Role: !GetAtt GeneratePresignedUrlFunctionRole.Arn
      Events:
        PresignedUrlApi:
          Type: Api
          Properties:
            Path: /presigned-url
            Method: get
            RestApiId: !Ref ApiWithCors

  ApiWithCors:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: '''OPTIONS,POST,GET'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''

  UploadToS3FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaFullS3AndCloudWatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: !Sub "arn:aws:s3:::${BucketName}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  GeneratePresignedUrlFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3ReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${BucketName}/*"

  MyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UploadToS3Function.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiWithCors}/*/*/*"
