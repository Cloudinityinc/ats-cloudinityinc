{"ast":null,"code":"var _jsxFileName = \"/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     // RequiredID: \"\",\n//     ReqId: \"\",\n//     ReqTitle: \"\",\n//     Role: \"\",\n//     ReqCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     ReqSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     BillRate: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     ReqSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null, // Placeholder for the resume file\n//   };\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => {\n//     return /\\S+@\\S+\\.\\S+/.test(email);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors({\n//             ...validationErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           });\n//         } else {\n//           setFormData({\n//             ...formData,\n//             Resume: file,\n//           });\n//           let newErrors = { ...validationErrors };\n//           delete newErrors.Resume;\n//           setValidationErrors(newErrors);\n//         }\n//       }\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [id]: value,\n//       });\n//       let newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     // const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const uploadUrl = `${process.env.REACT_APP_API_URL}/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       const data = await response.json();\n\n//       console.log(\"Server response:\", data);\n\n//       if (!response.ok) {\n//         throw new Error(`Server responded with status: ${response.status}`);\n//       }\n\n//       // Since the server confirms success but doesn't provide a URL, log the success and maybe return a success message instead\n//       if (data.message === \"File uploaded successfully\") {\n//         console.log(data.message);\n//         // Return a static message or a mock URL, or adjust as needed\n//         return \"Upload successful, no URL provided\"; // Placeholder return value\n//       } else {\n//         throw new Error(\n//           \"Unexpected server response, upload may not be successful.\"\n//         );\n//       }\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       throw error;\n//     }\n//   };\n\n//   //Dynamo DB API Call\n\n//   const submitForm = async () => {\n//     // Assuming you have an API endpoint to submit form data to DynamoDB\n//     const submitUrl =\n//       \"https://mkou1u2f62.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to submit form.\");\n//       return await response.json(); // or handle success without expecting a return value\n//     } catch (error) {\n//       console.error(\"Submission error:\", error);\n//       throw error;\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n//     setIsSubmitting(true);\n\n//     try {\n//       if (formData.Resume) {\n//         const resumeUrl = await uploadResume(formData.Resume);\n//         // Update formData with the resume URL for submission\n//         const updatedFormData = { ...formData, ResumeUrl: resumeUrl };\n//         await submitForm(updatedFormData);\n//         setShowPopup(true); // Show success message\n//         setFormData(initialFormData); // Reset form\n//       } else {\n//         // Handle the case where a resume is required but not uploaded\n//         throw new Error(\"Resume is required.\");\n//       }\n//     } catch (error) {\n//       alert(`Error: ${error.message}`);\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\";\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {/* The form component with Tailwind CSS */}\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {/* Input fields generated based on formData */}\n//             {/* {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor={key}\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     // type=\"text\"\n//                     type={key === \"RequiredID\" ? \"number\" : \"String\"} // Conditionally set the input type\n//                     id={key}\n//                     name={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))} */}\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"FullName\"\n//               >\n//                 Full Name\n//               </label>\n//               <input\n//                 id=\"FullName\"\n//                 type=\"String\"\n//                 placeholder=\"Full Name\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.FullName}\n//               />\n//               {validationErrors.FullName && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.FullName}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label className=\"text-white dark:text-gray-200\" htmlFor=\"ReqId\">\n//                 Required ID\n//               </label>\n//               <input\n//                 id=\"ReqId\"\n//                 type=\"number\"\n//                 placeholder=\"ID\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ReqId}\n//               />\n//               {validationErrors.ReqId && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ReqId}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ReqTitle\"\n//               >\n//                 Required Title\n//               </label>\n//               <input\n//                 id=\"ReqTitle\"\n//                 type=\"String\"\n//                 placeholder=\"Title\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ReqTitle}\n//               />\n//               {validationErrors.ReqTitle && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ReqTitle}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label className=\"text-white dark:text-gray-200\" htmlFor=\"Role\">\n//                 Role\n//               </label>\n//               <input\n//                 id=\"Role\"\n//                 type=\"String\"\n//                 placeholder=\"Role\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.Role}\n//               />\n//               {validationErrors.Role && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Role}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ReqCreationDate\"\n//               >\n//                 Required Creation Date\n//               </label>\n//               <input\n//                 id=\"ReqCreationDate\"\n//                 // type=\"Number\"\n//                 type=\"String\"\n//                 placeholder=\"MM/DD/YYYY\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ReqCreationDate}\n//               />\n//               {validationErrors.ReqCreationDate && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ReqCreationDate}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"VendorID\"\n//               >\n//                 Vendor ID\n//               </label>\n//               <input\n//                 id=\"VendorID\"\n//                 type=\"String\"\n//                 placeholder=\"Vendor ID\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.VendorID}\n//               />\n//               {validationErrors.VendorID && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.VendorID}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"BillRate\"\n//               >\n//                 Bill Rate\n//               </label>\n//               <input\n//                 id=\"BillRate\"\n//                 type=\"number\"\n//                 placeholder=\"Bill Rate\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.BillRate}\n//               />\n//               {validationErrors.BillRate && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.BillRate}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ImmigrationStatus\"\n//               >\n//                 Immigration Status\n//               </label>\n//               <input\n//                 id=\"ImmigrationStatus\"\n//                 type=\"String\"\n//                 placeholder=\"Immigration Status\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ImmigrationStatus}\n//               />\n//               {validationErrors.ImmigrationStatus && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ImmigrationStatus}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ContractType\"\n//               >\n//                 Contract Type\n//               </label>\n//               <input\n//                 id=\"ContractType\"\n//                 type=\"String\"\n//                 placeholder=\"Contract Type\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ContractType}\n//               />\n//               {validationErrors.ContractType && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ContractType}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"SubmissionDate\"\n//               >\n//                 Submission Date\n//               </label>\n//               <input\n//                 id=\"SubmissionDate\"\n//                 type=\"String\"\n//                 placeholder=\"MM/DD/YYYY\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.SubmissionDate}\n//               />\n//               {validationErrors.SubmissionDate && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.SubmissionDate}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ReqSubmissionEndDate\"\n//               >\n//                 Required Submission end Date\n//               </label>\n//               <input\n//                 id=\"ReqSubmissionEndDate\"\n//                 type=\"String\"\n//                 placeholder=\"MM/DD/YYYY\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ReqSubmissionEndDate}\n//               />\n//               {validationErrors.ReqSubmissionEndDate && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ReqSubmissionEndDate}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"CandidateCurrentLocation\"\n//               >\n//                 Candidate Current Location\n//               </label>\n//               <input\n//                 id=\"CandidateCurrentLocation\"\n//                 type=\"String\"\n//                 placeholder=\"Candidate Current Location\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.CandidateCurrentLocation}\n//               />\n//               {validationErrors.CandidateCurrentLocation && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.CandidateCurrentLocation}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ContactNumber\"\n//               >\n//                 Contact Number\n//               </label>\n//               <input\n//                 id=\"ContactNumber\"\n//                 type=\"number\"\n//                 placeholder=\"Contact Number\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ContactNumber}\n//               />\n//               {validationErrors.ContactNumber && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ContactNumber}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"RecruiterName\"\n//               >\n//                 Recruiter Name\n//               </label>\n//               <input\n//                 id=\"RecruiterName\"\n//                 type=\"String\"\n//                 placeholder=\"Recruiter Name\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.RecruiterName}\n//               />\n//               {validationErrors.RecruiterName && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.RecruiterName}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label className=\"text-white dark:text-gray-200\" htmlFor=\"State\">\n//                 State\n//               </label>\n//               <input\n//                 id=\"State\"\n//                 type=\"String\"\n//                 placeholder=\"State\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.State}\n//               />\n//               {validationErrors.State && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.State}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"SubmissionStatus\"\n//               >\n//                 Submission Status\n//               </label>\n//               <input\n//                 id=\"SubmissionStatus\"\n//                 type=\"String\"\n//                 placeholder=\"Submission Status\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.SubmissionStatus}\n//               />\n//               {validationErrors.SubmissionStatus && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.SubmissionStatus}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"VendorRate\"\n//               >\n//                 Vendor Rate\n//               </label>\n//               <input\n//                 id=\"VendorRate\"\n//                 type=\"String\"\n//                 placeholder=\"Vendor Rate \"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.VendorRate}\n//               />\n//               {validationErrors.VendorRate && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.VendorRate}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"CandidatePayRate\"\n//               >\n//                 Candidate Pay Rate\n//               </label>\n//               <input\n//                 id=\"CandidatePayRate\"\n//                 type=\"number\"\n//                 placeholder=\"Candidate Pay Rate\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.CandidatePayRate}\n//               />\n//               {validationErrors.CandidatePayRate && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.CandidatePayRate}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"BillRateMargin\"\n//               >\n//                 Bill Rate Margin\n//               </label>\n//               <input\n//                 id=\"BillRateMargin\"\n//                 type=\"number\"\n//                 placeholder=\"Bill Rate Margin\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.BillRateMargin}\n//               />\n//               {validationErrors.BillRateMargin && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.BillRateMargin}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ResumeSource\"\n//               >\n//                 Resume Source\n//               </label>\n//               <input\n//                 id=\"ResumeSource\"\n//                 type=\"String\"\n//                 placeholder=\"Resume Source\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ResumeSource}\n//               />\n//               {validationErrors.ResumeSource && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ResumeSource}\n//                 </p>\n//               )}\n//             </div>\n\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"EmailId\"\n//               >\n//                 Email ID\n//               </label>\n//               <input\n//                 id=\"EmailId\"\n//                 type=\"String\"\n//                 placeholder=\"Email ID\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.EmailId}\n//               />\n//               {validationErrors.EmailId && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.EmailId}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"LinkedInID\"\n//               >\n//                 LinkedIn ID\n//               </label>\n//               <input\n//                 id=\"LinkedInID\"\n//                 type=\"String\"\n//                 placeholder=\"LinkedIn ID\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.LinkedInID}\n//               />\n//               {validationErrors.LinkedInID && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.LinkedInID}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"EmployerInformation\"\n//               >\n//                 Employer Information\n//               </label>\n//               <input\n//                 id=\"EmployerInformation\"\n//                 type=\"String\"\n//                 placeholder=\"Employer Information\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.EmployerInformation}\n//               />\n//               {validationErrors.EmployerInformation && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.EmployerInformation}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ProfessionalReferences\"\n//               >\n//                 Professional References\n//               </label>\n//               <input\n//                 id=\"ProfessionalReferences\"\n//                 type=\"String\"\n//                 placeholder=\"Professional References \"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ProfessionalReferences}\n//               />\n//               {validationErrors.ProfessionalReferences && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ProfessionalReferences}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label className=\"text-white dark:text-gray-200\" htmlFor=\"DOB\">\n//                 DOB\n//               </label>\n//               <input\n//                 id=\"DOB\"\n//                 type=\"String\"\n//                 placeholder=\"MM/DD/YYYY\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.DOB}\n//               />\n//               {validationErrors.DOB && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.DOB}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ReqSkills\"\n//               >\n//                 Required Skills\n//               </label>\n//               <input\n//                 id=\"ReqSkills\"\n//                 type=\"String\"\n//                 placeholder=\"Required Skills\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ReqSkills}\n//               />\n//               {validationErrors.ReqSkills && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ReqSkills}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ResumeFormattingNeeded\"\n//               >\n//                 Resume Formatting Needed?\n//               </label>\n//               <input\n//                 id=\"ResumeFormattingNeeded\"\n//                 type=\"String\"\n//                 placeholder=\"Resume Formating Needed?\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ResumeFormattingNeeded}\n//               />\n//               {validationErrors.ResumeFormattingNeeded && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ResumeFormattingNeeded}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"FormattedBy\"\n//               >\n//                 Formatted By\n//               </label>\n//               <input\n//                 id=\"FormattedBy\"\n//                 type=\"String\"\n//                 placeholder=\"Formated By\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.FormattedBy}\n//               />\n//               {validationErrors.FormattedBy && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.FormattedBy}\n//                 </p>\n//               )}\n//             </div>\n\n//             <div className=\"mb-4\">\n//               <label\n//                 htmlFor=\"Resume\"\n//                 className=\"block text-sm font-medium text-white\"\n//               >\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors[\"Resume\"] && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors[\"Resume\"]}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               disabled={isSubmitting}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     ReqId: \"\",\n//     ReqTitle: \"\",\n//     Role: \"\",\n//     ReqCreationDate: \"\",\n//     VendorID: \"\",\n//     BillRate: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     ReqSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     ReqSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => /\\S+@\\S+\\.\\S+/.test(email);\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (!file) return;\n//       const allowedTypes = [\n//         \"application/pdf\",\n//         \"application/msword\",\n//         \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//       ];\n//       if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//         setValidationErrors((prevErrors) => ({\n//           ...prevErrors,\n//           Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//         }));\n//       } else {\n//         setFormData((prevFormData) => ({ ...prevFormData, Resume: file }));\n//         setValidationErrors((prevErrors) => {\n//           const newErrors = { ...prevErrors };\n//           delete newErrors.Resume;\n//           return newErrors;\n//         });\n//       }\n//     } else {\n//       setFormData((prevFormData) => ({ ...prevFormData, [id]: value }));\n//       setValidationErrors((prevErrors) => {\n//         const newErrors = { ...prevErrors };\n//         delete newErrors[id];\n//         return newErrors;\n//       });\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n//     let isValid = true;\n\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `${process.env.REACT_APP_API_URL}/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       const data = await response.json();\n//       if (!response.ok) {\n//         throw new Error(`Server responded with status: ${response.status}`);\n//       }\n//       console.log(\"Server response:\", data.message);\n//       // Assuming the backend response contains the URL or path of the uploaded file\n//       return data.url || \"Upload successful, URL not provided\";\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       throw error;\n//     }\n//   };\n\n//   const submitForm = async () => {\n//     const submitUrl =\n//       \"https://mkou1u2f62.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to submit form.\");\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       console.error(\"Submission error:\", error);\n//       throw error;\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n//     setIsSubmitting(true);\n\n//     try {\n//       let resumeUrl = \"\";\n//       if (formData.Resume) {\n//         resumeUrl = await uploadResume(formData.Resume);\n//       }\n//       const updatedFormData = { ...formData, ResumeUrl: resumeUrl };\n//       await submitForm(updatedFormData);\n//       setShowPopup(true);\n//       setFormData(initialFormData);\n//     } catch (error) {\n//       alert(`Error: ${error.message}`);\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\";\n//     }\n//   };\n\n//   // Dynamically generate form fields\n//   const renderFormFields = () => {\n//     return Object.entries(initialFormData).map(([key, value]) => {\n//       if (key === \"Resume\") return null; // Skip rendering for Resume field here\n//       return (\n//         <div key={key}>\n//           <label htmlFor={key} className=\"text-white dark:text-gray-200\">\n//             {key}\n//           </label>\n//           <input\n//             id={key}\n//             type={\n//               key.includes(\"Date\") || key.includes(\"EmailId\")\n//                 ? \"text\"\n//                 : \"String\"\n//             }\n//             placeholder={key}\n//             value={formData[key]}\n//             onChange={handleInputChange}\n//             className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//           />\n//           {validationErrors[key] && (\n//             <p className=\"text-red-500 text-xs italic\">\n//               {validationErrors[key]}\n//             </p>\n//           )}\n//         </div>\n//       );\n//     });\n//   };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {renderFormFields()}\n//             {/* Resume field */}\n//             <div>\n//               <label\n//                 htmlFor=\"Resume\"\n//                 className=\"block text-sm font-medium text-white\"\n//               >\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors[\"Resume\"] && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors[\"Resume\"]}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               disabled={isSubmitting}\n//               className=\"col-span-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SuccessPage() {\n  _s();\n  const initialFormData = {\n    FullName: \"\",\n    ReqId: \"\",\n    ReqTitle: \"\",\n    Role: \"\",\n    ReqCreationDate: \"\",\n    VendorID: \"\",\n    BillRate: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    ReqSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    ReqSkills: \"\",\n    ResumeFormattingNeeded: \"\",\n    FormattedBy: \"\",\n    Resume: null // Placeholder for the resume file\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const resumeInputRef = useRef(null);\n  const formFieldsConfig = [{\n    id: \"FullName\",\n    type: \"text\",\n    placeholder: \"Full Name\"\n  }, {\n    id: \"ReqId\",\n    type: \"number\",\n    placeholder: \"Required ID\"\n  }, {\n    id: \"ReqTitle\",\n    type: \"text\",\n    placeholder: \"Required Title\"\n  }, {\n    id: \"Role\",\n    type: \"text\",\n    placeholder: \"Role\"\n  }, {\n    id: \"ReqCreationDate\",\n    type: \"date\",\n    placeholder: \"MM/DD/YYYY\"\n  }, {\n    id: \"VendorID\",\n    type: \"text\",\n    placeholder: \"Vendor ID\"\n  }, {\n    id: \"BillRate\",\n    type: \"number\",\n    placeholder: \"Bill Rate\"\n  }, {\n    id: \"ImmigrationStatus\",\n    type: \"text\",\n    placeholder: \"Immigration Status\"\n  }, {\n    id: \"ContractType\",\n    type: \"text\",\n    placeholder: \"Contract Type\"\n  }, {\n    id: \"SubmissionDate\",\n    type: \"date\",\n    placeholder: \"MM/DD/YYYY\"\n  }, {\n    id: \"ReqSubmissionEndDate\",\n    type: \"date\",\n    placeholder: \"MM/DD/YYYY\"\n  }, {\n    id: \"CandidateCurrentLocation\",\n    type: \"text\",\n    placeholder: \"Candidate Current Location\"\n  }, {\n    id: \"ContactNumber\",\n    type: \"tel\",\n    placeholder: \"Contact Number\"\n  }, {\n    id: \"RecruiterName\",\n    type: \"text\",\n    placeholder: \"Recruiter Name\"\n  }, {\n    id: \"State\",\n    type: \"text\",\n    placeholder: \"State\"\n  }, {\n    id: \"SubmissionStatus\",\n    type: \"text\",\n    placeholder: \"Submission Status\"\n  }, {\n    id: \"VendorRate\",\n    type: \"number\",\n    placeholder: \"Vendor Rate\"\n  }, {\n    id: \"CandidatePayRate\",\n    type: \"number\",\n    placeholder: \"Candidate Pay Rate\"\n  }, {\n    id: \"BillRateMargin\",\n    type: \"number\",\n    placeholder: \"Bill Rate Margin\"\n  }, {\n    id: \"ResumeSource\",\n    type: \"text\",\n    placeholder: \"Resume Source\"\n  }, {\n    id: \"EmailId\",\n    type: \"email\",\n    placeholder: \"Email ID\"\n  }, {\n    id: \"LinkedInID\",\n    type: \"text\",\n    placeholder: \"LinkedIn ID\"\n  }, {\n    id: \"EmployerInformation\",\n    type: \"text\",\n    placeholder: \"Employer Information\"\n  }, {\n    id: \"ProfessionalReferences\",\n    type: \"text\",\n    placeholder: \"Professional References\"\n  }, {\n    id: \"DOB\",\n    type: \"date\",\n    placeholder: \"DOB\"\n  }, {\n    id: \"ReqSkills\",\n    type: \"text\",\n    placeholder: \"Required Skills\"\n  }, {\n    id: \"ResumeFormattingNeeded\",\n    type: \"text\",\n    placeholder: \"Resume Formatting Needed?\"\n  }, {\n    id: \"FormattedBy\",\n    type: \"text\",\n    placeholder: \"Formatted By\"\n  }];\n  const handleInputChange = e => {\n    const {\n      id,\n      value,\n      files\n    } = e.target;\n    if (id === \"Resume\" && files) {\n      const file = files[0];\n      if (file) {\n        const allowedTypes = [\"application/pdf\", \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"];\n        if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n          setValidationErrors(prevErrors => ({\n            ...prevErrors,\n            Resume: \"Only PDF or DOC files under 10MB are allowed.\"\n          }));\n        } else {\n          setFormData(prevFormData => ({\n            ...prevFormData,\n            Resume: file\n          }));\n          setValidationErrors(prevErrors => {\n            const newErrors = {\n              ...prevErrors\n            };\n            delete newErrors.Resume;\n            return newErrors;\n          });\n        }\n      }\n    } else {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        [id]: value\n      }));\n      setValidationErrors(prevErrors => {\n        const newErrors = {\n          ...prevErrors\n        };\n        delete newErrors[id];\n        return newErrors;\n      });\n    }\n  };\n  const validateForm = () => {\n    let isValid = true;\n    const newErrors = {};\n    Object.keys(formData).forEach(key => {\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n        isValid = false;\n      }\n    });\n    if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n      newErrors.EmailId = \"Invalid email format.\";\n      isValid = false;\n    }\n    if (!formData.Resume) {\n      newErrors.Resume = \"Please upload a resume.\";\n      isValid = false;\n    }\n    setValidationErrors(newErrors);\n    return isValid;\n  };\n  const uploadResume = async file => {\n    // Placeholder for your upload logic\n    const filename = encodeURIComponent(file.name);\n    const uploadUrl = `${process.env.REACT_APP_API_URL}/upload/${filename}`;\n    const fileData = new FormData();\n    fileData.append(\"file\", file);\n    try {\n      const response = await fetch(uploadUrl, {\n        method: \"POST\",\n        body: fileData\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(`Server responded with status: ${response.status}`);\n      }\n      console.log(\"Server response:\", data.message);\n      // Assuming the backend response contains the URL or path of the uploaded file\n      return data.url || \"Upload successful, URL not provided\";\n    } catch (error) {\n      console.error(\"Upload Error:\", error);\n      throw error;\n    }\n  };\n  const submitForm = async () => {\n    // Placeholder for your submission logic\n    const submitUrl = \"https://mkou1u2f62.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n    try {\n      const response = await fetch(submitUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      if (!response.ok) throw new Error(\"Failed to submit form.\");\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"Submission error:\", error);\n      throw error;\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    // Placeholder for your handle submit logic\n    if (!validateForm()) return;\n    setIsSubmitting(true);\n    try {\n      let resumeUrl = \"\";\n      if (formData.Resume) {\n        resumeUrl = await uploadResume(formData.Resume);\n      }\n      const updatedFormData = {\n        ...formData,\n        ResumeUrl: resumeUrl\n      };\n      await submitForm(updatedFormData);\n      setShowPopup(true);\n      setFormData(initialFormData);\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  const handleClosePopup = () => {\n    // Placeholder for your close popup logic\n    setShowPopup(false);\n    setFormData(initialFormData);\n    setValidationErrors({});\n    if (resumeInputRef.current) {\n      resumeInputRef.current.value = \"\";\n    }\n  };\n  const renderFormFields = () => {\n    return formFieldsConfig.map(({\n      id,\n      type,\n      placeholder\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: id,\n        className: \"text-white dark:text-gray-200 block text-sm font-bold mb-2\",\n        children: placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: id,\n        type: type,\n        placeholder: placeholder,\n        value: formData[id],\n        onChange: handleInputChange,\n        className: \"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1366,\n        columnNumber: 9\n      }, this), validationErrors[id] && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500 text-xs italic\",\n        children: validationErrors[id]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1375,\n        columnNumber: 11\n      }, this)]\n    }, id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1359,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1381,\n    columnNumber: 10\n  }, this);\n}\n_s(SuccessPage, \"osro9qDtlEGVyyuyGb/+RYuMuFY=\");\n_c = SuccessPage;\nexport default SuccessPage;\nvar _c;\n$RefreshReg$(_c, \"SuccessPage\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","SuccessPage","_s","initialFormData","FullName","ReqId","ReqTitle","Role","ReqCreationDate","VendorID","BillRate","ImmigrationStatus","ContractType","SubmissionDate","ReqSubmissionEndDate","CandidateCurrentLocation","ContactNumber","RecruiterName","State","SubmissionStatus","VendorRate","CandidatePayRate","BillRateMargin","ResumeSource","EmailId","LinkedInID","EmployerInformation","ProfessionalReferences","DOB","ReqSkills","ResumeFormattingNeeded","FormattedBy","Resume","formData","setFormData","validationErrors","setValidationErrors","showPopup","setShowPopup","isSubmitting","setIsSubmitting","resumeInputRef","formFieldsConfig","id","type","placeholder","handleInputChange","e","value","files","target","file","allowedTypes","includes","size","prevErrors","prevFormData","newErrors","validateForm","isValid","Object","keys","forEach","key","isValidEmail","uploadResume","filename","encodeURIComponent","name","uploadUrl","process","env","REACT_APP_API_URL","fileData","FormData","append","response","fetch","method","body","data","json","ok","Error","status","console","log","message","url","error","submitForm","submitUrl","headers","JSON","stringify","handleSubmit","preventDefault","resumeUrl","updatedFormData","ResumeUrl","alert","handleClosePopup","current","renderFormFields","map","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","onChange","_c","$RefreshReg$"],"sources":["/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx"],"sourcesContent":["// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     // RequiredID: \"\",\n//     ReqId: \"\",\n//     ReqTitle: \"\",\n//     Role: \"\",\n//     ReqCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     ReqSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     BillRate: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     ReqSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null, // Placeholder for the resume file\n//   };\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => {\n//     return /\\S+@\\S+\\.\\S+/.test(email);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors({\n//             ...validationErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           });\n//         } else {\n//           setFormData({\n//             ...formData,\n//             Resume: file,\n//           });\n//           let newErrors = { ...validationErrors };\n//           delete newErrors.Resume;\n//           setValidationErrors(newErrors);\n//         }\n//       }\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [id]: value,\n//       });\n//       let newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     // const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const uploadUrl = `${process.env.REACT_APP_API_URL}/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       const data = await response.json();\n\n//       console.log(\"Server response:\", data);\n\n//       if (!response.ok) {\n//         throw new Error(`Server responded with status: ${response.status}`);\n//       }\n\n//       // Since the server confirms success but doesn't provide a URL, log the success and maybe return a success message instead\n//       if (data.message === \"File uploaded successfully\") {\n//         console.log(data.message);\n//         // Return a static message or a mock URL, or adjust as needed\n//         return \"Upload successful, no URL provided\"; // Placeholder return value\n//       } else {\n//         throw new Error(\n//           \"Unexpected server response, upload may not be successful.\"\n//         );\n//       }\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       throw error;\n//     }\n//   };\n\n//   //Dynamo DB API Call\n\n//   const submitForm = async () => {\n//     // Assuming you have an API endpoint to submit form data to DynamoDB\n//     const submitUrl =\n//       \"https://mkou1u2f62.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to submit form.\");\n//       return await response.json(); // or handle success without expecting a return value\n//     } catch (error) {\n//       console.error(\"Submission error:\", error);\n//       throw error;\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n//     setIsSubmitting(true);\n\n//     try {\n//       if (formData.Resume) {\n//         const resumeUrl = await uploadResume(formData.Resume);\n//         // Update formData with the resume URL for submission\n//         const updatedFormData = { ...formData, ResumeUrl: resumeUrl };\n//         await submitForm(updatedFormData);\n//         setShowPopup(true); // Show success message\n//         setFormData(initialFormData); // Reset form\n//       } else {\n//         // Handle the case where a resume is required but not uploaded\n//         throw new Error(\"Resume is required.\");\n//       }\n//     } catch (error) {\n//       alert(`Error: ${error.message}`);\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\";\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {/* The form component with Tailwind CSS */}\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {/* Input fields generated based on formData */}\n//             {/* {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor={key}\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     // type=\"text\"\n//                     type={key === \"RequiredID\" ? \"number\" : \"String\"} // Conditionally set the input type\n//                     id={key}\n//                     name={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))} */}\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"FullName\"\n//               >\n//                 Full Name\n//               </label>\n//               <input\n//                 id=\"FullName\"\n//                 type=\"String\"\n//                 placeholder=\"Full Name\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.FullName}\n//               />\n//               {validationErrors.FullName && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.FullName}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label className=\"text-white dark:text-gray-200\" htmlFor=\"ReqId\">\n//                 Required ID\n//               </label>\n//               <input\n//                 id=\"ReqId\"\n//                 type=\"number\"\n//                 placeholder=\"ID\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ReqId}\n//               />\n//               {validationErrors.ReqId && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ReqId}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ReqTitle\"\n//               >\n//                 Required Title\n//               </label>\n//               <input\n//                 id=\"ReqTitle\"\n//                 type=\"String\"\n//                 placeholder=\"Title\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ReqTitle}\n//               />\n//               {validationErrors.ReqTitle && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ReqTitle}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label className=\"text-white dark:text-gray-200\" htmlFor=\"Role\">\n//                 Role\n//               </label>\n//               <input\n//                 id=\"Role\"\n//                 type=\"String\"\n//                 placeholder=\"Role\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.Role}\n//               />\n//               {validationErrors.Role && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Role}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ReqCreationDate\"\n//               >\n//                 Required Creation Date\n//               </label>\n//               <input\n//                 id=\"ReqCreationDate\"\n//                 // type=\"Number\"\n//                 type=\"String\"\n//                 placeholder=\"MM/DD/YYYY\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ReqCreationDate}\n//               />\n//               {validationErrors.ReqCreationDate && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ReqCreationDate}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"VendorID\"\n//               >\n//                 Vendor ID\n//               </label>\n//               <input\n//                 id=\"VendorID\"\n//                 type=\"String\"\n//                 placeholder=\"Vendor ID\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.VendorID}\n//               />\n//               {validationErrors.VendorID && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.VendorID}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"BillRate\"\n//               >\n//                 Bill Rate\n//               </label>\n//               <input\n//                 id=\"BillRate\"\n//                 type=\"number\"\n//                 placeholder=\"Bill Rate\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.BillRate}\n//               />\n//               {validationErrors.BillRate && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.BillRate}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ImmigrationStatus\"\n//               >\n//                 Immigration Status\n//               </label>\n//               <input\n//                 id=\"ImmigrationStatus\"\n//                 type=\"String\"\n//                 placeholder=\"Immigration Status\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ImmigrationStatus}\n//               />\n//               {validationErrors.ImmigrationStatus && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ImmigrationStatus}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ContractType\"\n//               >\n//                 Contract Type\n//               </label>\n//               <input\n//                 id=\"ContractType\"\n//                 type=\"String\"\n//                 placeholder=\"Contract Type\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ContractType}\n//               />\n//               {validationErrors.ContractType && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ContractType}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"SubmissionDate\"\n//               >\n//                 Submission Date\n//               </label>\n//               <input\n//                 id=\"SubmissionDate\"\n//                 type=\"String\"\n//                 placeholder=\"MM/DD/YYYY\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.SubmissionDate}\n//               />\n//               {validationErrors.SubmissionDate && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.SubmissionDate}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ReqSubmissionEndDate\"\n//               >\n//                 Required Submission end Date\n//               </label>\n//               <input\n//                 id=\"ReqSubmissionEndDate\"\n//                 type=\"String\"\n//                 placeholder=\"MM/DD/YYYY\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ReqSubmissionEndDate}\n//               />\n//               {validationErrors.ReqSubmissionEndDate && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ReqSubmissionEndDate}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"CandidateCurrentLocation\"\n//               >\n//                 Candidate Current Location\n//               </label>\n//               <input\n//                 id=\"CandidateCurrentLocation\"\n//                 type=\"String\"\n//                 placeholder=\"Candidate Current Location\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.CandidateCurrentLocation}\n//               />\n//               {validationErrors.CandidateCurrentLocation && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.CandidateCurrentLocation}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ContactNumber\"\n//               >\n//                 Contact Number\n//               </label>\n//               <input\n//                 id=\"ContactNumber\"\n//                 type=\"number\"\n//                 placeholder=\"Contact Number\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ContactNumber}\n//               />\n//               {validationErrors.ContactNumber && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ContactNumber}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"RecruiterName\"\n//               >\n//                 Recruiter Name\n//               </label>\n//               <input\n//                 id=\"RecruiterName\"\n//                 type=\"String\"\n//                 placeholder=\"Recruiter Name\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.RecruiterName}\n//               />\n//               {validationErrors.RecruiterName && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.RecruiterName}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label className=\"text-white dark:text-gray-200\" htmlFor=\"State\">\n//                 State\n//               </label>\n//               <input\n//                 id=\"State\"\n//                 type=\"String\"\n//                 placeholder=\"State\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.State}\n//               />\n//               {validationErrors.State && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.State}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"SubmissionStatus\"\n//               >\n//                 Submission Status\n//               </label>\n//               <input\n//                 id=\"SubmissionStatus\"\n//                 type=\"String\"\n//                 placeholder=\"Submission Status\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.SubmissionStatus}\n//               />\n//               {validationErrors.SubmissionStatus && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.SubmissionStatus}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"VendorRate\"\n//               >\n//                 Vendor Rate\n//               </label>\n//               <input\n//                 id=\"VendorRate\"\n//                 type=\"String\"\n//                 placeholder=\"Vendor Rate \"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.VendorRate}\n//               />\n//               {validationErrors.VendorRate && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.VendorRate}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"CandidatePayRate\"\n//               >\n//                 Candidate Pay Rate\n//               </label>\n//               <input\n//                 id=\"CandidatePayRate\"\n//                 type=\"number\"\n//                 placeholder=\"Candidate Pay Rate\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.CandidatePayRate}\n//               />\n//               {validationErrors.CandidatePayRate && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.CandidatePayRate}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"BillRateMargin\"\n//               >\n//                 Bill Rate Margin\n//               </label>\n//               <input\n//                 id=\"BillRateMargin\"\n//                 type=\"number\"\n//                 placeholder=\"Bill Rate Margin\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.BillRateMargin}\n//               />\n//               {validationErrors.BillRateMargin && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.BillRateMargin}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ResumeSource\"\n//               >\n//                 Resume Source\n//               </label>\n//               <input\n//                 id=\"ResumeSource\"\n//                 type=\"String\"\n//                 placeholder=\"Resume Source\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ResumeSource}\n//               />\n//               {validationErrors.ResumeSource && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ResumeSource}\n//                 </p>\n//               )}\n//             </div>\n\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"EmailId\"\n//               >\n//                 Email ID\n//               </label>\n//               <input\n//                 id=\"EmailId\"\n//                 type=\"String\"\n//                 placeholder=\"Email ID\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.EmailId}\n//               />\n//               {validationErrors.EmailId && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.EmailId}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"LinkedInID\"\n//               >\n//                 LinkedIn ID\n//               </label>\n//               <input\n//                 id=\"LinkedInID\"\n//                 type=\"String\"\n//                 placeholder=\"LinkedIn ID\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.LinkedInID}\n//               />\n//               {validationErrors.LinkedInID && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.LinkedInID}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"EmployerInformation\"\n//               >\n//                 Employer Information\n//               </label>\n//               <input\n//                 id=\"EmployerInformation\"\n//                 type=\"String\"\n//                 placeholder=\"Employer Information\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.EmployerInformation}\n//               />\n//               {validationErrors.EmployerInformation && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.EmployerInformation}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ProfessionalReferences\"\n//               >\n//                 Professional References\n//               </label>\n//               <input\n//                 id=\"ProfessionalReferences\"\n//                 type=\"String\"\n//                 placeholder=\"Professional References \"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ProfessionalReferences}\n//               />\n//               {validationErrors.ProfessionalReferences && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ProfessionalReferences}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label className=\"text-white dark:text-gray-200\" htmlFor=\"DOB\">\n//                 DOB\n//               </label>\n//               <input\n//                 id=\"DOB\"\n//                 type=\"String\"\n//                 placeholder=\"MM/DD/YYYY\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.DOB}\n//               />\n//               {validationErrors.DOB && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.DOB}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ReqSkills\"\n//               >\n//                 Required Skills\n//               </label>\n//               <input\n//                 id=\"ReqSkills\"\n//                 type=\"String\"\n//                 placeholder=\"Required Skills\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ReqSkills}\n//               />\n//               {validationErrors.ReqSkills && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ReqSkills}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"ResumeFormattingNeeded\"\n//               >\n//                 Resume Formatting Needed?\n//               </label>\n//               <input\n//                 id=\"ResumeFormattingNeeded\"\n//                 type=\"String\"\n//                 placeholder=\"Resume Formating Needed?\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.ResumeFormattingNeeded}\n//               />\n//               {validationErrors.ResumeFormattingNeeded && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.ResumeFormattingNeeded}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label\n//                 className=\"text-white dark:text-gray-200\"\n//                 htmlFor=\"FormattedBy\"\n//               >\n//                 Formatted By\n//               </label>\n//               <input\n//                 id=\"FormattedBy\"\n//                 type=\"String\"\n//                 placeholder=\"Formated By\"\n//                 className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                 onChange={handleInputChange} // attach handleInputChange here\n//                 value={formData.FormattedBy}\n//               />\n//               {validationErrors.FormattedBy && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.FormattedBy}\n//                 </p>\n//               )}\n//             </div>\n\n//             <div className=\"mb-4\">\n//               <label\n//                 htmlFor=\"Resume\"\n//                 className=\"block text-sm font-medium text-white\"\n//               >\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors[\"Resume\"] && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors[\"Resume\"]}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               disabled={isSubmitting}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     ReqId: \"\",\n//     ReqTitle: \"\",\n//     Role: \"\",\n//     ReqCreationDate: \"\",\n//     VendorID: \"\",\n//     BillRate: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     ReqSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     ReqSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => /\\S+@\\S+\\.\\S+/.test(email);\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (!file) return;\n//       const allowedTypes = [\n//         \"application/pdf\",\n//         \"application/msword\",\n//         \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//       ];\n//       if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//         setValidationErrors((prevErrors) => ({\n//           ...prevErrors,\n//           Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//         }));\n//       } else {\n//         setFormData((prevFormData) => ({ ...prevFormData, Resume: file }));\n//         setValidationErrors((prevErrors) => {\n//           const newErrors = { ...prevErrors };\n//           delete newErrors.Resume;\n//           return newErrors;\n//         });\n//       }\n//     } else {\n//       setFormData((prevFormData) => ({ ...prevFormData, [id]: value }));\n//       setValidationErrors((prevErrors) => {\n//         const newErrors = { ...prevErrors };\n//         delete newErrors[id];\n//         return newErrors;\n//       });\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n//     let isValid = true;\n\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `${process.env.REACT_APP_API_URL}/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       const data = await response.json();\n//       if (!response.ok) {\n//         throw new Error(`Server responded with status: ${response.status}`);\n//       }\n//       console.log(\"Server response:\", data.message);\n//       // Assuming the backend response contains the URL or path of the uploaded file\n//       return data.url || \"Upload successful, URL not provided\";\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       throw error;\n//     }\n//   };\n\n//   const submitForm = async () => {\n//     const submitUrl =\n//       \"https://mkou1u2f62.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to submit form.\");\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       console.error(\"Submission error:\", error);\n//       throw error;\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!validateForm()) return;\n//     setIsSubmitting(true);\n\n//     try {\n//       let resumeUrl = \"\";\n//       if (formData.Resume) {\n//         resumeUrl = await uploadResume(formData.Resume);\n//       }\n//       const updatedFormData = { ...formData, ResumeUrl: resumeUrl };\n//       await submitForm(updatedFormData);\n//       setShowPopup(true);\n//       setFormData(initialFormData);\n//     } catch (error) {\n//       alert(`Error: ${error.message}`);\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\";\n//     }\n//   };\n\n//   // Dynamically generate form fields\n//   const renderFormFields = () => {\n//     return Object.entries(initialFormData).map(([key, value]) => {\n//       if (key === \"Resume\") return null; // Skip rendering for Resume field here\n//       return (\n//         <div key={key}>\n//           <label htmlFor={key} className=\"text-white dark:text-gray-200\">\n//             {key}\n//           </label>\n//           <input\n//             id={key}\n//             type={\n//               key.includes(\"Date\") || key.includes(\"EmailId\")\n//                 ? \"text\"\n//                 : \"String\"\n//             }\n//             placeholder={key}\n//             value={formData[key]}\n//             onChange={handleInputChange}\n//             className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//           />\n//           {validationErrors[key] && (\n//             <p className=\"text-red-500 text-xs italic\">\n//               {validationErrors[key]}\n//             </p>\n//           )}\n//         </div>\n//       );\n//     });\n//   };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {renderFormFields()}\n//             {/* Resume field */}\n//             <div>\n//               <label\n//                 htmlFor=\"Resume\"\n//                 className=\"block text-sm font-medium text-white\"\n//               >\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors[\"Resume\"] && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors[\"Resume\"]}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               disabled={isSubmitting}\n//               className=\"col-span-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\nimport React, { useState, useRef } from \"react\";\n\nfunction SuccessPage() {\n  const initialFormData = {\n    FullName: \"\",\n    ReqId: \"\",\n    ReqTitle: \"\",\n    Role: \"\",\n    ReqCreationDate: \"\",\n    VendorID: \"\",\n    BillRate: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    ReqSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    ReqSkills: \"\",\n    ResumeFormattingNeeded: \"\",\n    FormattedBy: \"\",\n    Resume: null, // Placeholder for the resume file\n  };\n\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const resumeInputRef = useRef(null);\n\n  const formFieldsConfig = [\n    { id: \"FullName\", type: \"text\", placeholder: \"Full Name\" },\n    { id: \"ReqId\", type: \"number\", placeholder: \"Required ID\" },\n    { id: \"ReqTitle\", type: \"text\", placeholder: \"Required Title\" },\n    { id: \"Role\", type: \"text\", placeholder: \"Role\" },\n    { id: \"ReqCreationDate\", type: \"date\", placeholder: \"MM/DD/YYYY\" },\n    { id: \"VendorID\", type: \"text\", placeholder: \"Vendor ID\" },\n    { id: \"BillRate\", type: \"number\", placeholder: \"Bill Rate\" },\n    {\n      id: \"ImmigrationStatus\",\n      type: \"text\",\n      placeholder: \"Immigration Status\",\n    },\n    { id: \"ContractType\", type: \"text\", placeholder: \"Contract Type\" },\n    { id: \"SubmissionDate\", type: \"date\", placeholder: \"MM/DD/YYYY\" },\n    { id: \"ReqSubmissionEndDate\", type: \"date\", placeholder: \"MM/DD/YYYY\" },\n    {\n      id: \"CandidateCurrentLocation\",\n      type: \"text\",\n      placeholder: \"Candidate Current Location\",\n    },\n    { id: \"ContactNumber\", type: \"tel\", placeholder: \"Contact Number\" },\n    { id: \"RecruiterName\", type: \"text\", placeholder: \"Recruiter Name\" },\n    { id: \"State\", type: \"text\", placeholder: \"State\" },\n    { id: \"SubmissionStatus\", type: \"text\", placeholder: \"Submission Status\" },\n    { id: \"VendorRate\", type: \"number\", placeholder: \"Vendor Rate\" },\n    {\n      id: \"CandidatePayRate\",\n      type: \"number\",\n      placeholder: \"Candidate Pay Rate\",\n    },\n    { id: \"BillRateMargin\", type: \"number\", placeholder: \"Bill Rate Margin\" },\n    { id: \"ResumeSource\", type: \"text\", placeholder: \"Resume Source\" },\n    { id: \"EmailId\", type: \"email\", placeholder: \"Email ID\" },\n    { id: \"LinkedInID\", type: \"text\", placeholder: \"LinkedIn ID\" },\n    {\n      id: \"EmployerInformation\",\n      type: \"text\",\n      placeholder: \"Employer Information\",\n    },\n    {\n      id: \"ProfessionalReferences\",\n      type: \"text\",\n      placeholder: \"Professional References\",\n    },\n    { id: \"DOB\", type: \"date\", placeholder: \"DOB\" },\n    { id: \"ReqSkills\", type: \"text\", placeholder: \"Required Skills\" },\n    {\n      id: \"ResumeFormattingNeeded\",\n      type: \"text\",\n      placeholder: \"Resume Formatting Needed?\",\n    },\n    { id: \"FormattedBy\", type: \"text\", placeholder: \"Formatted By\" },\n  ];\n\n  const handleInputChange = (e) => {\n    const { id, value, files } = e.target;\n    if (id === \"Resume\" && files) {\n      const file = files[0];\n      if (file) {\n        const allowedTypes = [\n          \"application/pdf\",\n          \"application/msword\",\n          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        ];\n        if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n          setValidationErrors((prevErrors) => ({\n            ...prevErrors,\n            Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n          }));\n        } else {\n          setFormData((prevFormData) => ({ ...prevFormData, Resume: file }));\n          setValidationErrors((prevErrors) => {\n            const newErrors = { ...prevErrors };\n            delete newErrors.Resume;\n            return newErrors;\n          });\n        }\n      }\n    } else {\n      setFormData((prevFormData) => ({ ...prevFormData, [id]: value }));\n      setValidationErrors((prevErrors) => {\n        const newErrors = { ...prevErrors };\n        delete newErrors[id];\n        return newErrors;\n      });\n    }\n  };\n\n  const validateForm = () => {\n    let isValid = true;\n    const newErrors = {};\n    Object.keys(formData).forEach((key) => {\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n        isValid = false;\n      }\n    });\n\n    if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n      newErrors.EmailId = \"Invalid email format.\";\n      isValid = false;\n    }\n\n    if (!formData.Resume) {\n      newErrors.Resume = \"Please upload a resume.\";\n      isValid = false;\n    }\n\n    setValidationErrors(newErrors);\n    return isValid;\n  };\n\n  const uploadResume = async (file) => {\n    // Placeholder for your upload logic\n    const filename = encodeURIComponent(file.name);\n    const uploadUrl = `${process.env.REACT_APP_API_URL}/upload/${filename}`;\n    const fileData = new FormData();\n    fileData.append(\"file\", file);\n\n    try {\n      const response = await fetch(uploadUrl, {\n        method: \"POST\",\n        body: fileData,\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(`Server responded with status: ${response.status}`);\n      }\n      console.log(\"Server response:\", data.message);\n      // Assuming the backend response contains the URL or path of the uploaded file\n      return data.url || \"Upload successful, URL not provided\";\n    } catch (error) {\n      console.error(\"Upload Error:\", error);\n      throw error;\n    }\n  };\n\n  const submitForm = async () => {\n    // Placeholder for your submission logic\n    const submitUrl =\n      \"https://mkou1u2f62.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n    try {\n      const response = await fetch(submitUrl, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(formData),\n      });\n      if (!response.ok) throw new Error(\"Failed to submit form.\");\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(\"Submission error:\", error);\n      throw error;\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    // Placeholder for your handle submit logic\n    if (!validateForm()) return;\n    setIsSubmitting(true);\n\n    try {\n      let resumeUrl = \"\";\n      if (formData.Resume) {\n        resumeUrl = await uploadResume(formData.Resume);\n      }\n      const updatedFormData = { ...formData, ResumeUrl: resumeUrl };\n      await submitForm(updatedFormData);\n      setShowPopup(true);\n      setFormData(initialFormData);\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleClosePopup = () => {\n    // Placeholder for your close popup logic\n    setShowPopup(false);\n    setFormData(initialFormData);\n    setValidationErrors({});\n    if (resumeInputRef.current) {\n      resumeInputRef.current.value = \"\";\n    }\n  };\n\n  const renderFormFields = () => {\n    return formFieldsConfig.map(({ id, type, placeholder }) => (\n      <div key={id} className=\"mb-4\">\n        <label\n          htmlFor={id}\n          className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n        >\n          {placeholder}\n        </label>\n        <input\n          id={id}\n          type={type}\n          placeholder={placeholder}\n          value={formData[id]}\n          onChange={handleInputChange}\n          className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n        />\n        {validationErrors[id] && (\n          <p className=\"text-red-500 text-xs italic\">{validationErrors[id]}</p>\n        )}\n      </div>\n    ));\n  };\n\n  return <div>{/* Your form and popup logic here */}</div>;\n}\n\nexport default SuccessPage;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}