{"ast":null,"code":"var _jsxFileName = \"/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null, // Placeholder for the resume file\n//   };\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => {\n//     return /\\S+@\\S+\\.\\S+/.test(email);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors({\n//             ...validationErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           });\n//         } else {\n//           setFormData({\n//             ...formData,\n//             Resume: file,\n//           });\n//           let newErrors = { ...validationErrors };\n//           delete newErrors.Resume;\n//           setValidationErrors(newErrors);\n//         }\n//       }\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [id]: value,\n//       });\n//       let newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       const data = await response.json();\n\n//       console.log(\"Server response:\", data);\n\n//       if (!response.ok) {\n//         throw new Error(`Server responded with status: ${response.status}`);\n//       }\n\n//       // Since the server confirms success but doesn't provide a URL, log the success and maybe return a success message instead\n//       if (data.message === \"File uploaded successfully\") {\n//         console.log(data.message);\n//         // Return a static message or a mock URL, or adjust as needed\n//         return \"Upload successful, no URL provided\"; // Placeholder return value\n//       } else {\n//         throw new Error(\n//           \"Unexpected server response, upload may not be successful.\"\n//         );\n//       }\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       throw error;\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!validateForm()) {\n//       console.log(\"Form validation failed\", validationErrors);\n//       return;\n//     }\n\n//     if (formData.Resume) {\n//       try {\n//         // Note: `uploadResult` now may not be a URL but a success message\n//         const uploadResult = await uploadResume(formData.Resume);\n//         console.log(uploadResult); // Log the success message or handle as needed\n\n//         // Proceed with the rest of your form submission logic\n//         console.log(\"Form Data:\", JSON.stringify(formData, null, 2));\n//         setShowPopup(true);\n//       } catch (error) {\n//         alert(\"Failed to upload resume: \" + error.message);\n//       }\n//     } else {\n//       alert(\"Please select a resume to upload.\");\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\";\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {/* The form component with Tailwind CSS */}\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {/* Input fields generated based on formData */}\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor={key}\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     name={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label\n//                 htmlFor=\"Resume\"\n//                 className=\"block text-sm font-medium text-white\"\n//               >\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors[\"Resume\"] && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors[\"Resume\"]}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n// App.js or a new component file\n\n//Upload form to dynamoDB\n// import React, { useState } from \"react\";\n\n// function App() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//     // Add other form fields as needed\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsSubmitting(true);\n\n//     // Replace 'YOUR_DYNAMODB_API_ENDPOINT' with your actual DynamoDB API endpoint\n//     const apiEndpoint =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n\n//     try {\n//       const response = await fetch(apiEndpoint, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit form data\");\n//       }\n\n//       // Handle successful submission here (e.g., clear form, show message)\n//       console.log(\"Form submitted successfully\");\n//       setFormData(initialFormData); // Reset form\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//       // Handle submission error here (e.g., show error message)\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h2>Submit Form Data</h2>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Full Name:\n//           <input\n//             type=\"String\"\n//             name=\"FullName\"\n//             value={formData.FullName}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           ReqId:\n//           <input\n//             type=\"Number\"\n//             name=\"ReqId\"\n//             value={formData.ReqId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Email ID:\n//           <input\n//             type=\"String\"\n//             name=\"EmailId\"\n//             value={formData.EmailId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         {/* Add other fields as needed */}\n//         <button type=\"submit\" disabled={isSubmitting}>\n//           Submit\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//     // Additional form fields\n//     ResumeUrl: \"\", // This will hold the URL of the uploaded resume\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleFileChange = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setFormData({ ...formData, Resume: file });\n//     }\n//   };\n\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     const response = await fetch(uploadUrl, {\n//       method: \"POST\",\n//       body: fileData,\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(\"Failed to upload file.\");\n//     }\n\n//     const data = await response.json();\n//     return data.url; // Assuming the response contains the URL of the uploaded file\n//   };\n\n//   const submitFormDataToDynamoDB = async (data) => {\n//     const apiEndpoint =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     const response = await fetch(apiEndpoint, {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(data),\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(\"Failed to submit form data.\");\n//     }\n\n//     return await response.json(); // Assuming the API returns some response\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsSubmitting(true);\n\n//     try {\n//       if (formData.Resume) {\n//         const resumeUrl = await uploadResume(formData.Resume);\n//         const updatedFormData = { ...formData, ResumeUrl: resumeUrl };\n//         delete updatedFormData.Resume; // Remove the file object\n\n//         await submitFormDataToDynamoDB(updatedFormData);\n//         console.log(\"Form and resume submitted successfully\");\n//         setShowPopup(true);\n//         setFormData(initialFormData); // Reset form\n//       } else {\n//         throw new Error(\"Resume file is required.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Submission error:\", error);\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Submit Form and Resume</h2>\n//       <form onSubmit={handleSubmit}>\n//         {/* Form fields */}\n//         <input\n//           type=\"String\"\n//           name=\"FullName\"\n//           value={formData.FullName}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"String\"\n//           name=\"EmailId\"\n//           value={formData.EmailId}\n//           onChange={handleInputChange}\n//         />\n//         <label>\n//           ReqId:\n//           <input\n//             type=\"Number\"\n//             name=\"ReqId\"\n//             value={formData.ReqId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         {/* Include other fields as needed */}\n//         <input type=\"file\" onChange={handleFileChange} ref={resumeInputRef} />\n//         <button type=\"submit\" disabled={isSubmitting}>\n//           Submit\n//         </button>\n//       </form>\n\n//       {showPopup && (\n//         <div>\n//           <p>Your form has been submitted successfully.</p>\n//           <button onClick={() => setShowPopup(false)}>Close</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FormPage() {\n  _s();\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\"\n    // Add other fields as necessary\n  });\n  const [resume, setResume] = useState(null);\n  const [showSuccessPopup, setShowSuccessPopup] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleResumeChange = e => {\n    setResume(e.target.files[0]);\n  };\n  const uploadResumeToS3 = async file => {\n    const uploadUrl = \"https://your-amazon-s3-api-url.com/upload\";\n    // Fetch the pre-signed URL or direct S3 bucket upload URL here\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const response = await fetch(uploadUrl, {\n      method: \"POST\",\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to upload resume\");\n    }\n    return response.json(); // Assuming the response includes the file URL\n  };\n  const submitFormToDynamoDB = async data => {\n    const submissionUrl = \"https://your-dynamodb-api-url.com/submit\";\n    const response = await fetch(submissionUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to submit form\");\n    }\n    return response.json(); // Assuming the API responds with success or relevant data\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    try {\n      // First, upload the resume to S3\n      const uploadResponse = await uploadResumeToS3(resume);\n      const resumeUrl = uploadResponse.url; // Assuming the response contains the URL\n\n      // Then, submit the form data along with the resume URL to DynamoDB\n      await submitFormToDynamoDB({\n        ...formData,\n        resumeUrl\n      });\n\n      // Show success popup\n      setShowSuccessPopup(true);\n    } catch (error) {\n      alert(error.message); // Handle errors more gracefully in production\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"fullName\",\n        value: formData.fullName,\n        onChange: handleInputChange,\n        placeholder: \"Full Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        value: formData.email,\n        onChange: handleInputChange,\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleResumeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isSubmitting,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 7\n    }, this), showSuccessPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your form has been successfully submitted.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowSuccessPopup(false),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 563,\n    columnNumber: 5\n  }, this);\n}\n_s(FormPage, \"ug7nPEl838/pCdTKGjmkKVVkYAE=\");\n_c = FormPage;\nexport default FormPage;\nvar _c;\n$RefreshReg$(_c, \"FormPage\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","FormPage","_s","formData","setFormData","fullName","email","resume","setResume","showSuccessPopup","setShowSuccessPopup","isSubmitting","setIsSubmitting","handleInputChange","e","name","value","target","prev","handleResumeChange","files","uploadResumeToS3","file","uploadUrl","FormData","append","response","fetch","method","body","ok","Error","json","submitFormToDynamoDB","data","submissionUrl","headers","JSON","stringify","handleSubmit","preventDefault","uploadResponse","resumeUrl","url","error","alert","message","children","onSubmit","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx"],"sourcesContent":["// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null, // Placeholder for the resume file\n//   };\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => {\n//     return /\\S+@\\S+\\.\\S+/.test(email);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors({\n//             ...validationErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           });\n//         } else {\n//           setFormData({\n//             ...formData,\n//             Resume: file,\n//           });\n//           let newErrors = { ...validationErrors };\n//           delete newErrors.Resume;\n//           setValidationErrors(newErrors);\n//         }\n//       }\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [id]: value,\n//       });\n//       let newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       const data = await response.json();\n\n//       console.log(\"Server response:\", data);\n\n//       if (!response.ok) {\n//         throw new Error(`Server responded with status: ${response.status}`);\n//       }\n\n//       // Since the server confirms success but doesn't provide a URL, log the success and maybe return a success message instead\n//       if (data.message === \"File uploaded successfully\") {\n//         console.log(data.message);\n//         // Return a static message or a mock URL, or adjust as needed\n//         return \"Upload successful, no URL provided\"; // Placeholder return value\n//       } else {\n//         throw new Error(\n//           \"Unexpected server response, upload may not be successful.\"\n//         );\n//       }\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       throw error;\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!validateForm()) {\n//       console.log(\"Form validation failed\", validationErrors);\n//       return;\n//     }\n\n//     if (formData.Resume) {\n//       try {\n//         // Note: `uploadResult` now may not be a URL but a success message\n//         const uploadResult = await uploadResume(formData.Resume);\n//         console.log(uploadResult); // Log the success message or handle as needed\n\n//         // Proceed with the rest of your form submission logic\n//         console.log(\"Form Data:\", JSON.stringify(formData, null, 2));\n//         setShowPopup(true);\n//       } catch (error) {\n//         alert(\"Failed to upload resume: \" + error.message);\n//       }\n//     } else {\n//       alert(\"Please select a resume to upload.\");\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\";\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {/* The form component with Tailwind CSS */}\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {/* Input fields generated based on formData */}\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor={key}\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     name={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label\n//                 htmlFor=\"Resume\"\n//                 className=\"block text-sm font-medium text-white\"\n//               >\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors[\"Resume\"] && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors[\"Resume\"]}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n// App.js or a new component file\n\n//Upload form to dynamoDB\n// import React, { useState } from \"react\";\n\n// function App() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//     // Add other form fields as needed\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsSubmitting(true);\n\n//     // Replace 'YOUR_DYNAMODB_API_ENDPOINT' with your actual DynamoDB API endpoint\n//     const apiEndpoint =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n\n//     try {\n//       const response = await fetch(apiEndpoint, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit form data\");\n//       }\n\n//       // Handle successful submission here (e.g., clear form, show message)\n//       console.log(\"Form submitted successfully\");\n//       setFormData(initialFormData); // Reset form\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//       // Handle submission error here (e.g., show error message)\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h2>Submit Form Data</h2>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Full Name:\n//           <input\n//             type=\"String\"\n//             name=\"FullName\"\n//             value={formData.FullName}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           ReqId:\n//           <input\n//             type=\"Number\"\n//             name=\"ReqId\"\n//             value={formData.ReqId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Email ID:\n//           <input\n//             type=\"String\"\n//             name=\"EmailId\"\n//             value={formData.EmailId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         {/* Add other fields as needed */}\n//         <button type=\"submit\" disabled={isSubmitting}>\n//           Submit\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//     // Additional form fields\n//     ResumeUrl: \"\", // This will hold the URL of the uploaded resume\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleFileChange = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setFormData({ ...formData, Resume: file });\n//     }\n//   };\n\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     const response = await fetch(uploadUrl, {\n//       method: \"POST\",\n//       body: fileData,\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(\"Failed to upload file.\");\n//     }\n\n//     const data = await response.json();\n//     return data.url; // Assuming the response contains the URL of the uploaded file\n//   };\n\n//   const submitFormDataToDynamoDB = async (data) => {\n//     const apiEndpoint =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     const response = await fetch(apiEndpoint, {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(data),\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(\"Failed to submit form data.\");\n//     }\n\n//     return await response.json(); // Assuming the API returns some response\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsSubmitting(true);\n\n//     try {\n//       if (formData.Resume) {\n//         const resumeUrl = await uploadResume(formData.Resume);\n//         const updatedFormData = { ...formData, ResumeUrl: resumeUrl };\n//         delete updatedFormData.Resume; // Remove the file object\n\n//         await submitFormDataToDynamoDB(updatedFormData);\n//         console.log(\"Form and resume submitted successfully\");\n//         setShowPopup(true);\n//         setFormData(initialFormData); // Reset form\n//       } else {\n//         throw new Error(\"Resume file is required.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Submission error:\", error);\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Submit Form and Resume</h2>\n//       <form onSubmit={handleSubmit}>\n//         {/* Form fields */}\n//         <input\n//           type=\"String\"\n//           name=\"FullName\"\n//           value={formData.FullName}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"String\"\n//           name=\"EmailId\"\n//           value={formData.EmailId}\n//           onChange={handleInputChange}\n//         />\n//         <label>\n//           ReqId:\n//           <input\n//             type=\"Number\"\n//             name=\"ReqId\"\n//             value={formData.ReqId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         {/* Include other fields as needed */}\n//         <input type=\"file\" onChange={handleFileChange} ref={resumeInputRef} />\n//         <button type=\"submit\" disabled={isSubmitting}>\n//           Submit\n//         </button>\n//       </form>\n\n//       {showPopup && (\n//         <div>\n//           <p>Your form has been submitted successfully.</p>\n//           <button onClick={() => setShowPopup(false)}>Close</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\nimport React, { useState, useRef } from \"react\";\n\nfunction FormPage() {\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    // Add other fields as necessary\n  });\n  const [resume, setResume] = useState(null);\n  const [showSuccessPopup, setShowSuccessPopup] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleResumeChange = (e) => {\n    setResume(e.target.files[0]);\n  };\n\n  const uploadResumeToS3 = async (file) => {\n    const uploadUrl = \"https://your-amazon-s3-api-url.com/upload\";\n    // Fetch the pre-signed URL or direct S3 bucket upload URL here\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    const response = await fetch(uploadUrl, {\n      method: \"POST\",\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to upload resume\");\n    }\n\n    return response.json(); // Assuming the response includes the file URL\n  };\n\n  const submitFormToDynamoDB = async (data) => {\n    const submissionUrl = \"https://your-dynamodb-api-url.com/submit\";\n\n    const response = await fetch(submissionUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to submit form\");\n    }\n\n    return response.json(); // Assuming the API responds with success or relevant data\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // First, upload the resume to S3\n      const uploadResponse = await uploadResumeToS3(resume);\n      const resumeUrl = uploadResponse.url; // Assuming the response contains the URL\n\n      // Then, submit the form data along with the resume URL to DynamoDB\n      await submitFormToDynamoDB({ ...formData, resumeUrl });\n\n      // Show success popup\n      setShowSuccessPopup(true);\n    } catch (error) {\n      alert(error.message); // Handle errors more gracefully in production\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"fullName\"\n          value={formData.fullName}\n          onChange={handleInputChange}\n          placeholder=\"Full Name\"\n        />\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleInputChange}\n          placeholder=\"Email\"\n        />\n        {/* Add other input fields as necessary */}\n        <input type=\"file\" onChange={handleResumeChange} />\n        <button type=\"submit\" disabled={isSubmitting}>\n          Submit\n        </button>\n      </form>\n\n      {showSuccessPopup && (\n        <div>\n          <p>Your form has been successfully submitted.</p>\n          <button onClick={() => setShowSuccessPopup(false)}>Close</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default FormPage;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC;IACvCQ,QAAQ,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}