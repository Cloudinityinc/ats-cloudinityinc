{"ast":null,"code":"var _jsxFileName = \"/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null, // Placeholder for the resume file\n//   };\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => {\n//     return /\\S+@\\S+\\.\\S+/.test(email);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors({\n//             ...validationErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           });\n//         } else {\n//           setFormData({\n//             ...formData,\n//             Resume: file,\n//           });\n//           let newErrors = { ...validationErrors };\n//           delete newErrors.Resume;\n//           setValidationErrors(newErrors);\n//         }\n//       }\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [id]: value,\n//       });\n//       let newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       const data = await response.json();\n\n//       console.log(\"Server response:\", data);\n\n//       if (!response.ok) {\n//         throw new Error(`Server responded with status: ${response.status}`);\n//       }\n\n//       // Since the server confirms success but doesn't provide a URL, log the success and maybe return a success message instead\n//       if (data.message === \"File uploaded successfully\") {\n//         console.log(data.message);\n//         // Return a static message or a mock URL, or adjust as needed\n//         return \"Upload successful, no URL provided\"; // Placeholder return value\n//       } else {\n//         throw new Error(\n//           \"Unexpected server response, upload may not be successful.\"\n//         );\n//       }\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       throw error;\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!validateForm()) {\n//       console.log(\"Form validation failed\", validationErrors);\n//       return;\n//     }\n\n//     if (formData.Resume) {\n//       try {\n//         // Note: `uploadResult` now may not be a URL but a success message\n//         const uploadResult = await uploadResume(formData.Resume);\n//         console.log(uploadResult); // Log the success message or handle as needed\n\n//         // Proceed with the rest of your form submission logic\n//         console.log(\"Form Data:\", JSON.stringify(formData, null, 2));\n//         setShowPopup(true);\n//       } catch (error) {\n//         alert(\"Failed to upload resume: \" + error.message);\n//       }\n//     } else {\n//       alert(\"Please select a resume to upload.\");\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\";\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {/* The form component with Tailwind CSS */}\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {/* Input fields generated based on formData */}\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor={key}\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     name={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label\n//                 htmlFor=\"Resume\"\n//                 className=\"block text-sm font-medium text-white\"\n//               >\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors[\"Resume\"] && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors[\"Resume\"]}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n// App.js or a new component file\n\n//Upload form to dynamoDB\n// import React, { useState } from \"react\";\n\n// function App() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//     // Add other form fields as needed\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsSubmitting(true);\n\n//     // Replace 'YOUR_DYNAMODB_API_ENDPOINT' with your actual DynamoDB API endpoint\n//     const apiEndpoint =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n\n//     try {\n//       const response = await fetch(apiEndpoint, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit form data\");\n//       }\n\n//       // Handle successful submission here (e.g., clear form, show message)\n//       console.log(\"Form submitted successfully\");\n//       setFormData(initialFormData); // Reset form\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//       // Handle submission error here (e.g., show error message)\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h2>Submit Form Data</h2>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Full Name:\n//           <input\n//             type=\"String\"\n//             name=\"FullName\"\n//             value={formData.FullName}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           ReqId:\n//           <input\n//             type=\"Number\"\n//             name=\"ReqId\"\n//             value={formData.ReqId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Email ID:\n//           <input\n//             type=\"String\"\n//             name=\"EmailId\"\n//             value={formData.EmailId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         {/* Add other fields as needed */}\n//         <button type=\"submit\" disabled={isSubmitting}>\n//           Submit\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SuccessPage() {\n  _s();\n  const initialFormData = {\n    FullName: \"\",\n    ReqId: \"\",\n    EmailId: \"\",\n    // Additional form fields\n    ResumeUrl: \"\" // This will hold the URL of the uploaded resume\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showPopup, setShowPopup] = useState(false);\n  const resumeInputRef = useRef(null);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      setFormData({\n        ...formData,\n        Resume: file\n      });\n    }\n  };\n  const uploadResume = async file => {\n    const filename = encodeURIComponent(file.name);\n    const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n    const fileData = new FormData();\n    fileData.append(\"file\", file);\n    const response = await fetch(uploadUrl, {\n      method: \"POST\",\n      body: fileData\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to upload file.\");\n    }\n    const data = await response.json();\n    return data.url; // Assuming the response contains the URL of the uploaded file\n  };\n  const submitFormDataToDynamoDB = async data => {\n    const apiEndpoint = \"https://your-api-endpoint-for-dynamodb.com/submit\";\n    const response = await fetch(apiEndpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to submit form data.\");\n    }\n    return await response.json(); // Assuming the API returns some response\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    try {\n      if (formData.Resume) {\n        const resumeUrl = await uploadResume(formData.Resume);\n        const updatedFormData = {\n          ...formData,\n          ResumeUrl: resumeUrl\n        };\n        delete updatedFormData.Resume; // Remove the file object\n\n        await submitFormDataToDynamoDB(updatedFormData);\n        console.log(\"Form and resume submitted successfully\");\n        setShowPopup(true);\n        setFormData(initialFormData); // Reset form\n      } else {\n        throw new Error(\"Resume file is required.\");\n      }\n    } catch (error) {\n      console.error(\"Submission error:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Submit Form and Resume\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"FullName\",\n        value: formData.FullName,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"EmailId\",\n        value: formData.EmailId,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        ref: resumeInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isSubmitting,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your form has been submitted successfully.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowPopup(false),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 5\n  }, this);\n}\n_s(SuccessPage, \"mGzaj2j+3WSWNb5ufUXZKwBC56o=\");\n_c = SuccessPage;\nexport default SuccessPage;\nvar _c;\n$RefreshReg$(_c, \"SuccessPage\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","SuccessPage","_s","initialFormData","FullName","ReqId","EmailId","ResumeUrl","formData","setFormData","isSubmitting","setIsSubmitting","showPopup","setShowPopup","resumeInputRef","handleInputChange","e","name","value","target","handleFileChange","file","files","Resume","uploadResume","filename","encodeURIComponent","uploadUrl","fileData","FormData","append","response","fetch","method","body","ok","Error","data","json","url","submitFormDataToDynamoDB","apiEndpoint","headers","JSON","stringify","handleSubmit","preventDefault","resumeUrl","updatedFormData","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","ref","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx"],"sourcesContent":["// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null, // Placeholder for the resume file\n//   };\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => {\n//     return /\\S+@\\S+\\.\\S+/.test(email);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors({\n//             ...validationErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           });\n//         } else {\n//           setFormData({\n//             ...formData,\n//             Resume: file,\n//           });\n//           let newErrors = { ...validationErrors };\n//           delete newErrors.Resume;\n//           setValidationErrors(newErrors);\n//         }\n//       }\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [id]: value,\n//       });\n//       let newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       const data = await response.json();\n\n//       console.log(\"Server response:\", data);\n\n//       if (!response.ok) {\n//         throw new Error(`Server responded with status: ${response.status}`);\n//       }\n\n//       // Since the server confirms success but doesn't provide a URL, log the success and maybe return a success message instead\n//       if (data.message === \"File uploaded successfully\") {\n//         console.log(data.message);\n//         // Return a static message or a mock URL, or adjust as needed\n//         return \"Upload successful, no URL provided\"; // Placeholder return value\n//       } else {\n//         throw new Error(\n//           \"Unexpected server response, upload may not be successful.\"\n//         );\n//       }\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       throw error;\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!validateForm()) {\n//       console.log(\"Form validation failed\", validationErrors);\n//       return;\n//     }\n\n//     if (formData.Resume) {\n//       try {\n//         // Note: `uploadResult` now may not be a URL but a success message\n//         const uploadResult = await uploadResume(formData.Resume);\n//         console.log(uploadResult); // Log the success message or handle as needed\n\n//         // Proceed with the rest of your form submission logic\n//         console.log(\"Form Data:\", JSON.stringify(formData, null, 2));\n//         setShowPopup(true);\n//       } catch (error) {\n//         alert(\"Failed to upload resume: \" + error.message);\n//       }\n//     } else {\n//       alert(\"Please select a resume to upload.\");\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\";\n//     }\n//   };\n\n//   return (\n//     <div>\n//       {/* The form component with Tailwind CSS */}\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {/* Input fields generated based on formData */}\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor={key}\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     name={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label\n//                 htmlFor=\"Resume\"\n//                 className=\"block text-sm font-medium text-white\"\n//               >\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors[\"Resume\"] && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors[\"Resume\"]}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n// App.js or a new component file\n\n//Upload form to dynamoDB\n// import React, { useState } from \"react\";\n\n// function App() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//     // Add other form fields as needed\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsSubmitting(true);\n\n//     // Replace 'YOUR_DYNAMODB_API_ENDPOINT' with your actual DynamoDB API endpoint\n//     const apiEndpoint =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n\n//     try {\n//       const response = await fetch(apiEndpoint, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit form data\");\n//       }\n\n//       // Handle successful submission here (e.g., clear form, show message)\n//       console.log(\"Form submitted successfully\");\n//       setFormData(initialFormData); // Reset form\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//       // Handle submission error here (e.g., show error message)\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h2>Submit Form Data</h2>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Full Name:\n//           <input\n//             type=\"String\"\n//             name=\"FullName\"\n//             value={formData.FullName}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           ReqId:\n//           <input\n//             type=\"Number\"\n//             name=\"ReqId\"\n//             value={formData.ReqId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Email ID:\n//           <input\n//             type=\"String\"\n//             name=\"EmailId\"\n//             value={formData.EmailId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         {/* Add other fields as needed */}\n//         <button type=\"submit\" disabled={isSubmitting}>\n//           Submit\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useRef } from \"react\";\n\nfunction SuccessPage() {\n  const initialFormData = {\n    FullName: \"\",\n    ReqId: \"\",\n    EmailId: \"\",\n    // Additional form fields\n    ResumeUrl: \"\", // This will hold the URL of the uploaded resume\n  };\n\n  const [formData, setFormData] = useState(initialFormData);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showPopup, setShowPopup] = useState(false);\n  const resumeInputRef = useRef(null);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setFormData({ ...formData, Resume: file });\n    }\n  };\n\n  const uploadResume = async (file) => {\n    const filename = encodeURIComponent(file.name);\n    const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n    const fileData = new FormData();\n    fileData.append(\"file\", file);\n\n    const response = await fetch(uploadUrl, {\n      method: \"POST\",\n      body: fileData,\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to upload file.\");\n    }\n\n    const data = await response.json();\n    return data.url; // Assuming the response contains the URL of the uploaded file\n  };\n\n  const submitFormDataToDynamoDB = async (data) => {\n    const apiEndpoint = \"https://your-api-endpoint-for-dynamodb.com/submit\";\n    const response = await fetch(apiEndpoint, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to submit form data.\");\n    }\n\n    return await response.json(); // Assuming the API returns some response\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      if (formData.Resume) {\n        const resumeUrl = await uploadResume(formData.Resume);\n        const updatedFormData = { ...formData, ResumeUrl: resumeUrl };\n        delete updatedFormData.Resume; // Remove the file object\n\n        await submitFormDataToDynamoDB(updatedFormData);\n        console.log(\"Form and resume submitted successfully\");\n        setShowPopup(true);\n        setFormData(initialFormData); // Reset form\n      } else {\n        throw new Error(\"Resume file is required.\");\n      }\n    } catch (error) {\n      console.error(\"Submission error:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Submit Form and Resume</h2>\n      <form onSubmit={handleSubmit}>\n        {/* Form fields */}\n        <input\n          type=\"text\"\n          name=\"FullName\"\n          value={formData.FullName}\n          onChange={handleInputChange}\n        />\n        <input\n          type=\"text\"\n          name=\"EmailId\"\n          value={formData.EmailId}\n          onChange={handleInputChange}\n        />\n        {/* Include other fields as needed */}\n        <input type=\"file\" onChange={handleFileChange} ref={resumeInputRef} />\n        <button type=\"submit\" disabled={isSubmitting}>\n          Submit\n        </button>\n      </form>\n\n      {showPopup && (\n        <div>\n          <p>Your form has been submitted successfully.</p>\n          <button onClick={() => setShowPopup(false)}>Close</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SuccessPage;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}