{"ast":null,"code":"var _jsxFileName = \"/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   // Initial state for form data, including a placeholder for the resume file\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null, // Placeholder for the resume file\n//   };\n\n//   // State hooks for form data, validation errors, and submission status\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Ref for the resume input to reset it upon submission\n\n//   // Handles form input changes and updates state accordingly\n//   const handleInputChange = (e) => {\n//     const { name, value, files } = e.target;\n//     // Reset validation errors for the current input\n//     setValidationErrors((prevErrors) => ({ ...prevErrors, [name]: null }));\n\n//     if (name === \"Resume\" && files) {\n//       setFormData((prevFormData) => ({ ...prevFormData, Resume: files[0] }));\n//     } else {\n//       setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\n//     }\n//   };\n\n//   // Upload resume to S3 and return the file URL\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) throw new Error(\"Failed to upload resume\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Submit form details including resume URL to DynamoDB\n//   const submitFormDetails = async (formData) => {\n//     const submitUrl =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to submit form details\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Submission Error:\", error);\n//       alert(\"Submission failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (formData.Resume) {\n//       const uploadResult = await uploadResume(formData.Resume);\n//       if (uploadResult && uploadResult.url) {\n//         // Assume uploadResult contains the URL of the uploaded file\n//         const formSubmissionResponse = await submitFormDetails({\n//           ...formData,\n//           ResumeUrl: uploadResult.url,\n//         });\n//         if (formSubmissionResponse) {\n//           console.log(\"Form submitted successfully\");\n//           setShowPopup(true);\n//         }\n//       }\n//     } else {\n//       console.log(\"Please select a resume to upload.\");\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//   };\n\n//   // // Handle form submission with validation and data processing\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   if (validateForm()) {\n//   //     console.log(\"Form Data:\", formData);\n//   //     // Implement the upload logic here\n//   //     setShowPopup(true); // Show success message on successful validation/submission\n//   //   } else {\n//   //     console.log(\"Validation errors:\", validationErrors);\n//   //   }\n//   // };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {/* Dynamically generate input fields based on formData */}\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                     htmlFor={key}\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef} // Assign the ref to the file input\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors.Resume && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Resume}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//     // <div>\n//     //   <form onSubmit={handleSubmit}>\n//     //     {Object.keys(initialFormData).map((key) => (\n//     //       <div key={key} className=\"mb-4\">\n//     //         <label htmlFor={key}>\n//     //           {key.replace(/([A-Z])/g, \" $1\").trim()}:\n//     //         </label>\n//     //         {key === \"Resume\" ? (\n//     //           <input\n//     //             type=\"file\"\n//     //             name=\"Resume\"\n//     //             onChange={handleInputChange}\n//     //             ref={resumeInputRef}\n//     //             className={validationErrors[key] ? \"border-red-500\" : \"\"}\n//     //             required\n//     //           />\n//     //         ) : (\n//     //           <input\n//     //             type=\"text\"\n//     //             name={key}\n//     //             value={formData[key]}\n//     //             onChange={handleInputChange}\n//     //             className={validationErrors[key] ? \"border-red-500\" : \"\"}\n//     //             required\n//     //           />\n//     //         )}\n//     //         {validationErrors[key] && (\n//     //           <div className=\"text-red-500\">{validationErrors[key]}</div>\n//     //         )}\n//     //       </div>\n//     //     ))}\n//     //     <button\n//     //       type=\"submit\"\n//     //       className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//     //     >\n//     //       Submit\n//     //     </button>\n//     //   </form>\n//     //   {showPopup && (\n//     //     <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//     //       <div className=\"bg-white p-5 rounded-lg shadow-lg text-center\">\n//     //         <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//     //         <p>Your form has been submitted successfully.</p>\n//     //         <pre>{JSON.stringify(formData, null, 2)}</pre>\n//     //         <button\n//     //           onClick={() => setShowPopup(false)}\n//     //           className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\"\n//     //         >\n//     //           Close\n//     //         </button>\n//     //       </div>\n//     //     </div>\n//     //   )}\n//     // </div>\n//   );\n// }\n\n// export default SuccessPage;\n\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SuccessPage() {\n  _s();\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormattingNeeded: \"\",\n    FormattedBy: \"\",\n    Resume: null // Placeholder for the resume file\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const resumeInputRef = useRef(null);\n  const isValidEmail = email => {\n    return /\\S+@\\S+\\.\\S+/.test(email);\n  };\n  const handleInputChange = e => {\n    const {\n      id,\n      value,\n      files\n    } = e.target;\n    if (id === \"Resume\" && files) {\n      const file = files[0];\n      if (file) {\n        const allowedTypes = [\"application/pdf\", \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"];\n        if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n          setValidationErrors({\n            ...validationErrors,\n            Resume: \"Only PDF or DOC files under 10MB are allowed.\"\n          });\n        } else {\n          setFormData({\n            ...formData,\n            Resume: file\n          });\n          let newErrors = {\n            ...validationErrors\n          };\n          delete newErrors.Resume;\n          setValidationErrors(newErrors);\n        }\n      }\n    } else {\n      setFormData({\n        ...formData,\n        [id]: value\n      });\n      let newErrors = {\n        ...validationErrors\n      };\n      delete newErrors[id];\n      setValidationErrors(newErrors);\n    }\n  };\n  const validateForm = () => {\n    let isValid = true;\n    const newErrors = {};\n    Object.keys(formData).forEach(key => {\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n        isValid = false;\n      }\n    });\n    if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n      newErrors.EmailId = \"Invalid email format.\";\n      isValid = false;\n    }\n    if (!formData.Resume) {\n      newErrors.Resume = \"Please upload a resume.\";\n      isValid = false;\n    }\n    setValidationErrors(newErrors);\n    return isValid;\n  };\n\n  // const uploadResume = async (file) => {\n  //   const filename = encodeURIComponent(file.name);\n  //   const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n  //   const fileData = new FormData();\n  //   fileData.append(\"file\", file);\n\n  //   try {\n  //     const response = await fetch(uploadUrl, {\n  //       method: \"POST\",\n  //       body: fileData,\n  //     });\n  //     const dat = await response.json();\n  //     console.log(\"Server response:\", dat); // Add this line\n  //     if (!response.ok) {\n  //       throw new Error(\"Failed to upload resume\");\n  //     }\n  //     const data = await response.json();\n  //     if (!data.url) {\n  //       console.log(\"Server response:\", data); // Log the actual response for debugging\n  //       throw new Error(\"Upload did not return a URL.\");\n  //     }\n  //     return data;\n  //   } catch (error) {\n  //     console.error(\"Upload Error:\", error);\n  //     throw error; // Rethrow the error to be caught in handleSubmit\n  //   }\n  // };\n\n  //2nd method\n  // const uploadResume = async (file) => {\n  //   const filename = encodeURIComponent(file.name);\n  //   const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n  //   const fileData = new FormData();\n  //   fileData.append(\"file\", file);\n\n  //   try {\n  //     const response = await fetch(uploadUrl, {\n  //       method: \"POST\",\n  //       body: fileData,\n  //     });\n\n  //     // Read the response body once and store it\n  //     const data = await response.json();\n\n  //     // Log the server response\n  //     console.log(\"Server response:\", data);\n\n  //     // Check if the response was not OK and throw an error before accessing the data\n  //     if (!response.ok) {\n  //       throw new Error(\"Failed to upload resume\");\n  //     }\n\n  //     // Assuming your server response includes a property `url` with the file URL\n  //     if (data.url) {\n  //       return data; // Return the entire response or just the URL as needed\n  //     } else {\n  //       throw new Error(\"Upload did not return a URL.\");\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Upload Error:\", error);\n  //     throw error; // Rethrow the error to be caught in handleSubmit\n  //   }\n  // };\n\n  //3`  method\n\n  // const uploadResume = async (file) => {\n  //   const filename = encodeURIComponent(file.name);\n  //   const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n  //   const fileData = new FormData();\n  //   fileData.append(\"file\", file);\n\n  //   try {\n  //     const response = await fetch(uploadUrl, {\n  //       method: \"POST\",\n  //       body: fileData,\n  //     });\n  //     const data = await response.json();\n  //     console.log(\"Server response:\", data); // Verify the structure\n\n  //     if (!response.ok) {\n  //       throw new Error(`Failed to upload resume: ${response.statusText}`);\n  //     }\n\n  //     // Adjust this line based on the actual response structure\n  //     if (!data.url) {\n  //       throw new Error(\"Upload did not return a URL.\");\n  //     }\n  //     return data; // or return data.url if you just need the URL\n  //   } catch (error) {\n  //     console.error(\"Upload Error:\", error);\n  //     throw error; // Rethrow the error to be caught in handleSubmit\n  //   }\n  // };\n\n  //4th method\n\n  // const uploadResume = async (file) => {\n  //   const filename = encodeURIComponent(file.name);\n  //   const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n  //   const fileData = new FormData();\n  //   fileData.append(\"file\", file);\n\n  //   try {\n  //     const response = await fetch(uploadUrl, {\n  //       method: \"POST\",\n  //       body: fileData,\n  //     });\n\n  //     // Ensure you only read the response JSON once\n  //     const data = await response.json();\n  //     console.log(\"Server response:\", data); // Make sure you see this log to verify the structure\n\n  //     if (!response.ok) {\n  //       throw new Error(`Failed to upload resume: ${response.statusText}`);\n  //     }\n\n  //     // Adjust according to the actual response structure.\n  //     // Example for a direct URL property:\n  //     if (data.url) {\n  //       return data.url; // Assuming the URL is directly in the 'url' property\n  //     } else {\n  //       console.log(\"Server response:\", data); // Log the actual response for debugging\n  //       throw new Error(\"Upload did not return a URL.\");\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Upload Error:\", error);\n  //     throw error; // Rethrow the error to be caught in handleSubmit\n  //   }\n  // };\n\n  //5 - working\n\n  // const uploadResume = async (file) => {\n  //   const filename = encodeURIComponent(file.name);\n  //   const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n  //   const fileData = new FormData();\n  //   fileData.append(\"file\", file);\n\n  //   try {\n  //     const response = await fetch(uploadUrl, {\n  //       method: \"POST\",\n  //       body: fileData,\n  //     });\n\n  //     // Parse the JSON response only once\n  //     const data = await response.json();\n  //     console.log(\"Server response:\", data);\n\n  //     if (!response.ok) {\n  //       throw new Error(`Failed to upload resume: ${response.statusText}`);\n  //     }\n\n  //     // Check for the URL in the response\n  //     if (data.url) {\n  //       return data.url; // Return the URL for the uploaded file\n  //     } else {\n  //       throw new Error(\"Upload did not return a URL.\");\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Upload Error:\", error);\n  //     throw error; // Ensure this error is caught in the handleSubmit function\n  //   }\n  // };\n\n  //6\n  const uploadResume = async file => {\n    const filename = encodeURIComponent(file.name);\n    const uploadUrl = \"https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}\"; // Your API endpoint\n    const fileData = new FormData();\n    fileData.append(\"file\", file);\n    try {\n      const response = await fetch(uploadUrl, {\n        method: \"POST\",\n        body: fileData\n      });\n      const data = await response.json();\n      if (!response.ok || !data.url) {\n        throw new Error(\"Failed to upload resume\");\n      }\n      return data.url; // Return the URL of the uploaded file\n    } catch (error) {\n      console.error(\"Upload Error:\", error);\n      throw error;\n    }\n  };\n\n  //1st method\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   console.log(\"Submitting form...\");\n\n  //   if (!validateForm()) {\n  //     console.log(\"Form validation failed\", validationErrors);\n  //     return;\n  //   }\n\n  //   console.log(\"Form validated successfully\");\n\n  //   if (formData.Resume) {\n  //     try {\n  //       console.log(\"Uploading resume...\");\n  //       const uploadResult = await uploadResume(formData.Resume);\n  //       console.log(\"Resume uploaded successfully:\", uploadResult.url);\n  //       setShowPopup(true);\n  //       console.log(\n  //         \"Form Data:\",\n  //         JSON.stringify({ ...formData, ResumeUrl: uploadResult.url }, null, 2)\n  //       );\n  //     } catch (error) {\n  //       alert(error.message);\n  //     }\n  //   } else {\n  //     console.log(\"No resume selected for upload.\");\n  //   }\n  // };\n\n  //2nd method\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   console.log(\"Submitting form...\");\n\n  //   if (!validateForm()) {\n  //     console.log(\"Form validation failed\", validationErrors);\n  //     return;\n  //   }\n\n  //   if (formData.Resume) {\n  //     try {\n  //       console.log(\"Uploading resume...\");\n  //       const fileUrl = await uploadResume(formData.Resume); // Expect the URL as return value\n  //       console.log(\"Resume uploaded successfully:\", fileUrl);\n\n  //       // Update formData with ResumeUrl for server submission if needed\n  //       const updatedFormData = { ...formData, ResumeUrl: fileUrl };\n\n  //       // Optionally submit the updated form data to another server endpoint\n  //       // const submissionResult = await submitFormDetails(updatedFormData);\n\n  //       console.log(\"Form Data:\", JSON.stringify(updatedFormData, null, 2));\n  //       setShowPopup(true); // Show the popup only if everything was successful\n  //     } catch (error) {\n  //       alert(\"Failed to submit form: \" + error.message);\n  //     }\n  //   } else {\n  //     console.log(\"Please select a resume to upload.\");\n  //   }\n  // };\n\n  // const handleSubmit = (event) => {\n  //   event.preventDefault();\n  //   if (validateForm()) {\n  //     console.log(\"Form Data Submitted:\", formData);\n  //     setShowPopup(true);\n  //   }\n  // };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!validateForm()) {\n      console.log(\"Form validation failed\", validationErrors);\n      return; // Stop form submission\n    }\n    if (formData.Resume) {\n      try {\n        const fileUrl = await uploadResume(formData.Resume);\n        console.log(\"Resume uploaded to:\", fileUrl);\n        // Optional: Update formData with the URL of the uploaded file\n        formData.ResumeUrl = fileUrl;\n        console.log(\"Form Data:\", JSON.stringify(formData, null, 2));\n        setShowPopup(true); // Show success popup\n      } catch (error) {\n        alert(\"Failed to upload resume: \" + error.message);\n      }\n    } else {\n      alert(\"Please select a resume to upload.\");\n    }\n  };\n  const handleClosePopup = () => {\n    setShowPopup(false);\n    setFormData(initialFormData);\n    setValidationErrors({});\n    if (resumeInputRef.current) {\n      resumeInputRef.current.value = \"\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl font-bold text-white capitalize dark:text-white\",\n        children: \"Employee Information Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\",\n          children: [Object.keys(initialFormData).filter(key => key !== \"Resume\").map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: key,\n              className: \"text-white dark:text-gray-200 block text-sm font-bold mb-2\",\n              children: key.replace(/([A-Z])/g, \" $1\").trim()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: key,\n              name: key,\n              value: formData[key],\n              onChange: handleInputChange,\n              className: \"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 683,\n              columnNumber: 19\n            }, this), validationErrors[key] && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-red-500 text-xs italic\",\n              children: validationErrors[key]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 21\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"Resume\",\n              className: \"block text-sm font-medium text-white\",\n              children: \"Resume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"Resume\",\n              name: \"Resume\",\n              type: \"file\",\n              onChange: handleInputChange,\n              ref: resumeInputRef,\n              className: \"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 705,\n              columnNumber: 15\n            }, this), validationErrors[\"Resume\"] && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-red-500 text-xs italic\",\n              children: validationErrors[\"Resume\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 714,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-5 rounded-lg shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg mb-4\",\n          children: \"Submission Successful\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your form has been submitted successfully.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClosePopup,\n          className: \"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 664,\n    columnNumber: 5\n  }, this);\n}\n_s(SuccessPage, \"YWwwmHvGuABOeL2WUGvea5cf81M=\");\n_c = SuccessPage;\nexport default SuccessPage;\nvar _c;\n$RefreshReg$(_c, \"SuccessPage\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","SuccessPage","_s","initialFormData","FullName","RequiredID","RequiredTitle","Role","RequiredCreationDate","VendorID","ImmigrationStatus","ContractType","SubmissionDate","RequiredSubmissionEndDate","CandidateCurrentLocation","ContactNumber","RecruiterName","State","SubmissionStatus","VendorRate","CandidatePayRate","BillRateMargin","ResumeSource","EmailId","LinkedInID","EmployerInformation","ProfessionalReferences","DOB","RequiredSkills","ResumeFormattingNeeded","FormattedBy","Resume","formData","setFormData","validationErrors","setValidationErrors","showPopup","setShowPopup","resumeInputRef","isValidEmail","email","test","handleInputChange","e","id","value","files","target","file","allowedTypes","includes","type","size","newErrors","validateForm","isValid","Object","keys","forEach","key","uploadResume","filename","encodeURIComponent","name","uploadUrl","fileData","FormData","append","response","fetch","method","body","data","json","ok","url","Error","error","console","handleSubmit","preventDefault","log","fileUrl","ResumeUrl","JSON","stringify","alert","message","handleClosePopup","current","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","filter","map","htmlFor","replace","trim","onChange","ref","onClick","_c","$RefreshReg$"],"sources":["/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx"],"sourcesContent":["// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   // Initial state for form data, including a placeholder for the resume file\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null, // Placeholder for the resume file\n//   };\n\n//   // State hooks for form data, validation errors, and submission status\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Ref for the resume input to reset it upon submission\n\n//   // Handles form input changes and updates state accordingly\n//   const handleInputChange = (e) => {\n//     const { name, value, files } = e.target;\n//     // Reset validation errors for the current input\n//     setValidationErrors((prevErrors) => ({ ...prevErrors, [name]: null }));\n\n//     if (name === \"Resume\" && files) {\n//       setFormData((prevFormData) => ({ ...prevFormData, Resume: files[0] }));\n//     } else {\n//       setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\n//     }\n//   };\n\n//   // Upload resume to S3 and return the file URL\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) throw new Error(\"Failed to upload resume\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Submit form details including resume URL to DynamoDB\n//   const submitFormDetails = async (formData) => {\n//     const submitUrl =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to submit form details\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Submission Error:\", error);\n//       alert(\"Submission failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (formData.Resume) {\n//       const uploadResult = await uploadResume(formData.Resume);\n//       if (uploadResult && uploadResult.url) {\n//         // Assume uploadResult contains the URL of the uploaded file\n//         const formSubmissionResponse = await submitFormDetails({\n//           ...formData,\n//           ResumeUrl: uploadResult.url,\n//         });\n//         if (formSubmissionResponse) {\n//           console.log(\"Form submitted successfully\");\n//           setShowPopup(true);\n//         }\n//       }\n//     } else {\n//       console.log(\"Please select a resume to upload.\");\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//   };\n\n//   // // Handle form submission with validation and data processing\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   if (validateForm()) {\n//   //     console.log(\"Form Data:\", formData);\n//   //     // Implement the upload logic here\n//   //     setShowPopup(true); // Show success message on successful validation/submission\n//   //   } else {\n//   //     console.log(\"Validation errors:\", validationErrors);\n//   //   }\n//   // };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {/* Dynamically generate input fields based on formData */}\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                     htmlFor={key}\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef} // Assign the ref to the file input\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors.Resume && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Resume}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//     // <div>\n//     //   <form onSubmit={handleSubmit}>\n//     //     {Object.keys(initialFormData).map((key) => (\n//     //       <div key={key} className=\"mb-4\">\n//     //         <label htmlFor={key}>\n//     //           {key.replace(/([A-Z])/g, \" $1\").trim()}:\n//     //         </label>\n//     //         {key === \"Resume\" ? (\n//     //           <input\n//     //             type=\"file\"\n//     //             name=\"Resume\"\n//     //             onChange={handleInputChange}\n//     //             ref={resumeInputRef}\n//     //             className={validationErrors[key] ? \"border-red-500\" : \"\"}\n//     //             required\n//     //           />\n//     //         ) : (\n//     //           <input\n//     //             type=\"text\"\n//     //             name={key}\n//     //             value={formData[key]}\n//     //             onChange={handleInputChange}\n//     //             className={validationErrors[key] ? \"border-red-500\" : \"\"}\n//     //             required\n//     //           />\n//     //         )}\n//     //         {validationErrors[key] && (\n//     //           <div className=\"text-red-500\">{validationErrors[key]}</div>\n//     //         )}\n//     //       </div>\n//     //     ))}\n//     //     <button\n//     //       type=\"submit\"\n//     //       className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//     //     >\n//     //       Submit\n//     //     </button>\n//     //   </form>\n//     //   {showPopup && (\n//     //     <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//     //       <div className=\"bg-white p-5 rounded-lg shadow-lg text-center\">\n//     //         <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//     //         <p>Your form has been submitted successfully.</p>\n//     //         <pre>{JSON.stringify(formData, null, 2)}</pre>\n//     //         <button\n//     //           onClick={() => setShowPopup(false)}\n//     //           className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\"\n//     //         >\n//     //           Close\n//     //         </button>\n//     //       </div>\n//     //     </div>\n//     //   )}\n//     // </div>\n//   );\n// }\n\n// export default SuccessPage;\n\nimport React, { useState, useRef } from \"react\";\n\nfunction SuccessPage() {\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormattingNeeded: \"\",\n    FormattedBy: \"\",\n    Resume: null, // Placeholder for the resume file\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const resumeInputRef = useRef(null);\n\n  const isValidEmail = (email) => {\n    return /\\S+@\\S+\\.\\S+/.test(email);\n  };\n\n  const handleInputChange = (e) => {\n    const { id, value, files } = e.target;\n    if (id === \"Resume\" && files) {\n      const file = files[0];\n      if (file) {\n        const allowedTypes = [\n          \"application/pdf\",\n          \"application/msword\",\n          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        ];\n        if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n          setValidationErrors({\n            ...validationErrors,\n            Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n          });\n        } else {\n          setFormData({\n            ...formData,\n            Resume: file,\n          });\n          let newErrors = { ...validationErrors };\n          delete newErrors.Resume;\n          setValidationErrors(newErrors);\n        }\n      }\n    } else {\n      setFormData({\n        ...formData,\n        [id]: value,\n      });\n      let newErrors = { ...validationErrors };\n      delete newErrors[id];\n      setValidationErrors(newErrors);\n    }\n  };\n\n  const validateForm = () => {\n    let isValid = true;\n    const newErrors = {};\n    Object.keys(formData).forEach((key) => {\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n        isValid = false;\n      }\n    });\n    if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n      newErrors.EmailId = \"Invalid email format.\";\n      isValid = false;\n    }\n\n    if (!formData.Resume) {\n      newErrors.Resume = \"Please upload a resume.\";\n      isValid = false;\n    }\n\n    setValidationErrors(newErrors);\n    return isValid;\n  };\n\n  // const uploadResume = async (file) => {\n  //   const filename = encodeURIComponent(file.name);\n  //   const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n  //   const fileData = new FormData();\n  //   fileData.append(\"file\", file);\n\n  //   try {\n  //     const response = await fetch(uploadUrl, {\n  //       method: \"POST\",\n  //       body: fileData,\n  //     });\n  //     const dat = await response.json();\n  //     console.log(\"Server response:\", dat); // Add this line\n  //     if (!response.ok) {\n  //       throw new Error(\"Failed to upload resume\");\n  //     }\n  //     const data = await response.json();\n  //     if (!data.url) {\n  //       console.log(\"Server response:\", data); // Log the actual response for debugging\n  //       throw new Error(\"Upload did not return a URL.\");\n  //     }\n  //     return data;\n  //   } catch (error) {\n  //     console.error(\"Upload Error:\", error);\n  //     throw error; // Rethrow the error to be caught in handleSubmit\n  //   }\n  // };\n\n  //2nd method\n  // const uploadResume = async (file) => {\n  //   const filename = encodeURIComponent(file.name);\n  //   const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n  //   const fileData = new FormData();\n  //   fileData.append(\"file\", file);\n\n  //   try {\n  //     const response = await fetch(uploadUrl, {\n  //       method: \"POST\",\n  //       body: fileData,\n  //     });\n\n  //     // Read the response body once and store it\n  //     const data = await response.json();\n\n  //     // Log the server response\n  //     console.log(\"Server response:\", data);\n\n  //     // Check if the response was not OK and throw an error before accessing the data\n  //     if (!response.ok) {\n  //       throw new Error(\"Failed to upload resume\");\n  //     }\n\n  //     // Assuming your server response includes a property `url` with the file URL\n  //     if (data.url) {\n  //       return data; // Return the entire response or just the URL as needed\n  //     } else {\n  //       throw new Error(\"Upload did not return a URL.\");\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Upload Error:\", error);\n  //     throw error; // Rethrow the error to be caught in handleSubmit\n  //   }\n  // };\n\n  //3`  method\n\n  // const uploadResume = async (file) => {\n  //   const filename = encodeURIComponent(file.name);\n  //   const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n  //   const fileData = new FormData();\n  //   fileData.append(\"file\", file);\n\n  //   try {\n  //     const response = await fetch(uploadUrl, {\n  //       method: \"POST\",\n  //       body: fileData,\n  //     });\n  //     const data = await response.json();\n  //     console.log(\"Server response:\", data); // Verify the structure\n\n  //     if (!response.ok) {\n  //       throw new Error(`Failed to upload resume: ${response.statusText}`);\n  //     }\n\n  //     // Adjust this line based on the actual response structure\n  //     if (!data.url) {\n  //       throw new Error(\"Upload did not return a URL.\");\n  //     }\n  //     return data; // or return data.url if you just need the URL\n  //   } catch (error) {\n  //     console.error(\"Upload Error:\", error);\n  //     throw error; // Rethrow the error to be caught in handleSubmit\n  //   }\n  // };\n\n  //4th method\n\n  // const uploadResume = async (file) => {\n  //   const filename = encodeURIComponent(file.name);\n  //   const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n  //   const fileData = new FormData();\n  //   fileData.append(\"file\", file);\n\n  //   try {\n  //     const response = await fetch(uploadUrl, {\n  //       method: \"POST\",\n  //       body: fileData,\n  //     });\n\n  //     // Ensure you only read the response JSON once\n  //     const data = await response.json();\n  //     console.log(\"Server response:\", data); // Make sure you see this log to verify the structure\n\n  //     if (!response.ok) {\n  //       throw new Error(`Failed to upload resume: ${response.statusText}`);\n  //     }\n\n  //     // Adjust according to the actual response structure.\n  //     // Example for a direct URL property:\n  //     if (data.url) {\n  //       return data.url; // Assuming the URL is directly in the 'url' property\n  //     } else {\n  //       console.log(\"Server response:\", data); // Log the actual response for debugging\n  //       throw new Error(\"Upload did not return a URL.\");\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Upload Error:\", error);\n  //     throw error; // Rethrow the error to be caught in handleSubmit\n  //   }\n  // };\n\n  //5 - working\n\n  // const uploadResume = async (file) => {\n  //   const filename = encodeURIComponent(file.name);\n  //   const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n  //   const fileData = new FormData();\n  //   fileData.append(\"file\", file);\n\n  //   try {\n  //     const response = await fetch(uploadUrl, {\n  //       method: \"POST\",\n  //       body: fileData,\n  //     });\n\n  //     // Parse the JSON response only once\n  //     const data = await response.json();\n  //     console.log(\"Server response:\", data);\n\n  //     if (!response.ok) {\n  //       throw new Error(`Failed to upload resume: ${response.statusText}`);\n  //     }\n\n  //     // Check for the URL in the response\n  //     if (data.url) {\n  //       return data.url; // Return the URL for the uploaded file\n  //     } else {\n  //       throw new Error(\"Upload did not return a URL.\");\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Upload Error:\", error);\n  //     throw error; // Ensure this error is caught in the handleSubmit function\n  //   }\n  // };\n\n  //6\n  const uploadResume = async (file) => {\n    const filename = encodeURIComponent(file.name);\n    const uploadUrl =\n      \"https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}\"; // Your API endpoint\n    const fileData = new FormData();\n    fileData.append(\"file\", file);\n\n    try {\n      const response = await fetch(uploadUrl, {\n        method: \"POST\",\n        body: fileData,\n      });\n      const data = await response.json();\n      if (!response.ok || !data.url) {\n        throw new Error(\"Failed to upload resume\");\n      }\n      return data.url; // Return the URL of the uploaded file\n    } catch (error) {\n      console.error(\"Upload Error:\", error);\n      throw error;\n    }\n  };\n\n  //1st method\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   console.log(\"Submitting form...\");\n\n  //   if (!validateForm()) {\n  //     console.log(\"Form validation failed\", validationErrors);\n  //     return;\n  //   }\n\n  //   console.log(\"Form validated successfully\");\n\n  //   if (formData.Resume) {\n  //     try {\n  //       console.log(\"Uploading resume...\");\n  //       const uploadResult = await uploadResume(formData.Resume);\n  //       console.log(\"Resume uploaded successfully:\", uploadResult.url);\n  //       setShowPopup(true);\n  //       console.log(\n  //         \"Form Data:\",\n  //         JSON.stringify({ ...formData, ResumeUrl: uploadResult.url }, null, 2)\n  //       );\n  //     } catch (error) {\n  //       alert(error.message);\n  //     }\n  //   } else {\n  //     console.log(\"No resume selected for upload.\");\n  //   }\n  // };\n\n  //2nd method\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   console.log(\"Submitting form...\");\n\n  //   if (!validateForm()) {\n  //     console.log(\"Form validation failed\", validationErrors);\n  //     return;\n  //   }\n\n  //   if (formData.Resume) {\n  //     try {\n  //       console.log(\"Uploading resume...\");\n  //       const fileUrl = await uploadResume(formData.Resume); // Expect the URL as return value\n  //       console.log(\"Resume uploaded successfully:\", fileUrl);\n\n  //       // Update formData with ResumeUrl for server submission if needed\n  //       const updatedFormData = { ...formData, ResumeUrl: fileUrl };\n\n  //       // Optionally submit the updated form data to another server endpoint\n  //       // const submissionResult = await submitFormDetails(updatedFormData);\n\n  //       console.log(\"Form Data:\", JSON.stringify(updatedFormData, null, 2));\n  //       setShowPopup(true); // Show the popup only if everything was successful\n  //     } catch (error) {\n  //       alert(\"Failed to submit form: \" + error.message);\n  //     }\n  //   } else {\n  //     console.log(\"Please select a resume to upload.\");\n  //   }\n  // };\n\n  // const handleSubmit = (event) => {\n  //   event.preventDefault();\n  //   if (validateForm()) {\n  //     console.log(\"Form Data Submitted:\", formData);\n  //     setShowPopup(true);\n  //   }\n  // };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      console.log(\"Form validation failed\", validationErrors);\n      return; // Stop form submission\n    }\n\n    if (formData.Resume) {\n      try {\n        const fileUrl = await uploadResume(formData.Resume);\n        console.log(\"Resume uploaded to:\", fileUrl);\n        // Optional: Update formData with the URL of the uploaded file\n        formData.ResumeUrl = fileUrl;\n\n        console.log(\"Form Data:\", JSON.stringify(formData, null, 2));\n        setShowPopup(true); // Show success popup\n      } catch (error) {\n        alert(\"Failed to upload resume: \" + error.message);\n      }\n    } else {\n      alert(\"Please select a resume to upload.\");\n    }\n  };\n\n  const handleClosePopup = () => {\n    setShowPopup(false);\n    setFormData(initialFormData);\n    setValidationErrors({});\n    if (resumeInputRef.current) {\n      resumeInputRef.current.value = \"\";\n    }\n  };\n\n  return (\n    <div>\n      {/* The form component with Tailwind CSS */}\n      <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n        <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n          Employee Information Form\n        </h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n            {/* Input fields generated based on formData */}\n            {Object.keys(initialFormData)\n              .filter((key) => key !== \"Resume\")\n              .map((key) => (\n                <div key={key} className=\"mb-4\">\n                  <label\n                    htmlFor={key}\n                    className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n                  >\n                    {key.replace(/([A-Z])/g, \" $1\").trim()}\n                  </label>\n                  <input\n                    type=\"text\"\n                    id={key}\n                    name={key}\n                    value={formData[key]}\n                    onChange={handleInputChange}\n                    className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n                  />\n                  {validationErrors[key] && (\n                    <p className=\"text-red-500 text-xs italic\">\n                      {validationErrors[key]}\n                    </p>\n                  )}\n                </div>\n              ))}\n            <div className=\"mb-4\">\n              <label\n                htmlFor=\"Resume\"\n                className=\"block text-sm font-medium text-white\"\n              >\n                Resume\n              </label>\n              <input\n                id=\"Resume\"\n                name=\"Resume\"\n                type=\"file\"\n                onChange={handleInputChange}\n                ref={resumeInputRef}\n                className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n              />\n              {validationErrors[\"Resume\"] && (\n                <p className=\"text-red-500 text-xs italic\">\n                  {validationErrors[\"Resume\"]}\n                </p>\n              )}\n            </div>\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </section>\n      {showPopup && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n          <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n            <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n            <p>Your form has been submitted successfully.</p>\n            <button\n              onClick={handleClosePopup}\n              className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SuccessPage;\n"],"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,EAAE;MACpBsB,SAAS,CAACtB,MAAM,GAAG,yBAAyB;MAC5CwB,OAAO,GAAG,KAAK;IACjB;IAEApB,mBAAmB,CAACkB,SAAS,CAAC;IAC9B,OAAOE,OAAO;EAChB,CAAC;;EAED;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMK,YAAY,GAAG,MAAOZ,IAAI,IAAK;IACnC,MAAMa,QAAQ,GAAGC,kBAAkB,CAACd,IAAI,CAACe,IAAI,CAAC;IAC9C,MAAMC,SAAS,GACb,gFAAgF,CAAC,CAAC;IACpF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEnB,IAAI,CAAC;IAE7B,IAAI;MACF,MAAMoB,QAAQ,GAAG,MAAMC,KAAK,CAACL,SAAS,EAAE;QACtCM,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}