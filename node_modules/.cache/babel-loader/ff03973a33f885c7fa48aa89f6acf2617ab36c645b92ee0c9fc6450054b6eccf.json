{"ast":null,"code":"var _jsxFileName = \"/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useState, useRef } from \"react\";\n// // import axios from \"axios\";\n\n// // const SuccessPage = () => {\n// //   const initialFormData = {\n// //     FullName: \"\",\n// //     RequiredID: \"\",\n// //     RequiredTitle: \"\",\n// //     Role: \"\",\n// //     RequiredCreationDate: \"\",\n// //     VendorID: \"\",\n// //     ImmigrationStatus: \"\",\n// //     ContractType: \"\",\n// //     SubmissionDate: \"\",\n// //     RequiredSubmissionEndDate: \"\",\n// //     CandidateCurrentLocation: \"\",\n// //     ContactNumber: \"\",\n// //     RecruiterName: \"\",\n// //     State: \"\",\n// //     SubmissionStatus: \"\",\n// //     VendorRate: \"\",\n// //     CandidatePayRate: \"\",\n// //     BillRateMargin: \"\",\n// //     ResumeSource: \"\",\n// //     EmailId: \"\",\n// //     LinkedInID: \"\",\n// //     EmployerInformation: \"\",\n// //     ProfessionalReferences: \"\",\n// //     DOB: \"\",\n// //     RequiredSkills: \"\",\n// //     ResumeFormatingNeeded: \"\",\n// //     FormatedBy: \"\",\n// //     // Resume: null,\n// //   };\n\n// //   const [formData, setFormData] = useState(initialFormData);\n// //   const [validationErrors, setValidationErrors] = useState({});\n// //   const [showPopup, setShowPopup] = useState(false);\n// //   const resumeInputRef = useRef(null); // Create a ref for the resume input\n\n// //   const isValidEmail = (email) => {\n// //     return /\\S+@\\S+\\.\\S+/.test(email);\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { id, value, files } = e.target;\n// //     if (id === \"Resume\" && files) {\n// //       const file = files[0];\n// //       if (file) {\n// //         const allowedTypes = [\n// //           \"application/pdf\",\n// //           \"application/msword\",\n// //           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n// //         ];\n// //         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n// //           setValidationErrors({\n// //             ...validationErrors,\n// //             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n// //           });\n// //         } else {\n// //           setFormData({\n// //             ...formData,\n// //             Resume: file,\n// //           });\n// //           let newErrors = { ...validationErrors };\n// //           delete newErrors.Resume;\n// //           setValidationErrors(newErrors);\n// //         }\n// //       }\n// //     } else {\n// //       setFormData({\n// //         ...formData,\n// //         [id]: value,\n// //       });\n// //       let newErrors = { ...validationErrors };\n// //       delete newErrors[id];\n// //       setValidationErrors(newErrors);\n// //     }\n// //   };\n\n// //   const validateForm = () => {\n// //     let isValid = true;\n// //     const newErrors = {};\n// //     Object.keys(formData).forEach((key) => {\n// //       if (!formData[key] && key !== \"Resume\") {\n// //         newErrors[key] = \"This field is required.\";\n// //         isValid = false;\n// //       }\n// //     });\n// //     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n// //       newErrors.EmailId = \"Invalid email format.\";\n// //       isValid = false;\n// //     }\n\n// //     if (!formData.Resume) {\n// //       newErrors.Resume = \"Please upload a resume.\";\n// //       isValid = false;\n// //     }\n\n// //     setValidationErrors(newErrors);\n// //     return isValid;\n// //   };\n\n// //   const handleSubmit = async (event) => {\n// //     event.preventDefault();\n// //     if (validateForm()) {\n// //       console.log(\"Form Data Submitted:\", formData);\n// //       setShowPopup(true);\n// //     }\n// //     event.preventDefault();\n// //     if (validateForm()) {\n// //       try {\n// //         // 1. Upload the resume to S3\n// //         const s3UploadResponse = await uploadResumeToS3(formData.Resume);\n\n// //         // 2. If the S3 upload is successful, proceed to submit the form data\n// //         if (s3UploadResponse.success) {\n// //           console.log(\"Form Data Submitted:\", formData);\n// //           setShowPopup(true);\n// //         } else {\n// //           // Handle S3 upload error\n// //           console.error(\"S3 Upload Error:\", s3UploadResponse.error);\n// //         }\n// //       } catch (error) {\n// //         // Handle any other errors that may occur during the process\n// //         console.error(\"Submission Error:\", error);\n// //       }\n// //     }\n// //   };\n\n// //   // Function to upload resume to S3\n// //   const uploadResumeToS3 = async (resumeFile) => {\n// //     try {\n// //       // Create a FormData object to send the file\n// //       const formData = new FormData();\n// //       formData.append(\"resume\", resumeFile);\n\n// //       // Make a POST request to your API endpoint for S3 upload\n// //       const response = await fetch(\n// //         \"https://8t9nfrdxf9.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}\",\n// //         {\n// //           method: \"POST\",\n// //           body: formData,\n// //         }\n// //       );\n\n// //       if (response.ok) {\n// //         // S3 upload successful\n// //         return { success: true };\n// //       } else {\n// //         // S3 upload failed, return the error message\n// //         const errorData = await response.json();\n// //         return { success: false, error: errorData.message };\n// //       }\n// //     } catch (error) {\n// //       // Handle any errors that occur during the upload process\n// //       return { success: false, error: error.message };\n// //     }\n// //   };\n\n// //   const handleClosePopup = () => {\n// //     setShowPopup(false);\n// //     setFormData(initialFormData);\n// //     setValidationErrors({});\n// //     if (resumeInputRef.current) {\n// //       resumeInputRef.current.value = \"\"; // Clear the file input\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n// //         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n// //           Employee Information Form\n// //         </h1>\n// //         <form onSubmit={handleSubmit}>\n// //           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n// //             {/* Dynamically generate input fields based on formData */}\n// //             {Object.keys(initialFormData)\n// //               .filter((key) => key !== \"Resume\")\n// //               .map((key) => (\n// //                 <div key={key} className=\"mb-4\">\n// //                   <label\n// //                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n// //                     htmlFor={key}\n// //                   >\n// //                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n// //                   </label>\n// //                   <input\n// //                     type=\"text\"\n// //                     id={key}\n// //                     value={formData[key]}\n// //                     onChange={handleInputChange}\n// //                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n// //                   />\n// //                   {validationErrors[key] && (\n// //                     <p className=\"text-red-500 text-xs italic\">\n// //                       {validationErrors[key]}\n// //                     </p>\n// //                   )}\n// //                 </div>\n// //               ))}\n// //             <div className=\"mb-4\">\n// //               <label className=\"block text-sm font-medium text-white\">\n// //                 Resume\n// //               </label>\n// //               <input\n// //                 id=\"Resume\"\n// //                 name=\"Resume\"\n// //                 type=\"file\"\n// //                 onChange={handleInputChange}\n// //                 ref={resumeInputRef} // Assign the ref to the file input\n// //                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n// //               />\n// //               {validationErrors.Resume && (\n// //                 <p className=\"text-red-500 text-xs italic\">\n// //                   {validationErrors.Resume}\n// //                 </p>\n// //               )}\n// //             </div>\n// //             <button\n// //               type=\"submit\"\n// //               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n// //             >\n// //               Submit\n// //             </button>\n// //           </div>\n// //         </form>\n// //       </section>\n// //       {showPopup && (\n// //         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n// //           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n// //             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n// //             <p>Your form has been submitted successfully.</p>\n// //             <button\n// //               onClick={handleClosePopup}\n// //               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n// //             >\n// //               Close\n// //             </button>\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default SuccessPage;\n\n// //2\n\n// import React, { useState, useRef } from \"react\";\n// import axios from \"axios\"; // Ensure axios is installed via npm or yarn\n\n// const SuccessPage = () => {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormatingNeeded: \"\",\n//     FormatedBy: \"\",\n//     // Resume is initially null; it will be set to the file object when a file is selected\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => /\\S+@\\S+\\.\\S+/.test(email);\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors((prevErrors) => ({\n//             ...prevErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           }));\n//         } else {\n//           setFormData((prevFormData) => ({\n//             ...prevFormData,\n//             Resume: file,\n//           }));\n//           setValidationErrors((prevErrors) => {\n//             const newErrors = { ...prevErrors };\n//             delete newErrors.Resume;\n//             return newErrors;\n//           });\n//         }\n//       }\n//     } else {\n//       setFormData((prevFormData) => ({\n//         ...prevFormData,\n//         [id]: value,\n//       }));\n//       setValidationErrors((prevErrors) => {\n//         const newErrors = { ...prevErrors };\n//         delete newErrors[id];\n//         return newErrors;\n//       });\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   // const uploadResumeToS3 = async (file) => {\n//   //   const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`; // Replace with your actual upload URL\n//   //   try {\n//   //     const formData = new FormData();\n//   //     formData.append(\"file\", file); // Ensure your API expects the file under this key\n//   //     const response = await axios.post(url, formData, {\n//   //       headers: {\n//   //         \"Content-Type\": \"multipart/form-data\",\n//   //       },\n//   //     });\n//   //     return { success: true, data: response.data };\n//   //   } catch (error) {\n//   //     return { success: false, error: error.message };\n//   //   }\n//   // };\n\n//   const uploadResumeToS3 = async (file) => {\n//     const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`;\n//     try {\n//       const formData = new FormData();\n//       formData.append(\"file\", file);\n//       await axios.post(url, formData, {\n//         // Notice the removal of `response =`\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//         },\n//       });\n//       return { success: true };\n//     } catch (error) {\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   // const submitFormData = async (data) => {\n//   //   try {\n//   //     const url =\n//   //       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//   //     // Assuming your server expects JSON data:\n//   //     const response = await axios.post(url, JSON.stringify(data), {\n//   //       headers: {\n//   //         \"Content-Type\": \"application/json\",\n//   //         // Add any other required headers here, like authentication tokens\n//   //       },\n//   //     });\n//   //     return { success: true };\n//   //   } catch (error) {\n//   //     console.error(\"Error submitting form data:\", error);\n//   //     return { success: false, error: error.message };\n//   //   }\n//   // };\n\n//   const submitFormData = async (data) => {\n//     try {\n//       const url =\n//         \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n\n//       // Ensure data is correctly structured for your API's expectations\n//       const payload = JSON.stringify(data);\n\n//       const response = await axios.post(url, payload, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       console.log(\"Submission response:\", response.data); // Log the response data for debugging\n//       return { success: true, data: response.data };\n//     } catch (error) {\n//       console.error(\n//         \"Error submitting form data:\",\n//         error.response ? error.response.data : error.message\n//       );\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       // Attempt to upload the resume before submitting form data\n//       if (formData.Resume) {\n//         const uploadResponse = await uploadResumeToS3(formData.Resume);\n//         if (uploadResponse.success) {\n//           console.log(\n//             \"Resume uploaded successfully. Proceeding with form submission.\"\n//           );\n//           // Prepare form data for submission (excluding the file itself)\n//           const dataToSubmit = { ...formData, Resume: undefined };\n//           const formSubmitResponse = await submitFormData(dataToSubmit);\n//           if (formSubmitResponse.success) {\n//             console.log(\"Form data submitted successfully.\");\n//             setShowPopup(true); // Show success popup\n//           } else {\n//             // Handle form submission error\n//             console.error(\n//               \"Failed to submit form data:\",\n//               formSubmitResponse.error\n//             );\n//           }\n//         } else {\n//           console.error(\"Failed to upload resume:\", uploadResponse.error);\n//         }\n//       }\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData); // Reset form\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\"; // Clear the file input\n//     }\n//   };\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                     htmlFor={key}\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors.Resume && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Resume}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SuccessPage;\n\n//3\n// import React, { useState } from \"react\";\n\n// function UploadForm() {\n//   const [formData, setFormData] = useState({\n//     FullName: \"\",\n//     ReqId: \"\",\n//   });\n//   const [resume, setResume] = useState(null);\n\n//   // Handles changes in text inputs\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handles resume file selection\n//   const handleResumeChange = (e) => {\n//     setResume(e.target.files[0]);\n//   };\n\n//   // Uploads the resume file\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to upload resume\");\n//       }\n//       return await response.json(); // Assuming the response contains the URL of the uploaded file\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \", error.message);\n//     }\n//   };\n\n//   // Handles the form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!resume) {\n//       alert(\"Please select a resume to upload.\");\n//       return;\n//     }\n\n//     // Upload the resume first\n//     const uploadResult = await uploadResume(resume);\n//     if (uploadResult && uploadResult.success) {\n//       alert(\"Resume successfully uploaded.\");\n//       // Here, you can also handle additional actions post-upload,\n//       // such as updating the database with the form data and the URL of the uploaded file.\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label>Full Name:</label>\n//         <input\n//           type=\"text\"\n//           name=\"FullName\"\n//           value={formData.FullName}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Req ID:</label>\n//         <input\n//           type=\"text\"\n//           name=\"ReqId\"\n//           value={formData.ReqId}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Resume:</label>\n//         <input\n//           type=\"file\"\n//           name=\"resume\"\n//           onChange={handleResumeChange}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Submit</button>\n//     </form>\n//   );\n// }\n\n// export default UploadForm;\n\n//4\n\n// import React, { useState } from \"react\";\n\n// function UploadForm() {\n//   const [formData, setFormData] = useState({\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//   });\n//   const [resume, setResume] = useState(null);\n\n//   // Handles changes in text inputs\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handles resume file selection\n//   const handleResumeChange = (e) => {\n//     setResume(e.target.files[0]);\n//   };\n\n//   // Upload the resume to S3\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) {\n//         throw new Error(\"Failed to upload resume\");\n//       }\n//       const uploadResult = await response.json();\n//       return uploadResult; // Assuming this includes the URL of the uploaded file\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \", error.message);\n//       return null;\n//     }\n//   };\n\n//   // Submit form details to DynamoDB\n//   const submitFormDetails = async (details, resumeUrl) => {\n//     const submitUrl =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     details.resumeUrl = resumeUrl; // Add the resume URL to form details\n\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(details),\n//       });\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit form details\");\n//       }\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Submission Error:\", error);\n//       alert(\"Submission failed: \", error.message);\n//       return null;\n//     }\n//   };\n\n//   // Handles the form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!resume) {\n//       alert(\"Please select a resume to upload.\");\n//       return;\n//     }\n\n//     // First, upload the resume\n//     const uploadResult = await uploadResume(resume);\n//     if (uploadResult && uploadResult.fileUrl) {\n//       // Then, submit the form details along with the resume URL\n//       const submitResult = await submitFormDetails(\n//         formData,\n//         uploadResult.fileUrl\n//       );\n//       if (submitResult) {\n//         alert(\"Form and resume submitted successfully!\");\n//       }\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label>Full Name:</label>\n//         <input\n//           type=\"text\"\n//           name=\"FullName\"\n//           value={formData.FullName}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Req ID:</label>\n//         <input\n//           type=\"text\"\n//           name=\"ReqId\"\n//           value={formData.ReqId}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Email:</label>\n//         <input\n//           type=\"email\"\n//           name=\"EmailId\"\n//           value={formData.EmailId}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Resume:</label>\n//         <input\n//           type=\"file\"\n//           name=\"resume\"\n//           onChange={handleResumeChange}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Submit</button>\n//     </form>\n//   );\n// }\n\n// export default UploadForm;\n\n//5\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Reference for the file input\n\n//   const isValidEmail = (email) => {\n//     return /\\S+@\\S+\\.\\S+/.test(email);\n//   };\n\n//   // // Update form state on user input\n//   // const handleInputChange = (e) => {\n//   //   const { name, value, files } = e.target;\n//   //   if (name === \"Resume\" && files) {\n//   //     setFormData({ ...formData, Resume: files[0] });\n//   //   } else {\n//   //     setFormData({ ...formData, [name]: value });\n//   //   }\n//   // };\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors({\n//             ...validationErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           });\n//         } else {\n//           setFormData({\n//             ...formData,\n//             Resume: file,\n//           });\n//           let newErrors = { ...validationErrors };\n//           delete newErrors.Resume;\n//           setValidationErrors(newErrors);\n//         }\n//       }\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [id]: value,\n//       });\n//       let newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   // Upload resume to S3 and return the file URL\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) throw new Error(\"Failed to upload resume\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // // Submit form details including resume URL to DynamoDB\n//   // const submitFormDetails = async (formData) => {\n//   //   const submitUrl =\n//   //     \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//   //   try {\n//   //     const response = await fetch(submitUrl, {\n//   //       method: \"POST\",\n//   //       headers: { \"Content-Type\": \"application/json\" },\n//   //       body: JSON.stringify(formData),\n//   //     });\n//   //     if (!response.ok) throw new Error(\"Failed to submit form details\");\n//   //     return await response.json();\n//   //   } catch (error) {\n//   //     console.error(\"Submission Error:\", error);\n//   //     alert(\"Submission failed: \" + error.message);\n//   //     return null;\n//   //   }\n//   // };\n\n//   // Handle form submission\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   if (formData.Resume) {\n//   //     const uploadResult = await uploadResume(formData.Resume);\n//   //     if (uploadResult && uploadResult.url) {\n//   //       // Assume uploadResult contains the URL of the uploaded file\n//   //       const formSubmissionResponse = await submitFormDetails({\n//   //         ...formData,\n//   //         ResumeUrl: uploadResult.url,\n//   //       });\n//   //       if (formSubmissionResponse) {\n//   //         console.log(\"Form submitted successfully\");\n//   //         setShowPopup(true);\n//   //       }\n//   //     }\n//   //   } else {\n//   //     console.log(\"Please select a resume to upload.\");\n//   //   }\n//   // };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       console.log(\"Form Data Submitted:\", formData);\n//       setShowPopup(true);\n//     }\n//     event.preventDefault();\n//     if (validateForm()) {\n//       try {\n//         // 1. Upload the resume to S3\n//         const s3UploadResponse = await uploadResume(formData.Resume);\n\n//         // 2. If the S3 upload is successful, proceed to submit the form data\n//         if (s3UploadResponse.success) {\n//           console.log(\"Form Data Submitted:\", formData);\n//           setShowPopup(true);\n//         } else {\n//           // Handle S3 upload error\n//           console.error(\"S3 Upload Error:\", s3UploadResponse.error);\n//         }\n//       } catch (error) {\n//         // Handle any other errors that may occur during the process\n//         console.error(\"Submission Error:\", error);\n//       }\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\"; // Clear the file input\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit} className=\"mt-6\">\n//           <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n//             {Object.keys(initialFormData).map((key) =>\n//               key !== \"Resume\" ? (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor={key}\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     name={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                 </div>\n//               ) : (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor=\"Resume\"\n//                     className=\"block text-sm font-medium text-white\"\n//                   >\n//                     Resume\n//                   </label>\n//                   <input\n//                     id=\"Resume\"\n//                     name=\"Resume\"\n//                     type=\"file\"\n//                     onChange={handleInputChange}\n//                     ref={resumeInputRef}\n//                     className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//                   />\n//                 </div>\n//               )\n//             )}\n//             <button\n//               type=\"submit\"\n//               className=\"col-span-1 sm:col-span-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n//6 - Working\n\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Reference for the file input\n\n//   // Update form state on user input\n//   const handleInputChange = (e) => {\n//     const { name, value, files } = e.target;\n//     if (name === \"Resume\" && files) {\n//       setFormData({ ...formData, Resume: files[0] });\n//     } else {\n//       setFormData({ ...formData, [name]: value });\n//     }\n//   };\n\n//   // Upload resume to S3 and return the file URL\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) throw new Error(\"Failed to upload resume\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Submit form details including resume URL to DynamoDB\n//   const submitFormDetails = async (formData) => {\n//     const submitUrl =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to submit form details\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Submission Error:\", error);\n//       alert(\"Submission failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (formData.Resume) {\n//       const uploadResult = await uploadResume(formData.Resume);\n//       if (uploadResult && uploadResult.url) {\n//         // Assume uploadResult contains the URL of the uploaded file\n//         const formSubmissionResponse = await submitFormDetails({\n//           ...formData,\n//           ResumeUrl: uploadResult.url,\n//         });\n//         if (formSubmissionResponse) {\n//           console.log(\"Form submitted successfully\");\n//           setShowPopup(true);\n//         }\n//       }\n//     } else {\n//       console.log(\"Please select a resume to upload.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         {/* Iterate over the formData keys to generate input fields */}\n//         {Object.keys(initialFormData).map((key) => {\n//           if (key === \"Resume\") {\n//             return (\n//               <div key={key}>\n//                 <label>{key}:</label>\n//                 <input\n//                   type=\"file\"\n//                   name={key}\n//                   onChange={handleInputChange}\n//                   ref={resumeInputRef}\n//                   required\n//                 />\n//               </div>\n//             );\n//           } else {\n//             return (\n//               <div key={key}>\n//                 <label>{key}:</label>\n//                 <input\n//                   type=\"text\"\n//                   name={key}\n//                   value={formData[key]}\n//                   onChange={handleInputChange}\n//                   required\n//                 />\n//               </div>\n//             );\n//           }\n//         })}\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//       {showPopup && (\n//         <div className=\"popup\">\n//           <p>Form submitted successfully!</p>\n//           <button onClick={() => setShowPopup(false)}>Close</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n///7 -- Testing\n\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SuccessPage() {\n  _s();\n  // Initial state for form data, including a placeholder for the resume file\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormattingNeeded: \"\",\n    FormattedBy: \"\",\n    Resume: null // Placeholder for the resume file\n  };\n\n  // State hooks for form data, validation errors, and submission status\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const resumeInputRef = useRef(null); // Ref for the resume input to reset it upon submission\n\n  // Handles form input changes and updates state accordingly\n  const handleInputChange = e => {\n    const {\n      name,\n      value,\n      files\n    } = e.target;\n    // Reset validation errors for the current input\n    setValidationErrors(prevErrors => ({\n      ...prevErrors,\n      [name]: null\n    }));\n    if (name === \"Resume\" && files) {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        Resume: files[0]\n      }));\n    } else {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        [name]: value\n      }));\n    }\n  };\n\n  // Function to validate the entire form before submission\n  const validateForm = () => {\n    const newErrors = {};\n    Object.keys(formData).forEach(key => {\n      // Check for empty fields, excluding the Resume for separate validation\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n      }\n    });\n\n    // Validate the resume file, if selected\n    if (formData.Resume) {\n      const {\n        Resume\n      } = formData;\n      const allowedTypes = [\"application/pdf\", \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"];\n      const maxSize = 10485760; // 10MB\n\n      if (!allowedTypes.includes(Resume.type) || Resume.size > maxSize) {\n        newErrors.Resume = \"Only PDF or DOC files under 10MB are allowed.\";\n      }\n    } else {\n      // Ensure a file is selected\n      newErrors.Resume = \"Please upload a resume.\";\n    }\n    setValidationErrors(newErrors);\n    // Form is valid if no errors were added\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Handle form submission with validation and data processing\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (validateForm()) {\n      console.log(\"Form Data:\", formData);\n      // Implement the upload logic here\n      setShowPopup(true); // Show success message on successful validation/submission\n    } else {\n      console.log(\"Validation errors:\", validationErrors);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [Object.keys(initialFormData).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: key,\n          children: [key.replace(/([A-Z])/g, \" $1\").trim(), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1343,\n          columnNumber: 13\n        }, this), key === \"Resume\" ? /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"key\",\n          onChange: handleInputChange,\n          ref: resumeInputRef,\n          className: validationErrors[key] ? \"border-red-500\" : \"\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1347,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: key,\n          value: formData[key],\n          onChange: handleInputChange,\n          className: validationErrors[key] ? \"border-red-500\" : \"\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1356,\n          columnNumber: 15\n        }, this), validationErrors[key] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-red-500\",\n          children: validationErrors[key]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1366,\n          columnNumber: 15\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1342,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1370,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1340,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-5 rounded-lg shadow-lg text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg mb-4\",\n          children: \"Submission Successful\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1380,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your form has been submitted successfully.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1381,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(formData, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1382,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowPopup(false),\n          className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1383,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1379,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1378,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1339,\n    columnNumber: 5\n  }, this);\n}\n_s(SuccessPage, \"YWwwmHvGuABOeL2WUGvea5cf81M=\");\n_c = SuccessPage;\nexport default SuccessPage;\nvar _c;\n$RefreshReg$(_c, \"SuccessPage\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","SuccessPage","_s","initialFormData","FullName","RequiredID","RequiredTitle","Role","RequiredCreationDate","VendorID","ImmigrationStatus","ContractType","SubmissionDate","RequiredSubmissionEndDate","CandidateCurrentLocation","ContactNumber","RecruiterName","State","SubmissionStatus","VendorRate","CandidatePayRate","BillRateMargin","ResumeSource","EmailId","LinkedInID","EmployerInformation","ProfessionalReferences","DOB","RequiredSkills","ResumeFormattingNeeded","FormattedBy","Resume","formData","setFormData","validationErrors","setValidationErrors","showPopup","setShowPopup","resumeInputRef","handleInputChange","e","name","value","files","target","prevErrors","prevFormData","validateForm","newErrors","Object","keys","forEach","key","allowedTypes","maxSize","includes","type","size","length","handleSubmit","preventDefault","console","log","children","onSubmit","map","className","htmlFor","replace","trim","fileName","_jsxFileName","lineNumber","columnNumber","onChange","ref","required","JSON","stringify","onClick","_c","$RefreshReg$"],"sources":["/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx"],"sourcesContent":["// // import React, { useState, useRef } from \"react\";\n// // import axios from \"axios\";\n\n// // const SuccessPage = () => {\n// //   const initialFormData = {\n// //     FullName: \"\",\n// //     RequiredID: \"\",\n// //     RequiredTitle: \"\",\n// //     Role: \"\",\n// //     RequiredCreationDate: \"\",\n// //     VendorID: \"\",\n// //     ImmigrationStatus: \"\",\n// //     ContractType: \"\",\n// //     SubmissionDate: \"\",\n// //     RequiredSubmissionEndDate: \"\",\n// //     CandidateCurrentLocation: \"\",\n// //     ContactNumber: \"\",\n// //     RecruiterName: \"\",\n// //     State: \"\",\n// //     SubmissionStatus: \"\",\n// //     VendorRate: \"\",\n// //     CandidatePayRate: \"\",\n// //     BillRateMargin: \"\",\n// //     ResumeSource: \"\",\n// //     EmailId: \"\",\n// //     LinkedInID: \"\",\n// //     EmployerInformation: \"\",\n// //     ProfessionalReferences: \"\",\n// //     DOB: \"\",\n// //     RequiredSkills: \"\",\n// //     ResumeFormatingNeeded: \"\",\n// //     FormatedBy: \"\",\n// //     // Resume: null,\n// //   };\n\n// //   const [formData, setFormData] = useState(initialFormData);\n// //   const [validationErrors, setValidationErrors] = useState({});\n// //   const [showPopup, setShowPopup] = useState(false);\n// //   const resumeInputRef = useRef(null); // Create a ref for the resume input\n\n// //   const isValidEmail = (email) => {\n// //     return /\\S+@\\S+\\.\\S+/.test(email);\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { id, value, files } = e.target;\n// //     if (id === \"Resume\" && files) {\n// //       const file = files[0];\n// //       if (file) {\n// //         const allowedTypes = [\n// //           \"application/pdf\",\n// //           \"application/msword\",\n// //           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n// //         ];\n// //         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n// //           setValidationErrors({\n// //             ...validationErrors,\n// //             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n// //           });\n// //         } else {\n// //           setFormData({\n// //             ...formData,\n// //             Resume: file,\n// //           });\n// //           let newErrors = { ...validationErrors };\n// //           delete newErrors.Resume;\n// //           setValidationErrors(newErrors);\n// //         }\n// //       }\n// //     } else {\n// //       setFormData({\n// //         ...formData,\n// //         [id]: value,\n// //       });\n// //       let newErrors = { ...validationErrors };\n// //       delete newErrors[id];\n// //       setValidationErrors(newErrors);\n// //     }\n// //   };\n\n// //   const validateForm = () => {\n// //     let isValid = true;\n// //     const newErrors = {};\n// //     Object.keys(formData).forEach((key) => {\n// //       if (!formData[key] && key !== \"Resume\") {\n// //         newErrors[key] = \"This field is required.\";\n// //         isValid = false;\n// //       }\n// //     });\n// //     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n// //       newErrors.EmailId = \"Invalid email format.\";\n// //       isValid = false;\n// //     }\n\n// //     if (!formData.Resume) {\n// //       newErrors.Resume = \"Please upload a resume.\";\n// //       isValid = false;\n// //     }\n\n// //     setValidationErrors(newErrors);\n// //     return isValid;\n// //   };\n\n// //   const handleSubmit = async (event) => {\n// //     event.preventDefault();\n// //     if (validateForm()) {\n// //       console.log(\"Form Data Submitted:\", formData);\n// //       setShowPopup(true);\n// //     }\n// //     event.preventDefault();\n// //     if (validateForm()) {\n// //       try {\n// //         // 1. Upload the resume to S3\n// //         const s3UploadResponse = await uploadResumeToS3(formData.Resume);\n\n// //         // 2. If the S3 upload is successful, proceed to submit the form data\n// //         if (s3UploadResponse.success) {\n// //           console.log(\"Form Data Submitted:\", formData);\n// //           setShowPopup(true);\n// //         } else {\n// //           // Handle S3 upload error\n// //           console.error(\"S3 Upload Error:\", s3UploadResponse.error);\n// //         }\n// //       } catch (error) {\n// //         // Handle any other errors that may occur during the process\n// //         console.error(\"Submission Error:\", error);\n// //       }\n// //     }\n// //   };\n\n// //   // Function to upload resume to S3\n// //   const uploadResumeToS3 = async (resumeFile) => {\n// //     try {\n// //       // Create a FormData object to send the file\n// //       const formData = new FormData();\n// //       formData.append(\"resume\", resumeFile);\n\n// //       // Make a POST request to your API endpoint for S3 upload\n// //       const response = await fetch(\n// //         \"https://8t9nfrdxf9.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}\",\n// //         {\n// //           method: \"POST\",\n// //           body: formData,\n// //         }\n// //       );\n\n// //       if (response.ok) {\n// //         // S3 upload successful\n// //         return { success: true };\n// //       } else {\n// //         // S3 upload failed, return the error message\n// //         const errorData = await response.json();\n// //         return { success: false, error: errorData.message };\n// //       }\n// //     } catch (error) {\n// //       // Handle any errors that occur during the upload process\n// //       return { success: false, error: error.message };\n// //     }\n// //   };\n\n// //   const handleClosePopup = () => {\n// //     setShowPopup(false);\n// //     setFormData(initialFormData);\n// //     setValidationErrors({});\n// //     if (resumeInputRef.current) {\n// //       resumeInputRef.current.value = \"\"; // Clear the file input\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n// //         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n// //           Employee Information Form\n// //         </h1>\n// //         <form onSubmit={handleSubmit}>\n// //           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n// //             {/* Dynamically generate input fields based on formData */}\n// //             {Object.keys(initialFormData)\n// //               .filter((key) => key !== \"Resume\")\n// //               .map((key) => (\n// //                 <div key={key} className=\"mb-4\">\n// //                   <label\n// //                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n// //                     htmlFor={key}\n// //                   >\n// //                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n// //                   </label>\n// //                   <input\n// //                     type=\"text\"\n// //                     id={key}\n// //                     value={formData[key]}\n// //                     onChange={handleInputChange}\n// //                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n// //                   />\n// //                   {validationErrors[key] && (\n// //                     <p className=\"text-red-500 text-xs italic\">\n// //                       {validationErrors[key]}\n// //                     </p>\n// //                   )}\n// //                 </div>\n// //               ))}\n// //             <div className=\"mb-4\">\n// //               <label className=\"block text-sm font-medium text-white\">\n// //                 Resume\n// //               </label>\n// //               <input\n// //                 id=\"Resume\"\n// //                 name=\"Resume\"\n// //                 type=\"file\"\n// //                 onChange={handleInputChange}\n// //                 ref={resumeInputRef} // Assign the ref to the file input\n// //                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n// //               />\n// //               {validationErrors.Resume && (\n// //                 <p className=\"text-red-500 text-xs italic\">\n// //                   {validationErrors.Resume}\n// //                 </p>\n// //               )}\n// //             </div>\n// //             <button\n// //               type=\"submit\"\n// //               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n// //             >\n// //               Submit\n// //             </button>\n// //           </div>\n// //         </form>\n// //       </section>\n// //       {showPopup && (\n// //         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n// //           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n// //             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n// //             <p>Your form has been submitted successfully.</p>\n// //             <button\n// //               onClick={handleClosePopup}\n// //               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n// //             >\n// //               Close\n// //             </button>\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default SuccessPage;\n\n// //2\n\n// import React, { useState, useRef } from \"react\";\n// import axios from \"axios\"; // Ensure axios is installed via npm or yarn\n\n// const SuccessPage = () => {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormatingNeeded: \"\",\n//     FormatedBy: \"\",\n//     // Resume is initially null; it will be set to the file object when a file is selected\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => /\\S+@\\S+\\.\\S+/.test(email);\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors((prevErrors) => ({\n//             ...prevErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           }));\n//         } else {\n//           setFormData((prevFormData) => ({\n//             ...prevFormData,\n//             Resume: file,\n//           }));\n//           setValidationErrors((prevErrors) => {\n//             const newErrors = { ...prevErrors };\n//             delete newErrors.Resume;\n//             return newErrors;\n//           });\n//         }\n//       }\n//     } else {\n//       setFormData((prevFormData) => ({\n//         ...prevFormData,\n//         [id]: value,\n//       }));\n//       setValidationErrors((prevErrors) => {\n//         const newErrors = { ...prevErrors };\n//         delete newErrors[id];\n//         return newErrors;\n//       });\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   // const uploadResumeToS3 = async (file) => {\n//   //   const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`; // Replace with your actual upload URL\n//   //   try {\n//   //     const formData = new FormData();\n//   //     formData.append(\"file\", file); // Ensure your API expects the file under this key\n//   //     const response = await axios.post(url, formData, {\n//   //       headers: {\n//   //         \"Content-Type\": \"multipart/form-data\",\n//   //       },\n//   //     });\n//   //     return { success: true, data: response.data };\n//   //   } catch (error) {\n//   //     return { success: false, error: error.message };\n//   //   }\n//   // };\n\n//   const uploadResumeToS3 = async (file) => {\n//     const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`;\n//     try {\n//       const formData = new FormData();\n//       formData.append(\"file\", file);\n//       await axios.post(url, formData, {\n//         // Notice the removal of `response =`\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//         },\n//       });\n//       return { success: true };\n//     } catch (error) {\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   // const submitFormData = async (data) => {\n//   //   try {\n//   //     const url =\n//   //       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//   //     // Assuming your server expects JSON data:\n//   //     const response = await axios.post(url, JSON.stringify(data), {\n//   //       headers: {\n//   //         \"Content-Type\": \"application/json\",\n//   //         // Add any other required headers here, like authentication tokens\n//   //       },\n//   //     });\n//   //     return { success: true };\n//   //   } catch (error) {\n//   //     console.error(\"Error submitting form data:\", error);\n//   //     return { success: false, error: error.message };\n//   //   }\n//   // };\n\n//   const submitFormData = async (data) => {\n//     try {\n//       const url =\n//         \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n\n//       // Ensure data is correctly structured for your API's expectations\n//       const payload = JSON.stringify(data);\n\n//       const response = await axios.post(url, payload, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       console.log(\"Submission response:\", response.data); // Log the response data for debugging\n//       return { success: true, data: response.data };\n//     } catch (error) {\n//       console.error(\n//         \"Error submitting form data:\",\n//         error.response ? error.response.data : error.message\n//       );\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       // Attempt to upload the resume before submitting form data\n//       if (formData.Resume) {\n//         const uploadResponse = await uploadResumeToS3(formData.Resume);\n//         if (uploadResponse.success) {\n//           console.log(\n//             \"Resume uploaded successfully. Proceeding with form submission.\"\n//           );\n//           // Prepare form data for submission (excluding the file itself)\n//           const dataToSubmit = { ...formData, Resume: undefined };\n//           const formSubmitResponse = await submitFormData(dataToSubmit);\n//           if (formSubmitResponse.success) {\n//             console.log(\"Form data submitted successfully.\");\n//             setShowPopup(true); // Show success popup\n//           } else {\n//             // Handle form submission error\n//             console.error(\n//               \"Failed to submit form data:\",\n//               formSubmitResponse.error\n//             );\n//           }\n//         } else {\n//           console.error(\"Failed to upload resume:\", uploadResponse.error);\n//         }\n//       }\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData); // Reset form\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\"; // Clear the file input\n//     }\n//   };\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                     htmlFor={key}\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors.Resume && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Resume}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SuccessPage;\n\n//3\n// import React, { useState } from \"react\";\n\n// function UploadForm() {\n//   const [formData, setFormData] = useState({\n//     FullName: \"\",\n//     ReqId: \"\",\n//   });\n//   const [resume, setResume] = useState(null);\n\n//   // Handles changes in text inputs\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handles resume file selection\n//   const handleResumeChange = (e) => {\n//     setResume(e.target.files[0]);\n//   };\n\n//   // Uploads the resume file\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to upload resume\");\n//       }\n//       return await response.json(); // Assuming the response contains the URL of the uploaded file\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \", error.message);\n//     }\n//   };\n\n//   // Handles the form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!resume) {\n//       alert(\"Please select a resume to upload.\");\n//       return;\n//     }\n\n//     // Upload the resume first\n//     const uploadResult = await uploadResume(resume);\n//     if (uploadResult && uploadResult.success) {\n//       alert(\"Resume successfully uploaded.\");\n//       // Here, you can also handle additional actions post-upload,\n//       // such as updating the database with the form data and the URL of the uploaded file.\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label>Full Name:</label>\n//         <input\n//           type=\"text\"\n//           name=\"FullName\"\n//           value={formData.FullName}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Req ID:</label>\n//         <input\n//           type=\"text\"\n//           name=\"ReqId\"\n//           value={formData.ReqId}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Resume:</label>\n//         <input\n//           type=\"file\"\n//           name=\"resume\"\n//           onChange={handleResumeChange}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Submit</button>\n//     </form>\n//   );\n// }\n\n// export default UploadForm;\n\n//4\n\n// import React, { useState } from \"react\";\n\n// function UploadForm() {\n//   const [formData, setFormData] = useState({\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//   });\n//   const [resume, setResume] = useState(null);\n\n//   // Handles changes in text inputs\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handles resume file selection\n//   const handleResumeChange = (e) => {\n//     setResume(e.target.files[0]);\n//   };\n\n//   // Upload the resume to S3\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) {\n//         throw new Error(\"Failed to upload resume\");\n//       }\n//       const uploadResult = await response.json();\n//       return uploadResult; // Assuming this includes the URL of the uploaded file\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \", error.message);\n//       return null;\n//     }\n//   };\n\n//   // Submit form details to DynamoDB\n//   const submitFormDetails = async (details, resumeUrl) => {\n//     const submitUrl =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     details.resumeUrl = resumeUrl; // Add the resume URL to form details\n\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(details),\n//       });\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit form details\");\n//       }\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Submission Error:\", error);\n//       alert(\"Submission failed: \", error.message);\n//       return null;\n//     }\n//   };\n\n//   // Handles the form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!resume) {\n//       alert(\"Please select a resume to upload.\");\n//       return;\n//     }\n\n//     // First, upload the resume\n//     const uploadResult = await uploadResume(resume);\n//     if (uploadResult && uploadResult.fileUrl) {\n//       // Then, submit the form details along with the resume URL\n//       const submitResult = await submitFormDetails(\n//         formData,\n//         uploadResult.fileUrl\n//       );\n//       if (submitResult) {\n//         alert(\"Form and resume submitted successfully!\");\n//       }\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label>Full Name:</label>\n//         <input\n//           type=\"text\"\n//           name=\"FullName\"\n//           value={formData.FullName}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Req ID:</label>\n//         <input\n//           type=\"text\"\n//           name=\"ReqId\"\n//           value={formData.ReqId}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Email:</label>\n//         <input\n//           type=\"email\"\n//           name=\"EmailId\"\n//           value={formData.EmailId}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Resume:</label>\n//         <input\n//           type=\"file\"\n//           name=\"resume\"\n//           onChange={handleResumeChange}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Submit</button>\n//     </form>\n//   );\n// }\n\n// export default UploadForm;\n\n//5\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Reference for the file input\n\n//   const isValidEmail = (email) => {\n//     return /\\S+@\\S+\\.\\S+/.test(email);\n//   };\n\n//   // // Update form state on user input\n//   // const handleInputChange = (e) => {\n//   //   const { name, value, files } = e.target;\n//   //   if (name === \"Resume\" && files) {\n//   //     setFormData({ ...formData, Resume: files[0] });\n//   //   } else {\n//   //     setFormData({ ...formData, [name]: value });\n//   //   }\n//   // };\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors({\n//             ...validationErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           });\n//         } else {\n//           setFormData({\n//             ...formData,\n//             Resume: file,\n//           });\n//           let newErrors = { ...validationErrors };\n//           delete newErrors.Resume;\n//           setValidationErrors(newErrors);\n//         }\n//       }\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [id]: value,\n//       });\n//       let newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   // Upload resume to S3 and return the file URL\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) throw new Error(\"Failed to upload resume\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // // Submit form details including resume URL to DynamoDB\n//   // const submitFormDetails = async (formData) => {\n//   //   const submitUrl =\n//   //     \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//   //   try {\n//   //     const response = await fetch(submitUrl, {\n//   //       method: \"POST\",\n//   //       headers: { \"Content-Type\": \"application/json\" },\n//   //       body: JSON.stringify(formData),\n//   //     });\n//   //     if (!response.ok) throw new Error(\"Failed to submit form details\");\n//   //     return await response.json();\n//   //   } catch (error) {\n//   //     console.error(\"Submission Error:\", error);\n//   //     alert(\"Submission failed: \" + error.message);\n//   //     return null;\n//   //   }\n//   // };\n\n//   // Handle form submission\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   if (formData.Resume) {\n//   //     const uploadResult = await uploadResume(formData.Resume);\n//   //     if (uploadResult && uploadResult.url) {\n//   //       // Assume uploadResult contains the URL of the uploaded file\n//   //       const formSubmissionResponse = await submitFormDetails({\n//   //         ...formData,\n//   //         ResumeUrl: uploadResult.url,\n//   //       });\n//   //       if (formSubmissionResponse) {\n//   //         console.log(\"Form submitted successfully\");\n//   //         setShowPopup(true);\n//   //       }\n//   //     }\n//   //   } else {\n//   //     console.log(\"Please select a resume to upload.\");\n//   //   }\n//   // };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       console.log(\"Form Data Submitted:\", formData);\n//       setShowPopup(true);\n//     }\n//     event.preventDefault();\n//     if (validateForm()) {\n//       try {\n//         // 1. Upload the resume to S3\n//         const s3UploadResponse = await uploadResume(formData.Resume);\n\n//         // 2. If the S3 upload is successful, proceed to submit the form data\n//         if (s3UploadResponse.success) {\n//           console.log(\"Form Data Submitted:\", formData);\n//           setShowPopup(true);\n//         } else {\n//           // Handle S3 upload error\n//           console.error(\"S3 Upload Error:\", s3UploadResponse.error);\n//         }\n//       } catch (error) {\n//         // Handle any other errors that may occur during the process\n//         console.error(\"Submission Error:\", error);\n//       }\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\"; // Clear the file input\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit} className=\"mt-6\">\n//           <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n//             {Object.keys(initialFormData).map((key) =>\n//               key !== \"Resume\" ? (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor={key}\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     name={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                 </div>\n//               ) : (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor=\"Resume\"\n//                     className=\"block text-sm font-medium text-white\"\n//                   >\n//                     Resume\n//                   </label>\n//                   <input\n//                     id=\"Resume\"\n//                     name=\"Resume\"\n//                     type=\"file\"\n//                     onChange={handleInputChange}\n//                     ref={resumeInputRef}\n//                     className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//                   />\n//                 </div>\n//               )\n//             )}\n//             <button\n//               type=\"submit\"\n//               className=\"col-span-1 sm:col-span-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n//6 - Working\n\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Reference for the file input\n\n//   // Update form state on user input\n//   const handleInputChange = (e) => {\n//     const { name, value, files } = e.target;\n//     if (name === \"Resume\" && files) {\n//       setFormData({ ...formData, Resume: files[0] });\n//     } else {\n//       setFormData({ ...formData, [name]: value });\n//     }\n//   };\n\n//   // Upload resume to S3 and return the file URL\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) throw new Error(\"Failed to upload resume\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Submit form details including resume URL to DynamoDB\n//   const submitFormDetails = async (formData) => {\n//     const submitUrl =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to submit form details\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Submission Error:\", error);\n//       alert(\"Submission failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (formData.Resume) {\n//       const uploadResult = await uploadResume(formData.Resume);\n//       if (uploadResult && uploadResult.url) {\n//         // Assume uploadResult contains the URL of the uploaded file\n//         const formSubmissionResponse = await submitFormDetails({\n//           ...formData,\n//           ResumeUrl: uploadResult.url,\n//         });\n//         if (formSubmissionResponse) {\n//           console.log(\"Form submitted successfully\");\n//           setShowPopup(true);\n//         }\n//       }\n//     } else {\n//       console.log(\"Please select a resume to upload.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         {/* Iterate over the formData keys to generate input fields */}\n//         {Object.keys(initialFormData).map((key) => {\n//           if (key === \"Resume\") {\n//             return (\n//               <div key={key}>\n//                 <label>{key}:</label>\n//                 <input\n//                   type=\"file\"\n//                   name={key}\n//                   onChange={handleInputChange}\n//                   ref={resumeInputRef}\n//                   required\n//                 />\n//               </div>\n//             );\n//           } else {\n//             return (\n//               <div key={key}>\n//                 <label>{key}:</label>\n//                 <input\n//                   type=\"text\"\n//                   name={key}\n//                   value={formData[key]}\n//                   onChange={handleInputChange}\n//                   required\n//                 />\n//               </div>\n//             );\n//           }\n//         })}\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//       {showPopup && (\n//         <div className=\"popup\">\n//           <p>Form submitted successfully!</p>\n//           <button onClick={() => setShowPopup(false)}>Close</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n///7 -- Testing\n\nimport React, { useState, useRef } from \"react\";\n\nfunction SuccessPage() {\n  // Initial state for form data, including a placeholder for the resume file\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormattingNeeded: \"\",\n    FormattedBy: \"\",\n    Resume: null, // Placeholder for the resume file\n  };\n\n  // State hooks for form data, validation errors, and submission status\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const resumeInputRef = useRef(null); // Ref for the resume input to reset it upon submission\n\n  // Handles form input changes and updates state accordingly\n  const handleInputChange = (e) => {\n    const { name, value, files } = e.target;\n    // Reset validation errors for the current input\n    setValidationErrors((prevErrors) => ({ ...prevErrors, [name]: null }));\n\n    if (name === \"Resume\" && files) {\n      setFormData((prevFormData) => ({ ...prevFormData, Resume: files[0] }));\n    } else {\n      setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\n    }\n  };\n\n  // Function to validate the entire form before submission\n  const validateForm = () => {\n    const newErrors = {};\n    Object.keys(formData).forEach((key) => {\n      // Check for empty fields, excluding the Resume for separate validation\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n      }\n    });\n\n    // Validate the resume file, if selected\n    if (formData.Resume) {\n      const { Resume } = formData;\n      const allowedTypes = [\n        \"application/pdf\",\n        \"application/msword\",\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n      ];\n      const maxSize = 10485760; // 10MB\n\n      if (!allowedTypes.includes(Resume.type) || Resume.size > maxSize) {\n        newErrors.Resume = \"Only PDF or DOC files under 10MB are allowed.\";\n      }\n    } else {\n      // Ensure a file is selected\n      newErrors.Resume = \"Please upload a resume.\";\n    }\n\n    setValidationErrors(newErrors);\n    // Form is valid if no errors were added\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Handle form submission with validation and data processing\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (validateForm()) {\n      console.log(\"Form Data:\", formData);\n      // Implement the upload logic here\n      setShowPopup(true); // Show success message on successful validation/submission\n    } else {\n      console.log(\"Validation errors:\", validationErrors);\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        {Object.keys(initialFormData).map((key) => (\n          <div key={key} className=\"mb-4\">\n            <label htmlFor={key}>\n              {key.replace(/([A-Z])/g, \" $1\").trim()}:\n            </label>\n            {key === \"Resume\" ? (\n              <input\n                type=\"file\"\n                name=\"key\"\n                onChange={handleInputChange}\n                ref={resumeInputRef}\n                className={validationErrors[key] ? \"border-red-500\" : \"\"}\n                required\n              />\n            ) : (\n              <input\n                type=\"text\"\n                name={key}\n                value={formData[key]}\n                onChange={handleInputChange}\n                className={validationErrors[key] ? \"border-red-500\" : \"\"}\n                required\n              />\n            )}\n            {validationErrors[key] && (\n              <div className=\"text-red-500\">{validationErrors[key]}</div>\n            )}\n          </div>\n        ))}\n        <button\n          type=\"submit\"\n          className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n        >\n          Submit\n        </button>\n      </form>\n      {showPopup && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n          <div className=\"bg-white p-5 rounded-lg shadow-lg text-center\">\n            <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n            <p>Your form has been submitted successfully.</p>\n            <pre>{JSON.stringify(formData, null, 2)}</pre>\n            <button\n              onClick={() => setShowPopup(false)}\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SuccessPage;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}