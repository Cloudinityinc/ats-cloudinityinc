{"ast":null,"code":"var _jsxFileName = \"/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n\n// const SuccessPage = () => {\n//   const [formData, setFormData] = useState({\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormatingNeeded: \"\",\n//     FormatedBy: \"\",\n//     Password: \"\",\n//     PasswordConfirmation: \"\",\n//     Resume: null,\n//   });\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [uploadError, setUploadError] = useState(\"\");\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\") {\n//       const file = files ? files[0] : null;\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 10 * 1024 * 1024) {\n//           setUploadError(\"Only PDF or DOC files under 10MB are allowed.\");\n//           return;\n//         }\n//         setFormData({ ...formData, Resume: file });\n//         setValidationErrors({ ...validationErrors, Resume: \"\" });\n//       }\n//     } else {\n//       setFormData({ ...formData, [id]: value });\n//       // Remove any existing error for this field\n//       const newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       // Skip validation for Resume here, since it's handled separately\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//       }\n//     });\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//     }\n//     setValidationErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       // Form is valid, proceed with submission\n//       console.log(\"Form Data Submitted:\", formData);\n//       setShowPopup(true);\n//     } else {\n//       // Handle form validation errors\n//       console.error(\"Validation errors:\", validationErrors);\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     window.location.reload(); // Reload the page to clear the form\n//     setValidationErrors({}); // Clear validation errors\n//     setUploadError(\"\"); // Clear upload error\n//   };\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SuccessPage = () => {\n  _s();\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormatingNeeded: \"\",\n    FormatedBy: \"\",\n    Password: \"\",\n    PasswordConfirmation: \"\",\n    Resume: null\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const [uploadError, setUploadError] = useState(\"\");\n  const handleInputChange = e => {\n    const {\n      id,\n      value,\n      files\n    } = e.target;\n    const newFormData = {\n      ...formData\n    };\n    const newValidationErrors = {\n      ...validationErrors\n    };\n    if (id === \"Resume\") {\n      if (files.length > 0) {\n        const file = files[0];\n        const allowedTypes = [\"application/pdf\", \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"];\n        if (!allowedTypes.includes(file.type) || file.size > 10 * 1024 * 1024) {\n          newValidationErrors.Resume = \"Only PDF or DOC files under 10MB are allowed.\";\n        } else {\n          newFormData.Resume = file;\n          delete newValidationErrors.Resume;\n        }\n      }\n    } else {\n      newFormData[id] = value;\n      delete newValidationErrors[id];\n    }\n    setFormData(newFormData);\n    setValidationErrors(newValidationErrors);\n  };\n  const validateForm = () => {\n    const newErrors = {};\n    Object.keys(formData).forEach(key => {\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n      }\n    });\n    if (!formData.Resume) {\n      newErrors.Resume = \"Please upload a resume.\";\n    }\n    setValidationErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (validateForm()) {\n      setShowPopup(true);\n    }\n  };\n  const handleClosePopup = () => {\n    setShowPopup(false);\n    setFormData(initialFormData); // Reset form data to initial state\n    setValidationErrors({}); // Clear all validation errors\n    setUploadError(\"\"); // Clear upload error\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl font-bold text-white capitalize dark:text-white\",\n        children: \"Employee Information Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\",\n          children: [Object.keys(formData).filter(key => key !== \"Resume\").map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: key,\n              className: \"text-white dark:text-gray-200 block text-sm font-bold mb-2\",\n              children: key.replace(/([A-Z])/g, \" $1\").trim()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: key,\n              type: key === \"EmailId\" ? \"email\" : \"text\",\n              value: formData[key],\n              onChange: handleInputChange,\n              className: \"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\",\n              placeholder: `Enter ${key}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 19\n            }, this), validationErrors[key] && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-red-500 text-xs italic\",\n              children: validationErrors[key]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 21\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"Resume\",\n              className: \"block text-sm font-medium text-white\",\n              children: \"Resume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"Resume\",\n                name: \"Resume\",\n                type: \"file\",\n                onChange: handleInputChange,\n                className: \"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100 \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this), uploadError && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-red-500 text-xs italic\",\n              children: uploadError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-5 rounded-lg shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg mb-4\",\n          children: \"Submission Successful\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your form has been submitted successfully.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClosePopup,\n          className: \"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(SuccessPage, \"6l5Y3JTZknpVOe9QOZrddHTHuJ4=\");\n_c = SuccessPage;\nexport default SuccessPage;\nvar _c;\n$RefreshReg$(_c, \"SuccessPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SuccessPage","_s","initialFormData","FullName","RequiredID","RequiredTitle","Role","RequiredCreationDate","VendorID","ImmigrationStatus","ContractType","SubmissionDate","RequiredSubmissionEndDate","CandidateCurrentLocation","ContactNumber","RecruiterName","State","SubmissionStatus","VendorRate","CandidatePayRate","BillRateMargin","ResumeSource","EmailId","LinkedInID","EmployerInformation","ProfessionalReferences","DOB","RequiredSkills","ResumeFormatingNeeded","FormatedBy","Password","PasswordConfirmation","Resume","formData","setFormData","validationErrors","setValidationErrors","showPopup","setShowPopup","uploadError","setUploadError","handleInputChange","e","id","value","files","target","newFormData","newValidationErrors","length","file","allowedTypes","includes","type","size","validateForm","newErrors","Object","keys","forEach","key","handleSubmit","event","preventDefault","handleClosePopup","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","filter","map","htmlFor","replace","trim","onChange","placeholder","name","onClick","_c","$RefreshReg$"],"sources":["/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n\n// const SuccessPage = () => {\n//   const [formData, setFormData] = useState({\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormatingNeeded: \"\",\n//     FormatedBy: \"\",\n//     Password: \"\",\n//     PasswordConfirmation: \"\",\n//     Resume: null,\n//   });\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [uploadError, setUploadError] = useState(\"\");\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\") {\n//       const file = files ? files[0] : null;\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 10 * 1024 * 1024) {\n//           setUploadError(\"Only PDF or DOC files under 10MB are allowed.\");\n//           return;\n//         }\n//         setFormData({ ...formData, Resume: file });\n//         setValidationErrors({ ...validationErrors, Resume: \"\" });\n//       }\n//     } else {\n//       setFormData({ ...formData, [id]: value });\n//       // Remove any existing error for this field\n//       const newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       // Skip validation for Resume here, since it's handled separately\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//       }\n//     });\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//     }\n//     setValidationErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       // Form is valid, proceed with submission\n//       console.log(\"Form Data Submitted:\", formData);\n//       setShowPopup(true);\n//     } else {\n//       // Handle form validation errors\n//       console.error(\"Validation errors:\", validationErrors);\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     window.location.reload(); // Reload the page to clear the form\n//     setValidationErrors({}); // Clear validation errors\n//     setUploadError(\"\"); // Clear upload error\n//   };\n\nimport React, { useState } from \"react\";\n\nconst SuccessPage = () => {\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormatingNeeded: \"\",\n    FormatedBy: \"\",\n    Password: \"\",\n    PasswordConfirmation: \"\",\n    Resume: null,\n  };\n\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const [uploadError, setUploadError] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    const { id, value, files } = e.target;\n    const newFormData = { ...formData };\n    const newValidationErrors = { ...validationErrors };\n\n    if (id === \"Resume\") {\n      if (files.length > 0) {\n        const file = files[0];\n        const allowedTypes = [\n          \"application/pdf\",\n          \"application/msword\",\n          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        ];\n\n        if (!allowedTypes.includes(file.type) || file.size > 10 * 1024 * 1024) {\n          newValidationErrors.Resume =\n            \"Only PDF or DOC files under 10MB are allowed.\";\n        } else {\n          newFormData.Resume = file;\n          delete newValidationErrors.Resume;\n        }\n      }\n    } else {\n      newFormData[id] = value;\n      delete newValidationErrors[id];\n    }\n\n    setFormData(newFormData);\n    setValidationErrors(newValidationErrors);\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    Object.keys(formData).forEach((key) => {\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n      }\n    });\n\n    if (!formData.Resume) {\n      newErrors.Resume = \"Please upload a resume.\";\n    }\n\n    setValidationErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (validateForm()) {\n      setShowPopup(true);\n    }\n  };\n\n  const handleClosePopup = () => {\n    setShowPopup(false);\n    setFormData(initialFormData); // Reset form data to initial state\n    setValidationErrors({}); // Clear all validation errors\n    setUploadError(\"\"); // Clear upload error\n  };\n\n  return (\n    <div>\n      <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n        <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n          Employee Information Form\n        </h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n            {Object.keys(formData)\n              .filter((key) => key !== \"Resume\")\n              .map((key) => (\n                <div className=\"mb-4\" key={key}>\n                  <label\n                    htmlFor={key}\n                    className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n                  >\n                    {key.replace(/([A-Z])/g, \" $1\").trim()}\n                  </label>\n                  <input\n                    id={key}\n                    type={key === \"EmailId\" ? \"email\" : \"text\"}\n                    value={formData[key]}\n                    onChange={handleInputChange}\n                    className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n                    placeholder={`Enter ${key}`}\n                  />\n                  {validationErrors[key] && (\n                    <p className=\"text-red-500 text-xs italic\">\n                      {validationErrors[key]}\n                    </p>\n                  )}\n                </div>\n              ))}\n            <div className=\"mb-4\">\n              <label\n                htmlFor=\"Resume\"\n                className=\"block text-sm font-medium text-white\"\n              >\n                Resume\n              </label>\n              <div className=\"mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md\">\n                <input\n                  id=\"Resume\"\n                  name=\"Resume\"\n                  type=\"file\"\n                  onChange={handleInputChange}\n                  className=\"block w-full text-sm text-gray-500\n                  file:mr-4 file:py-2 file:px-4\n                  file:rounded-full file:border-0\n                  file:text-sm file:font-semibold\n                  file:bg-violet-50 file:text-violet-700\n                  hover:file:bg-violet-100\n                \"\n                />\n              </div>\n              {uploadError && (\n                <p className=\"text-red-500 text-xs italic\">{uploadError}</p>\n              )}\n            </div>\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </section>\n      {showPopup && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n          <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n            <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n            <p>Your form has been submitted successfully.</p>\n            <button\n              onClick={handleClosePopup}\n              className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SuccessPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}