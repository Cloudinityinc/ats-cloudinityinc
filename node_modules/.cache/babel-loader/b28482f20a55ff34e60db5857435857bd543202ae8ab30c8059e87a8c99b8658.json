{"ast":null,"code":"var _jsxFileName = \"/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from \"react\";\n// import axios from \"axios\";\n\n// const SuccessPage = () => {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormatingNeeded: \"\",\n//     FormatedBy: \"\",\n//     // Resume: null,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Create a ref for the resume input\n\n//   const isValidEmail = (email) => {\n//     return /\\S+@\\S+\\.\\S+/.test(email);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors({\n//             ...validationErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           });\n//         } else {\n//           setFormData({\n//             ...formData,\n//             Resume: file,\n//           });\n//           let newErrors = { ...validationErrors };\n//           delete newErrors.Resume;\n//           setValidationErrors(newErrors);\n//         }\n//       }\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [id]: value,\n//       });\n//       let newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       console.log(\"Form Data Submitted:\", formData);\n//       setShowPopup(true);\n//     }\n//     event.preventDefault();\n//     if (validateForm()) {\n//       try {\n//         // 1. Upload the resume to S3\n//         const s3UploadResponse = await uploadResumeToS3(formData.Resume);\n\n//         // 2. If the S3 upload is successful, proceed to submit the form data\n//         if (s3UploadResponse.success) {\n//           console.log(\"Form Data Submitted:\", formData);\n//           setShowPopup(true);\n//         } else {\n//           // Handle S3 upload error\n//           console.error(\"S3 Upload Error:\", s3UploadResponse.error);\n//         }\n//       } catch (error) {\n//         // Handle any other errors that may occur during the process\n//         console.error(\"Submission Error:\", error);\n//       }\n//     }\n//   };\n\n//   // Function to upload resume to S3\n//   const uploadResumeToS3 = async (resumeFile) => {\n//     try {\n//       // Create a FormData object to send the file\n//       const formData = new FormData();\n//       formData.append(\"resume\", resumeFile);\n\n//       // Make a POST request to your API endpoint for S3 upload\n//       const response = await fetch(\n//         \"https://8t9nfrdxf9.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}\",\n//         {\n//           method: \"POST\",\n//           body: formData,\n//         }\n//       );\n\n//       if (response.ok) {\n//         // S3 upload successful\n//         return { success: true };\n//       } else {\n//         // S3 upload failed, return the error message\n//         const errorData = await response.json();\n//         return { success: false, error: errorData.message };\n//       }\n//     } catch (error) {\n//       // Handle any errors that occur during the upload process\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\"; // Clear the file input\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {/* Dynamically generate input fields based on formData */}\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                     htmlFor={key}\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef} // Assign the ref to the file input\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors.Resume && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Resume}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SuccessPage;\n\n//2\n\nimport React, { useState, useRef } from \"react\";\nimport axios from \"axios\"; // Ensure axios is installed via npm or yarn\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SuccessPage = () => {\n  _s();\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormatingNeeded: \"\",\n    FormatedBy: \"\"\n    // Resume is initially null; it will be set to the file object when a file is selected\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const resumeInputRef = useRef(null);\n  const isValidEmail = email => /\\S+@\\S+\\.\\S+/.test(email);\n  const handleInputChange = e => {\n    const {\n      id,\n      value,\n      files\n    } = e.target;\n    if (id === \"Resume\" && files) {\n      const file = files[0];\n      if (file) {\n        const allowedTypes = [\"application/pdf\", \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"];\n        if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n          setValidationErrors(prevErrors => ({\n            ...prevErrors,\n            Resume: \"Only PDF or DOC files under 10MB are allowed.\"\n          }));\n        } else {\n          setFormData(prevFormData => ({\n            ...prevFormData,\n            Resume: file\n          }));\n          setValidationErrors(prevErrors => {\n            const newErrors = {\n              ...prevErrors\n            };\n            delete newErrors.Resume;\n            return newErrors;\n          });\n        }\n      }\n    } else {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        [id]: value\n      }));\n      setValidationErrors(prevErrors => {\n        const newErrors = {\n          ...prevErrors\n        };\n        delete newErrors[id];\n        return newErrors;\n      });\n    }\n  };\n  const validateForm = () => {\n    let isValid = true;\n    const newErrors = {};\n    Object.keys(formData).forEach(key => {\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n        isValid = false;\n      }\n    });\n    if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n      newErrors.EmailId = \"Invalid email format.\";\n      isValid = false;\n    }\n    if (!formData.Resume) {\n      newErrors.Resume = \"Please upload a resume.\";\n      isValid = false;\n    }\n    setValidationErrors(newErrors);\n    return isValid;\n  };\n  const uploadResumeToS3 = async file => {\n    const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`; // Replace with your actual upload URL\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file); // Ensure your API expects the file under this key\n      const response = await axios.post(url, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const submitFormData = async data => {\n    try {\n      // Replace with your actual endpoint for submitting form data\n      const url = \"https://yourapiendpoint.com/submit-form\";\n      await axios.post(url, data);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Error submitting form data:\", error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (validateForm()) {\n      // Attempt to upload the resume before submitting form data\n      if (formData.Resume) {\n        const uploadResponse = await uploadResumeToS3(formData.Resume);\n        if (uploadResponse.success) {\n          console.log(\"Resume uploaded successfully. Proceeding with form submission.\");\n          // Prepare form data for submission (excluding the file itself)\n          const dataToSubmit = {\n            ...formData,\n            Resume: undefined\n          };\n          const formSubmitResponse = await submitFormData(dataToSubmit);\n          if (formSubmitResponse.success) {\n            console.log(\"Form data submitted successfully.\");\n            setShowPopup(true); // Show success popup\n          } else {\n            // Handle form submission error\n            console.error(\"Failed to submit form data:\", formSubmitResponse.error);\n          }\n        } else {\n          console.error(\"Failed to upload resume:\", uploadResponse.error);\n        }\n      }\n    }\n  };\n  const handleClosePopup = () => {\n    setShowPopup(false);\n    setFormData(initialFormData); // Reset form\n    setValidationErrors({});\n    if (resumeInputRef.current) {\n      resumeInputRef.current.value = \"\"; // Clear the file input\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl font-bold text-white capitalize dark:text-white\",\n        children: \"Employee Information Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\",\n          children: [Object.keys(initialFormData).filter(key => key !== \"Resume\").map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-white dark:text-gray-200 block text-sm font-bold mb-2\",\n              htmlFor: key,\n              children: key.replace(/([A-Z])/g, \" $1\").trim()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: key,\n              value: formData[key],\n              onChange: handleInputChange,\n              className: \"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 19\n            }, this), validationErrors[key] && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-red-500 text-xs italic\",\n              children: validationErrors[key]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 21\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-sm font-medium text-white\",\n              children: \"Resume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"Resume\",\n              name: \"Resume\",\n              type: \"file\",\n              onChange: handleInputChange,\n              ref: resumeInputRef,\n              className: \"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this), validationErrors.Resume && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-red-500 text-xs italic\",\n              children: validationErrors.Resume\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-5 rounded-lg shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg mb-4\",\n          children: \"Submission Successful\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your form has been submitted successfully.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClosePopup,\n          className: \"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 422,\n    columnNumber: 5\n  }, this);\n};\n_s(SuccessPage, \"YWwwmHvGuABOeL2WUGvea5cf81M=\");\n_c = SuccessPage;\nexport default SuccessPage;\nvar _c;\n$RefreshReg$(_c, \"SuccessPage\");","map":{"version":3,"names":["React","useState","useRef","axios","jsxDEV","_jsxDEV","SuccessPage","_s","initialFormData","FullName","RequiredID","RequiredTitle","Role","RequiredCreationDate","VendorID","ImmigrationStatus","ContractType","SubmissionDate","RequiredSubmissionEndDate","CandidateCurrentLocation","ContactNumber","RecruiterName","State","SubmissionStatus","VendorRate","CandidatePayRate","BillRateMargin","ResumeSource","EmailId","LinkedInID","EmployerInformation","ProfessionalReferences","DOB","RequiredSkills","ResumeFormatingNeeded","FormatedBy","formData","setFormData","validationErrors","setValidationErrors","showPopup","setShowPopup","resumeInputRef","isValidEmail","email","test","handleInputChange","e","id","value","files","target","file","allowedTypes","includes","type","size","prevErrors","Resume","prevFormData","newErrors","validateForm","isValid","Object","keys","forEach","key","uploadResumeToS3","url","FormData","append","response","post","headers","success","data","error","message","submitFormData","console","handleSubmit","event","preventDefault","uploadResponse","log","dataToSubmit","undefined","formSubmitResponse","handleClosePopup","current","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","filter","map","htmlFor","replace","trim","onChange","name","ref","onClick","_c","$RefreshReg$"],"sources":["/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx"],"sourcesContent":["// import React, { useState, useRef } from \"react\";\n// import axios from \"axios\";\n\n// const SuccessPage = () => {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormatingNeeded: \"\",\n//     FormatedBy: \"\",\n//     // Resume: null,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Create a ref for the resume input\n\n//   const isValidEmail = (email) => {\n//     return /\\S+@\\S+\\.\\S+/.test(email);\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors({\n//             ...validationErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           });\n//         } else {\n//           setFormData({\n//             ...formData,\n//             Resume: file,\n//           });\n//           let newErrors = { ...validationErrors };\n//           delete newErrors.Resume;\n//           setValidationErrors(newErrors);\n//         }\n//       }\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [id]: value,\n//       });\n//       let newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       console.log(\"Form Data Submitted:\", formData);\n//       setShowPopup(true);\n//     }\n//     event.preventDefault();\n//     if (validateForm()) {\n//       try {\n//         // 1. Upload the resume to S3\n//         const s3UploadResponse = await uploadResumeToS3(formData.Resume);\n\n//         // 2. If the S3 upload is successful, proceed to submit the form data\n//         if (s3UploadResponse.success) {\n//           console.log(\"Form Data Submitted:\", formData);\n//           setShowPopup(true);\n//         } else {\n//           // Handle S3 upload error\n//           console.error(\"S3 Upload Error:\", s3UploadResponse.error);\n//         }\n//       } catch (error) {\n//         // Handle any other errors that may occur during the process\n//         console.error(\"Submission Error:\", error);\n//       }\n//     }\n//   };\n\n//   // Function to upload resume to S3\n//   const uploadResumeToS3 = async (resumeFile) => {\n//     try {\n//       // Create a FormData object to send the file\n//       const formData = new FormData();\n//       formData.append(\"resume\", resumeFile);\n\n//       // Make a POST request to your API endpoint for S3 upload\n//       const response = await fetch(\n//         \"https://8t9nfrdxf9.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}\",\n//         {\n//           method: \"POST\",\n//           body: formData,\n//         }\n//       );\n\n//       if (response.ok) {\n//         // S3 upload successful\n//         return { success: true };\n//       } else {\n//         // S3 upload failed, return the error message\n//         const errorData = await response.json();\n//         return { success: false, error: errorData.message };\n//       }\n//     } catch (error) {\n//       // Handle any errors that occur during the upload process\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\"; // Clear the file input\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {/* Dynamically generate input fields based on formData */}\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                     htmlFor={key}\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef} // Assign the ref to the file input\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors.Resume && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Resume}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SuccessPage;\n\n//2\n\nimport React, { useState, useRef } from \"react\";\nimport axios from \"axios\"; // Ensure axios is installed via npm or yarn\n\nconst SuccessPage = () => {\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormatingNeeded: \"\",\n    FormatedBy: \"\",\n    // Resume is initially null; it will be set to the file object when a file is selected\n  };\n\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const resumeInputRef = useRef(null);\n\n  const isValidEmail = (email) => /\\S+@\\S+\\.\\S+/.test(email);\n\n  const handleInputChange = (e) => {\n    const { id, value, files } = e.target;\n    if (id === \"Resume\" && files) {\n      const file = files[0];\n      if (file) {\n        const allowedTypes = [\n          \"application/pdf\",\n          \"application/msword\",\n          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        ];\n        if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n          setValidationErrors((prevErrors) => ({\n            ...prevErrors,\n            Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n          }));\n        } else {\n          setFormData((prevFormData) => ({\n            ...prevFormData,\n            Resume: file,\n          }));\n          setValidationErrors((prevErrors) => {\n            const newErrors = { ...prevErrors };\n            delete newErrors.Resume;\n            return newErrors;\n          });\n        }\n      }\n    } else {\n      setFormData((prevFormData) => ({\n        ...prevFormData,\n        [id]: value,\n      }));\n      setValidationErrors((prevErrors) => {\n        const newErrors = { ...prevErrors };\n        delete newErrors[id];\n        return newErrors;\n      });\n    }\n  };\n\n  const validateForm = () => {\n    let isValid = true;\n    const newErrors = {};\n    Object.keys(formData).forEach((key) => {\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n        isValid = false;\n      }\n    });\n    if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n      newErrors.EmailId = \"Invalid email format.\";\n      isValid = false;\n    }\n    if (!formData.Resume) {\n      newErrors.Resume = \"Please upload a resume.\";\n      isValid = false;\n    }\n    setValidationErrors(newErrors);\n    return isValid;\n  };\n\n  const uploadResumeToS3 = async (file) => {\n    const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`; // Replace with your actual upload URL\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file); // Ensure your API expects the file under this key\n      const response = await axios.post(url, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n      return { success: true, data: response.data };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  const submitFormData = async (data) => {\n    try {\n      // Replace with your actual endpoint for submitting form data\n      const url = \"https://yourapiendpoint.com/submit-form\";\n      await axios.post(url, data);\n      return { success: true };\n    } catch (error) {\n      console.error(\"Error submitting form data:\", error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (validateForm()) {\n      // Attempt to upload the resume before submitting form data\n      if (formData.Resume) {\n        const uploadResponse = await uploadResumeToS3(formData.Resume);\n        if (uploadResponse.success) {\n          console.log(\n            \"Resume uploaded successfully. Proceeding with form submission.\"\n          );\n          // Prepare form data for submission (excluding the file itself)\n          const dataToSubmit = { ...formData, Resume: undefined };\n          const formSubmitResponse = await submitFormData(dataToSubmit);\n          if (formSubmitResponse.success) {\n            console.log(\"Form data submitted successfully.\");\n            setShowPopup(true); // Show success popup\n          } else {\n            // Handle form submission error\n            console.error(\n              \"Failed to submit form data:\",\n              formSubmitResponse.error\n            );\n          }\n        } else {\n          console.error(\"Failed to upload resume:\", uploadResponse.error);\n        }\n      }\n    }\n  };\n\n  const handleClosePopup = () => {\n    setShowPopup(false);\n    setFormData(initialFormData); // Reset form\n    setValidationErrors({});\n    if (resumeInputRef.current) {\n      resumeInputRef.current.value = \"\"; // Clear the file input\n    }\n  };\n  return (\n    <div>\n      <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n        <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n          Employee Information Form\n        </h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n            {Object.keys(initialFormData)\n              .filter((key) => key !== \"Resume\")\n              .map((key) => (\n                <div key={key} className=\"mb-4\">\n                  <label\n                    className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n                    htmlFor={key}\n                  >\n                    {key.replace(/([A-Z])/g, \" $1\").trim()}\n                  </label>\n                  <input\n                    type=\"text\"\n                    id={key}\n                    value={formData[key]}\n                    onChange={handleInputChange}\n                    className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n                  />\n                  {validationErrors[key] && (\n                    <p className=\"text-red-500 text-xs italic\">\n                      {validationErrors[key]}\n                    </p>\n                  )}\n                </div>\n              ))}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-white\">\n                Resume\n              </label>\n              <input\n                id=\"Resume\"\n                name=\"Resume\"\n                type=\"file\"\n                onChange={handleInputChange}\n                ref={resumeInputRef}\n                className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n              />\n              {validationErrors.Resume && (\n                <p className=\"text-red-500 text-xs italic\">\n                  {validationErrors.Resume}\n                </p>\n              )}\n            </div>\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </section>\n      {showPopup && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n          <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n            <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n            <p>Your form has been submitted successfully.</p>\n            <button\n              onClick={handleClosePopup}\n              className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SuccessPage;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,OAAOA,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}