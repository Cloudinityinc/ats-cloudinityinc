{"ast":null,"code":"var _jsxFileName = \"/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   // Initial state for form data, including a placeholder for the resume file\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null, // Placeholder for the resume file\n//   };\n\n//   // State hooks for form data, validation errors, and submission status\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Ref for the resume input to reset it upon submission\n\n//   // Handles form input changes and updates state accordingly\n//   const handleInputChange = (e) => {\n//     const { name, value, files } = e.target;\n//     // Reset validation errors for the current input\n//     setValidationErrors((prevErrors) => ({ ...prevErrors, [name]: null }));\n\n//     if (name === \"Resume\" && files) {\n//       setFormData((prevFormData) => ({ ...prevFormData, Resume: files[0] }));\n//     } else {\n//       setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\n//     }\n//   };\n\n//   // Upload resume to S3 and return the file URL\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) throw new Error(\"Failed to upload resume\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Submit form details including resume URL to DynamoDB\n//   const submitFormDetails = async (formData) => {\n//     const submitUrl =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to submit form details\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Submission Error:\", error);\n//       alert(\"Submission failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (formData.Resume) {\n//       const uploadResult = await uploadResume(formData.Resume);\n//       if (uploadResult && uploadResult.url) {\n//         // Assume uploadResult contains the URL of the uploaded file\n//         const formSubmissionResponse = await submitFormDetails({\n//           ...formData,\n//           ResumeUrl: uploadResult.url,\n//         });\n//         if (formSubmissionResponse) {\n//           console.log(\"Form submitted successfully\");\n//           setShowPopup(true);\n//         }\n//       }\n//     } else {\n//       console.log(\"Please select a resume to upload.\");\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//   };\n\n//   // // Handle form submission with validation and data processing\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   if (validateForm()) {\n//   //     console.log(\"Form Data:\", formData);\n//   //     // Implement the upload logic here\n//   //     setShowPopup(true); // Show success message on successful validation/submission\n//   //   } else {\n//   //     console.log(\"Validation errors:\", validationErrors);\n//   //   }\n//   // };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {/* Dynamically generate input fields based on formData */}\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                     htmlFor={key}\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef} // Assign the ref to the file input\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors.Resume && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Resume}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//     // <div>\n//     //   <form onSubmit={handleSubmit}>\n//     //     {Object.keys(initialFormData).map((key) => (\n//     //       <div key={key} className=\"mb-4\">\n//     //         <label htmlFor={key}>\n//     //           {key.replace(/([A-Z])/g, \" $1\").trim()}:\n//     //         </label>\n//     //         {key === \"Resume\" ? (\n//     //           <input\n//     //             type=\"file\"\n//     //             name=\"Resume\"\n//     //             onChange={handleInputChange}\n//     //             ref={resumeInputRef}\n//     //             className={validationErrors[key] ? \"border-red-500\" : \"\"}\n//     //             required\n//     //           />\n//     //         ) : (\n//     //           <input\n//     //             type=\"text\"\n//     //             name={key}\n//     //             value={formData[key]}\n//     //             onChange={handleInputChange}\n//     //             className={validationErrors[key] ? \"border-red-500\" : \"\"}\n//     //             required\n//     //           />\n//     //         )}\n//     //         {validationErrors[key] && (\n//     //           <div className=\"text-red-500\">{validationErrors[key]}</div>\n//     //         )}\n//     //       </div>\n//     //     ))}\n//     //     <button\n//     //       type=\"submit\"\n//     //       className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//     //     >\n//     //       Submit\n//     //     </button>\n//     //   </form>\n//     //   {showPopup && (\n//     //     <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//     //       <div className=\"bg-white p-5 rounded-lg shadow-lg text-center\">\n//     //         <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//     //         <p>Your form has been submitted successfully.</p>\n//     //         <pre>{JSON.stringify(formData, null, 2)}</pre>\n//     //         <button\n//     //           onClick={() => setShowPopup(false)}\n//     //           className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\"\n//     //         >\n//     //           Close\n//     //         </button>\n//     //       </div>\n//     //     </div>\n//     //   )}\n//     // </div>\n//   );\n// }\n\n// export default SuccessPage;\n\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SuccessPage() {\n  _s();\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormattingNeeded: \"\",\n    FormattedBy: \"\",\n    Resume: null // Placeholder for the resume file\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const resumeInputRef = useRef(null);\n  const handleInputChange = e => {\n    const {\n      name,\n      value,\n      files\n    } = e.target;\n    setValidationErrors(prevErrors => ({\n      ...prevErrors,\n      [name]: null\n    }));\n    if (name === \"Resume\" && files) {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        Resume: files[0]\n      }));\n    } else {\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        [name]: value\n      }));\n    }\n  };\n  const validateForm = () => {\n    let isValid = true;\n    const newErrors = {};\n    Object.entries(formData).forEach(([key, value]) => {\n      if (!value && key !== \"Resume\") {\n        newErrors[key] = \"This field is required\";\n        isValid = false;\n      }\n    });\n    const uploadResume = async file => {\n      const filename = encodeURIComponent(file.name);\n      const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n      const fileData = new FormData();\n      fileData.append(\"file\", file);\n      try {\n        const response = await fetch(uploadUrl, {\n          method: \"POST\",\n          body: fileData\n        });\n        if (!response.ok) throw new Error(\"Failed to upload resume\");\n        return await response.json();\n      } catch (error) {\n        console.error(\"Upload Error:\", error);\n        alert(\"Upload failed: \" + error.message);\n        return null;\n      }\n    };\n    const submitFormDetails = async formData => {\n      const submitUrl = \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n      try {\n        const response = await fetch(submitUrl, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(formData)\n        });\n        if (!response.ok) throw new Error(\"Failed to submit form details\");\n        return await response.json();\n      } catch (error) {\n        console.error(\"Submission Error:\", error);\n        alert(\"Submission failed: \" + error.message);\n        return null;\n      }\n    };\n\n    // const handleSubmit = async (e) => {\n    //   e.preventDefault();\n    //   if (formData.Resume) {\n    //     const uploadResult = await uploadResume(formData.Resume);\n    //     if (uploadResult && uploadResult.url) {\n    //       const formSubmissionResponse = await submitFormDetails({\n    //         ...formData,\n    //         ResumeUrl: uploadResult.url,\n    //       });\n    //       if (formSubmissionResponse) {\n    //         console.log(\"Form submitted successfully\");\n    //         setShowPopup(true);\n    //       }\n    //     }\n    //   } else {\n    //     console.log(\"Please select a resume to upload.\");\n    //   }\n    // };\n\n    const handleSubmit = async e => {\n      e.preventDefault();\n      if (!validateForm()) {\n        console.log(\"Form validation failed\", validationErrors);\n        return;\n      }\n      if (formData.Resume) {\n        try {\n          const uploadResult = await uploadResume(formData.Resume);\n          if (uploadResult && uploadResult.url) {\n            // Assuming the resume upload was successful, update formData with the resume URL\n            const updatedFormData = {\n              ...formData,\n              ResumeUrl: uploadResult.url\n            };\n            console.log(\"Form Data:\", JSON.stringify(updatedFormData, null, 2));\n            setShowPopup(true);\n          } else {\n            console.log(\"Failed to upload resume.\");\n          }\n        } catch (error) {\n          alert(error.message);\n        }\n      } else {\n        console.log(\"Please select a resume to upload.\");\n      }\n    };\n    const handleClosePopup = () => {\n      setShowPopup(false);\n      setFormData(initialFormData);\n      setValidationErrors({});\n      if (resumeInputRef.current) {\n        resumeInputRef.current.value = \"\";\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-xl font-bold text-white capitalize dark:text-white\",\n          children: \"Employee Information Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\",\n            children: [Object.keys(initialFormData).filter(key => key !== \"Resume\").map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: key,\n                className: \"text-white dark:text-gray-200 block text-sm font-bold mb-2\",\n                children: key.replace(/([A-Z])/g, \" $1\").trim()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: key,\n                name: key,\n                value: formData[key],\n                onChange: handleInputChange,\n                className: \"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 21\n              }, this), validationErrors[key] && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-red-500 text-xs italic\",\n                children: validationErrors[key]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 23\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"Resume\",\n                className: \"block text-sm font-medium text-white\",\n                children: \"Resume\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"Resume\",\n                name: \"Resume\",\n                type: \"file\",\n                onChange: handleInputChange,\n                ref: resumeInputRef,\n                className: \"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 17\n              }, this), validationErrors[\"Resume\"] && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-red-500 text-xs italic\",\n                children: validationErrors[\"Resume\"]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-5 rounded-lg shadow-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-lg mb-4\",\n            children: \"Submission Successful\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Your form has been submitted successfully.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleClosePopup,\n            className: \"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this);\n  };\n}\n_s(SuccessPage, \"YWwwmHvGuABOeL2WUGvea5cf81M=\");\n_c = SuccessPage;\nexport default SuccessPage;\nvar _c;\n$RefreshReg$(_c, \"SuccessPage\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","SuccessPage","_s","initialFormData","FullName","RequiredID","RequiredTitle","Role","RequiredCreationDate","VendorID","ImmigrationStatus","ContractType","SubmissionDate","RequiredSubmissionEndDate","CandidateCurrentLocation","ContactNumber","RecruiterName","State","SubmissionStatus","VendorRate","CandidatePayRate","BillRateMargin","ResumeSource","EmailId","LinkedInID","EmployerInformation","ProfessionalReferences","DOB","RequiredSkills","ResumeFormattingNeeded","FormattedBy","Resume","formData","setFormData","validationErrors","setValidationErrors","showPopup","setShowPopup","resumeInputRef","handleInputChange","e","name","value","files","target","prevErrors","prevFormData","validateForm","isValid","newErrors","Object","entries","forEach","key","uploadResume","file","filename","encodeURIComponent","uploadUrl","fileData","FormData","append","response","fetch","method","body","ok","Error","json","error","console","alert","message","submitFormDetails","submitUrl","headers","JSON","stringify","handleSubmit","preventDefault","log","uploadResult","url","updatedFormData","ResumeUrl","handleClosePopup","current","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","keys","filter","map","htmlFor","replace","trim","type","id","onChange","ref","onClick","_c","$RefreshReg$"],"sources":["/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx"],"sourcesContent":["// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   // Initial state for form data, including a placeholder for the resume file\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null, // Placeholder for the resume file\n//   };\n\n//   // State hooks for form data, validation errors, and submission status\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Ref for the resume input to reset it upon submission\n\n//   // Handles form input changes and updates state accordingly\n//   const handleInputChange = (e) => {\n//     const { name, value, files } = e.target;\n//     // Reset validation errors for the current input\n//     setValidationErrors((prevErrors) => ({ ...prevErrors, [name]: null }));\n\n//     if (name === \"Resume\" && files) {\n//       setFormData((prevFormData) => ({ ...prevFormData, Resume: files[0] }));\n//     } else {\n//       setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\n//     }\n//   };\n\n//   // Upload resume to S3 and return the file URL\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) throw new Error(\"Failed to upload resume\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Submit form details including resume URL to DynamoDB\n//   const submitFormDetails = async (formData) => {\n//     const submitUrl =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to submit form details\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Submission Error:\", error);\n//       alert(\"Submission failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (formData.Resume) {\n//       const uploadResult = await uploadResume(formData.Resume);\n//       if (uploadResult && uploadResult.url) {\n//         // Assume uploadResult contains the URL of the uploaded file\n//         const formSubmissionResponse = await submitFormDetails({\n//           ...formData,\n//           ResumeUrl: uploadResult.url,\n//         });\n//         if (formSubmissionResponse) {\n//           console.log(\"Form submitted successfully\");\n//           setShowPopup(true);\n//         }\n//       }\n//     } else {\n//       console.log(\"Please select a resume to upload.\");\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//   };\n\n//   // // Handle form submission with validation and data processing\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   if (validateForm()) {\n//   //     console.log(\"Form Data:\", formData);\n//   //     // Implement the upload logic here\n//   //     setShowPopup(true); // Show success message on successful validation/submission\n//   //   } else {\n//   //     console.log(\"Validation errors:\", validationErrors);\n//   //   }\n//   // };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {/* Dynamically generate input fields based on formData */}\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                     htmlFor={key}\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef} // Assign the ref to the file input\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors.Resume && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Resume}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//     // <div>\n//     //   <form onSubmit={handleSubmit}>\n//     //     {Object.keys(initialFormData).map((key) => (\n//     //       <div key={key} className=\"mb-4\">\n//     //         <label htmlFor={key}>\n//     //           {key.replace(/([A-Z])/g, \" $1\").trim()}:\n//     //         </label>\n//     //         {key === \"Resume\" ? (\n//     //           <input\n//     //             type=\"file\"\n//     //             name=\"Resume\"\n//     //             onChange={handleInputChange}\n//     //             ref={resumeInputRef}\n//     //             className={validationErrors[key] ? \"border-red-500\" : \"\"}\n//     //             required\n//     //           />\n//     //         ) : (\n//     //           <input\n//     //             type=\"text\"\n//     //             name={key}\n//     //             value={formData[key]}\n//     //             onChange={handleInputChange}\n//     //             className={validationErrors[key] ? \"border-red-500\" : \"\"}\n//     //             required\n//     //           />\n//     //         )}\n//     //         {validationErrors[key] && (\n//     //           <div className=\"text-red-500\">{validationErrors[key]}</div>\n//     //         )}\n//     //       </div>\n//     //     ))}\n//     //     <button\n//     //       type=\"submit\"\n//     //       className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//     //     >\n//     //       Submit\n//     //     </button>\n//     //   </form>\n//     //   {showPopup && (\n//     //     <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//     //       <div className=\"bg-white p-5 rounded-lg shadow-lg text-center\">\n//     //         <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//     //         <p>Your form has been submitted successfully.</p>\n//     //         <pre>{JSON.stringify(formData, null, 2)}</pre>\n//     //         <button\n//     //           onClick={() => setShowPopup(false)}\n//     //           className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\"\n//     //         >\n//     //           Close\n//     //         </button>\n//     //       </div>\n//     //     </div>\n//     //   )}\n//     // </div>\n//   );\n// }\n\n// export default SuccessPage;\n\nimport React, { useState, useRef } from \"react\";\n\nfunction SuccessPage() {\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormattingNeeded: \"\",\n    FormattedBy: \"\",\n    Resume: null, // Placeholder for the resume file\n  };\n\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const resumeInputRef = useRef(null);\n\n  const handleInputChange = (e) => {\n    const { name, value, files } = e.target;\n    setValidationErrors((prevErrors) => ({ ...prevErrors, [name]: null }));\n\n    if (name === \"Resume\" && files) {\n      setFormData((prevFormData) => ({ ...prevFormData, Resume: files[0] }));\n    } else {\n      setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\n    }\n  };\n\n  const validateForm = () => {\n    let isValid = true;\n    const newErrors = {};\n    Object.entries(formData).forEach(([key, value]) => {\n      if (!value && key !== \"Resume\") {\n        newErrors[key] = \"This field is required\";\n        isValid = false;\n      }\n    });\n\n    const uploadResume = async (file) => {\n      const filename = encodeURIComponent(file.name);\n      const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n      const fileData = new FormData();\n      fileData.append(\"file\", file);\n\n      try {\n        const response = await fetch(uploadUrl, {\n          method: \"POST\",\n          body: fileData,\n        });\n        if (!response.ok) throw new Error(\"Failed to upload resume\");\n        return await response.json();\n      } catch (error) {\n        console.error(\"Upload Error:\", error);\n        alert(\"Upload failed: \" + error.message);\n        return null;\n      }\n    };\n\n    const submitFormDetails = async (formData) => {\n      const submitUrl =\n        \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n      try {\n        const response = await fetch(submitUrl, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(formData),\n        });\n        if (!response.ok) throw new Error(\"Failed to submit form details\");\n        return await response.json();\n      } catch (error) {\n        console.error(\"Submission Error:\", error);\n        alert(\"Submission failed: \" + error.message);\n        return null;\n      }\n    };\n\n    // const handleSubmit = async (e) => {\n    //   e.preventDefault();\n    //   if (formData.Resume) {\n    //     const uploadResult = await uploadResume(formData.Resume);\n    //     if (uploadResult && uploadResult.url) {\n    //       const formSubmissionResponse = await submitFormDetails({\n    //         ...formData,\n    //         ResumeUrl: uploadResult.url,\n    //       });\n    //       if (formSubmissionResponse) {\n    //         console.log(\"Form submitted successfully\");\n    //         setShowPopup(true);\n    //       }\n    //     }\n    //   } else {\n    //     console.log(\"Please select a resume to upload.\");\n    //   }\n    // };\n\n    const handleSubmit = async (e) => {\n      e.preventDefault();\n\n      if (!validateForm()) {\n        console.log(\"Form validation failed\", validationErrors);\n        return;\n      }\n\n      if (formData.Resume) {\n        try {\n          const uploadResult = await uploadResume(formData.Resume);\n          if (uploadResult && uploadResult.url) {\n            // Assuming the resume upload was successful, update formData with the resume URL\n            const updatedFormData = {\n              ...formData,\n              ResumeUrl: uploadResult.url,\n            };\n\n            console.log(\"Form Data:\", JSON.stringify(updatedFormData, null, 2));\n            setShowPopup(true);\n          } else {\n            console.log(\"Failed to upload resume.\");\n          }\n        } catch (error) {\n          alert(error.message);\n        }\n      } else {\n        console.log(\"Please select a resume to upload.\");\n      }\n    };\n\n    const handleClosePopup = () => {\n      setShowPopup(false);\n      setFormData(initialFormData);\n      setValidationErrors({});\n      if (resumeInputRef.current) {\n        resumeInputRef.current.value = \"\";\n      }\n    };\n\n    return (\n      <div>\n        {/* The form component with Tailwind CSS */}\n        <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n          <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n            Employee Information Form\n          </h1>\n          <form onSubmit={handleSubmit}>\n            <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n              {/* Input fields generated based on formData */}\n              {Object.keys(initialFormData)\n                .filter((key) => key !== \"Resume\")\n                .map((key) => (\n                  <div key={key} className=\"mb-4\">\n                    <label\n                      htmlFor={key}\n                      className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n                    >\n                      {key.replace(/([A-Z])/g, \" $1\").trim()}\n                    </label>\n                    <input\n                      type=\"text\"\n                      id={key}\n                      name={key}\n                      value={formData[key]}\n                      onChange={handleInputChange}\n                      className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n                    />\n                    {validationErrors[key] && (\n                      <p className=\"text-red-500 text-xs italic\">\n                        {validationErrors[key]}\n                      </p>\n                    )}\n                  </div>\n                ))}\n              <div className=\"mb-4\">\n                <label\n                  htmlFor=\"Resume\"\n                  className=\"block text-sm font-medium text-white\"\n                >\n                  Resume\n                </label>\n                <input\n                  id=\"Resume\"\n                  name=\"Resume\"\n                  type=\"file\"\n                  onChange={handleInputChange}\n                  ref={resumeInputRef}\n                  className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n                />\n                {validationErrors[\"Resume\"] && (\n                  <p className=\"text-red-500 text-xs italic\">\n                    {validationErrors[\"Resume\"]}\n                  </p>\n                )}\n              </div>\n              <button\n                type=\"submit\"\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n              >\n                Submit\n              </button>\n            </div>\n          </form>\n        </section>\n        {showPopup && (\n          <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n            <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n              <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n              <p>Your form has been submitted successfully.</p>\n              <button\n                onClick={handleClosePopup}\n                className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nexport default SuccessPage;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}