{"ast":null,"code":"// import React, { useState } from \"react\";\n\n// const SuccessPage = () => {\n//   const [formData, setFormData] = useState({\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormatingNeeded: \"\",\n//     FormatedBy: \"\",\n//     Password: \"\",\n//     PasswordConfirmation: \"\",\n//     Resume: null,\n//   });\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [uploadError, setUploadError] = useState(\"\");\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\") {\n//       const file = files ? files[0] : null;\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 10 * 1024 * 1024) {\n//           setUploadError(\"Only PDF or DOC files under 10MB are allowed.\");\n//           return;\n//         }\n//         setFormData({ ...formData, Resume: file });\n//         setValidationErrors({ ...validationErrors, Resume: \"\" });\n//       }\n//     } else {\n//       setFormData({ ...formData, [id]: value });\n//       // Remove any existing error for this field\n//       const newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       // Skip validation for Resume here, since it's handled separately\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//       }\n//     });\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//     }\n//     setValidationErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       // Form is valid\n//       console.log(\"Form Data Submitted:\", formData);\n//       setShowPopup(true);\n//       // Here you would typically send formData to your server\n//       // console.log(formData);\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//   };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {Object.keys(formData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div className=\"mb-4\" key={key}>\n//                   <label\n//                     htmlFor={key}\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     id={key}\n//                     type={key === \"EmailId\" ? \"email\" : \"text\"}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                     placeholder={`Enter ${key}`}\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <div className=\"mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md\">\n//                 <div className=\"space-y-1 text-center\">\n//                   <svg\n//                     className=\"mx-auto h-12 w-12 text-white\"\n//                     stroke=\"currentColor\"\n//                     fill=\"none\"\n//                     viewBox=\"0 0 48 48\"\n//                     aria-hidden=\"true\"\n//                   >\n//                     <path\n//                       d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\n//                       strokeWidth=\"2\"\n//                       strokeLinecap=\"round\"\n//                       strokeLinejoin=\"round\"\n//                     />\n//                   </svg>\n//                   <div className=\"flex text-sm text-gray-600\">\n//                     <label\n//                       htmlFor=\"file-upload\"\n//                       className=\"relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500\"\n//                     >\n//                       <span>Upload a file</span>\n//                       <input\n//                         id=\"file-upload\"\n//                         name=\"file-upload\"\n//                         type=\"file\"\n//                         className=\"sr-only\"\n//                         onChange={handleInputChange}\n//                       />\n//                     </label>\n//                     <p className=\"pl-1 text-white\">or drag and drop</p>\n//                   </div>\n//                   <p className=\"text-xs text-white\">PDF, DOC up to 10MB</p>\n//                   {uploadError && (\n//                     <p className=\"text-red-500 mt-1\">{uploadError}</p>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SuccessPage;","map":{"version":3,"names":[],"sources":["/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n\n// const SuccessPage = () => {\n//   const [formData, setFormData] = useState({\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormatingNeeded: \"\",\n//     FormatedBy: \"\",\n//     Password: \"\",\n//     PasswordConfirmation: \"\",\n//     Resume: null,\n//   });\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const [uploadError, setUploadError] = useState(\"\");\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\") {\n//       const file = files ? files[0] : null;\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 10 * 1024 * 1024) {\n//           setUploadError(\"Only PDF or DOC files under 10MB are allowed.\");\n//           return;\n//         }\n//         setFormData({ ...formData, Resume: file });\n//         setValidationErrors({ ...validationErrors, Resume: \"\" });\n//       }\n//     } else {\n//       setFormData({ ...formData, [id]: value });\n//       // Remove any existing error for this field\n//       const newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       // Skip validation for Resume here, since it's handled separately\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//       }\n//     });\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//     }\n//     setValidationErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       // Form is valid\n//       console.log(\"Form Data Submitted:\", formData);\n//       setShowPopup(true);\n//       // Here you would typically send formData to your server\n//       // console.log(formData);\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//   };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {Object.keys(formData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div className=\"mb-4\" key={key}>\n//                   <label\n//                     htmlFor={key}\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     id={key}\n//                     type={key === \"EmailId\" ? \"email\" : \"text\"}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                     placeholder={`Enter ${key}`}\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <div className=\"mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md\">\n//                 <div className=\"space-y-1 text-center\">\n//                   <svg\n//                     className=\"mx-auto h-12 w-12 text-white\"\n//                     stroke=\"currentColor\"\n//                     fill=\"none\"\n//                     viewBox=\"0 0 48 48\"\n//                     aria-hidden=\"true\"\n//                   >\n//                     <path\n//                       d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\n//                       strokeWidth=\"2\"\n//                       strokeLinecap=\"round\"\n//                       strokeLinejoin=\"round\"\n//                     />\n//                   </svg>\n//                   <div className=\"flex text-sm text-gray-600\">\n//                     <label\n//                       htmlFor=\"file-upload\"\n//                       className=\"relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500\"\n//                     >\n//                       <span>Upload a file</span>\n//                       <input\n//                         id=\"file-upload\"\n//                         name=\"file-upload\"\n//                         type=\"file\"\n//                         className=\"sr-only\"\n//                         onChange={handleInputChange}\n//                       />\n//                     </label>\n//                     <p className=\"pl-1 text-white\">or drag and drop</p>\n//                   </div>\n//                   <p className=\"text-xs text-white\">PDF, DOC up to 10MB</p>\n//                   {uploadError && (\n//                     <p className=\"text-red-500 mt-1\">{uploadError}</p>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SuccessPage;\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}