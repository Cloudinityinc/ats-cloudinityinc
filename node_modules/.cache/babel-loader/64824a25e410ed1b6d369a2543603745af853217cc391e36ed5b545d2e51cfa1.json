{"ast":null,"code":"var _jsxFileName = \"/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useState, useRef } from \"react\";\n// // import axios from \"axios\";\n\n// // const SuccessPage = () => {\n// //   const initialFormData = {\n// //     FullName: \"\",\n// //     RequiredID: \"\",\n// //     RequiredTitle: \"\",\n// //     Role: \"\",\n// //     RequiredCreationDate: \"\",\n// //     VendorID: \"\",\n// //     ImmigrationStatus: \"\",\n// //     ContractType: \"\",\n// //     SubmissionDate: \"\",\n// //     RequiredSubmissionEndDate: \"\",\n// //     CandidateCurrentLocation: \"\",\n// //     ContactNumber: \"\",\n// //     RecruiterName: \"\",\n// //     State: \"\",\n// //     SubmissionStatus: \"\",\n// //     VendorRate: \"\",\n// //     CandidatePayRate: \"\",\n// //     BillRateMargin: \"\",\n// //     ResumeSource: \"\",\n// //     EmailId: \"\",\n// //     LinkedInID: \"\",\n// //     EmployerInformation: \"\",\n// //     ProfessionalReferences: \"\",\n// //     DOB: \"\",\n// //     RequiredSkills: \"\",\n// //     ResumeFormatingNeeded: \"\",\n// //     FormatedBy: \"\",\n// //     // Resume: null,\n// //   };\n\n// //   const [formData, setFormData] = useState(initialFormData);\n// //   const [validationErrors, setValidationErrors] = useState({});\n// //   const [showPopup, setShowPopup] = useState(false);\n// //   const resumeInputRef = useRef(null); // Create a ref for the resume input\n\n// //   const isValidEmail = (email) => {\n// //     return /\\S+@\\S+\\.\\S+/.test(email);\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { id, value, files } = e.target;\n// //     if (id === \"Resume\" && files) {\n// //       const file = files[0];\n// //       if (file) {\n// //         const allowedTypes = [\n// //           \"application/pdf\",\n// //           \"application/msword\",\n// //           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n// //         ];\n// //         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n// //           setValidationErrors({\n// //             ...validationErrors,\n// //             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n// //           });\n// //         } else {\n// //           setFormData({\n// //             ...formData,\n// //             Resume: file,\n// //           });\n// //           let newErrors = { ...validationErrors };\n// //           delete newErrors.Resume;\n// //           setValidationErrors(newErrors);\n// //         }\n// //       }\n// //     } else {\n// //       setFormData({\n// //         ...formData,\n// //         [id]: value,\n// //       });\n// //       let newErrors = { ...validationErrors };\n// //       delete newErrors[id];\n// //       setValidationErrors(newErrors);\n// //     }\n// //   };\n\n// //   const validateForm = () => {\n// //     let isValid = true;\n// //     const newErrors = {};\n// //     Object.keys(formData).forEach((key) => {\n// //       if (!formData[key] && key !== \"Resume\") {\n// //         newErrors[key] = \"This field is required.\";\n// //         isValid = false;\n// //       }\n// //     });\n// //     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n// //       newErrors.EmailId = \"Invalid email format.\";\n// //       isValid = false;\n// //     }\n\n// //     if (!formData.Resume) {\n// //       newErrors.Resume = \"Please upload a resume.\";\n// //       isValid = false;\n// //     }\n\n// //     setValidationErrors(newErrors);\n// //     return isValid;\n// //   };\n\n// //   const handleSubmit = async (event) => {\n// //     event.preventDefault();\n// //     if (validateForm()) {\n// //       console.log(\"Form Data Submitted:\", formData);\n// //       setShowPopup(true);\n// //     }\n// //     event.preventDefault();\n// //     if (validateForm()) {\n// //       try {\n// //         // 1. Upload the resume to S3\n// //         const s3UploadResponse = await uploadResumeToS3(formData.Resume);\n\n// //         // 2. If the S3 upload is successful, proceed to submit the form data\n// //         if (s3UploadResponse.success) {\n// //           console.log(\"Form Data Submitted:\", formData);\n// //           setShowPopup(true);\n// //         } else {\n// //           // Handle S3 upload error\n// //           console.error(\"S3 Upload Error:\", s3UploadResponse.error);\n// //         }\n// //       } catch (error) {\n// //         // Handle any other errors that may occur during the process\n// //         console.error(\"Submission Error:\", error);\n// //       }\n// //     }\n// //   };\n\n// //   // Function to upload resume to S3\n// //   const uploadResumeToS3 = async (resumeFile) => {\n// //     try {\n// //       // Create a FormData object to send the file\n// //       const formData = new FormData();\n// //       formData.append(\"resume\", resumeFile);\n\n// //       // Make a POST request to your API endpoint for S3 upload\n// //       const response = await fetch(\n// //         \"https://8t9nfrdxf9.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}\",\n// //         {\n// //           method: \"POST\",\n// //           body: formData,\n// //         }\n// //       );\n\n// //       if (response.ok) {\n// //         // S3 upload successful\n// //         return { success: true };\n// //       } else {\n// //         // S3 upload failed, return the error message\n// //         const errorData = await response.json();\n// //         return { success: false, error: errorData.message };\n// //       }\n// //     } catch (error) {\n// //       // Handle any errors that occur during the upload process\n// //       return { success: false, error: error.message };\n// //     }\n// //   };\n\n// //   const handleClosePopup = () => {\n// //     setShowPopup(false);\n// //     setFormData(initialFormData);\n// //     setValidationErrors({});\n// //     if (resumeInputRef.current) {\n// //       resumeInputRef.current.value = \"\"; // Clear the file input\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n// //         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n// //           Employee Information Form\n// //         </h1>\n// //         <form onSubmit={handleSubmit}>\n// //           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n// //             {/* Dynamically generate input fields based on formData */}\n// //             {Object.keys(initialFormData)\n// //               .filter((key) => key !== \"Resume\")\n// //               .map((key) => (\n// //                 <div key={key} className=\"mb-4\">\n// //                   <label\n// //                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n// //                     htmlFor={key}\n// //                   >\n// //                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n// //                   </label>\n// //                   <input\n// //                     type=\"text\"\n// //                     id={key}\n// //                     value={formData[key]}\n// //                     onChange={handleInputChange}\n// //                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n// //                   />\n// //                   {validationErrors[key] && (\n// //                     <p className=\"text-red-500 text-xs italic\">\n// //                       {validationErrors[key]}\n// //                     </p>\n// //                   )}\n// //                 </div>\n// //               ))}\n// //             <div className=\"mb-4\">\n// //               <label className=\"block text-sm font-medium text-white\">\n// //                 Resume\n// //               </label>\n// //               <input\n// //                 id=\"Resume\"\n// //                 name=\"Resume\"\n// //                 type=\"file\"\n// //                 onChange={handleInputChange}\n// //                 ref={resumeInputRef} // Assign the ref to the file input\n// //                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n// //               />\n// //               {validationErrors.Resume && (\n// //                 <p className=\"text-red-500 text-xs italic\">\n// //                   {validationErrors.Resume}\n// //                 </p>\n// //               )}\n// //             </div>\n// //             <button\n// //               type=\"submit\"\n// //               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n// //             >\n// //               Submit\n// //             </button>\n// //           </div>\n// //         </form>\n// //       </section>\n// //       {showPopup && (\n// //         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n// //           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n// //             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n// //             <p>Your form has been submitted successfully.</p>\n// //             <button\n// //               onClick={handleClosePopup}\n// //               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n// //             >\n// //               Close\n// //             </button>\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default SuccessPage;\n\n// //2\n\n// import React, { useState, useRef } from \"react\";\n// import axios from \"axios\"; // Ensure axios is installed via npm or yarn\n\n// const SuccessPage = () => {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormatingNeeded: \"\",\n//     FormatedBy: \"\",\n//     // Resume is initially null; it will be set to the file object when a file is selected\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => /\\S+@\\S+\\.\\S+/.test(email);\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors((prevErrors) => ({\n//             ...prevErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           }));\n//         } else {\n//           setFormData((prevFormData) => ({\n//             ...prevFormData,\n//             Resume: file,\n//           }));\n//           setValidationErrors((prevErrors) => {\n//             const newErrors = { ...prevErrors };\n//             delete newErrors.Resume;\n//             return newErrors;\n//           });\n//         }\n//       }\n//     } else {\n//       setFormData((prevFormData) => ({\n//         ...prevFormData,\n//         [id]: value,\n//       }));\n//       setValidationErrors((prevErrors) => {\n//         const newErrors = { ...prevErrors };\n//         delete newErrors[id];\n//         return newErrors;\n//       });\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   // const uploadResumeToS3 = async (file) => {\n//   //   const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`; // Replace with your actual upload URL\n//   //   try {\n//   //     const formData = new FormData();\n//   //     formData.append(\"file\", file); // Ensure your API expects the file under this key\n//   //     const response = await axios.post(url, formData, {\n//   //       headers: {\n//   //         \"Content-Type\": \"multipart/form-data\",\n//   //       },\n//   //     });\n//   //     return { success: true, data: response.data };\n//   //   } catch (error) {\n//   //     return { success: false, error: error.message };\n//   //   }\n//   // };\n\n//   const uploadResumeToS3 = async (file) => {\n//     const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`;\n//     try {\n//       const formData = new FormData();\n//       formData.append(\"file\", file);\n//       await axios.post(url, formData, {\n//         // Notice the removal of `response =`\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//         },\n//       });\n//       return { success: true };\n//     } catch (error) {\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   // const submitFormData = async (data) => {\n//   //   try {\n//   //     const url =\n//   //       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//   //     // Assuming your server expects JSON data:\n//   //     const response = await axios.post(url, JSON.stringify(data), {\n//   //       headers: {\n//   //         \"Content-Type\": \"application/json\",\n//   //         // Add any other required headers here, like authentication tokens\n//   //       },\n//   //     });\n//   //     return { success: true };\n//   //   } catch (error) {\n//   //     console.error(\"Error submitting form data:\", error);\n//   //     return { success: false, error: error.message };\n//   //   }\n//   // };\n\n//   const submitFormData = async (data) => {\n//     try {\n//       const url =\n//         \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n\n//       // Ensure data is correctly structured for your API's expectations\n//       const payload = JSON.stringify(data);\n\n//       const response = await axios.post(url, payload, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       console.log(\"Submission response:\", response.data); // Log the response data for debugging\n//       return { success: true, data: response.data };\n//     } catch (error) {\n//       console.error(\n//         \"Error submitting form data:\",\n//         error.response ? error.response.data : error.message\n//       );\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       // Attempt to upload the resume before submitting form data\n//       if (formData.Resume) {\n//         const uploadResponse = await uploadResumeToS3(formData.Resume);\n//         if (uploadResponse.success) {\n//           console.log(\n//             \"Resume uploaded successfully. Proceeding with form submission.\"\n//           );\n//           // Prepare form data for submission (excluding the file itself)\n//           const dataToSubmit = { ...formData, Resume: undefined };\n//           const formSubmitResponse = await submitFormData(dataToSubmit);\n//           if (formSubmitResponse.success) {\n//             console.log(\"Form data submitted successfully.\");\n//             setShowPopup(true); // Show success popup\n//           } else {\n//             // Handle form submission error\n//             console.error(\n//               \"Failed to submit form data:\",\n//               formSubmitResponse.error\n//             );\n//           }\n//         } else {\n//           console.error(\"Failed to upload resume:\", uploadResponse.error);\n//         }\n//       }\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData); // Reset form\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\"; // Clear the file input\n//     }\n//   };\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                     htmlFor={key}\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors.Resume && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Resume}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SuccessPage;\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadForm() {\n  _s();\n  const [formData, setFormData] = useState({\n    FullName: \"\",\n    ReqId: \"\"\n  });\n  const [resume, setResume] = useState(null);\n\n  // Handles changes in text inputs\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n\n  // Handles resume file selection\n  const handleResumeChange = e => {\n    setResume(e.target.files[0]);\n  };\n\n  // Handles the form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await uploadDetails(formData, resume);\n  };\n\n  // Uploads form details and the resume file\n  async function uploadDetails(details, file) {\n    // First, upload the resume to S3\n    const fileData = new FormData();\n    fileData.append(\"file\", file);\n    try {\n      const uploadResponse = await fetch(\"https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}\", {\n        method: \"POST\",\n        body: fileData\n      });\n      const uploadResult = await uploadResponse.json();\n\n      // If the file upload is successful, send form details to DynamoDB\n      if (uploadResult.success) {\n        const detailsResponse = await fetch(\"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: details.name,\n            email: details.email,\n            resumeUrl: uploadResult.fileUrl // Assuming the S3 upload returns the file URL\n          })\n        });\n        const detailsResult = await detailsResponse.json();\n        if (detailsResult.success) {\n          alert(\"Form submitted successfully!\");\n        } else {\n          alert(\"Failed to submit form details.\");\n        }\n      } else {\n        alert(\"Failed to upload resume.\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      alert(\"An error occurred while submitting the form.\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"FullName\",\n      placeholder: \"FullName\",\n      value: formData.FullName,\n      onChange: handleChange,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"ReqId\" // This should match the key in your formData state\n      ,\n      placeholder: \"ReqId\",\n      value: formData.ReqId // Make sure this matches the corrected name attribute\n      ,\n      onChange: handleChange,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"resume\",\n      onChange: handleResumeChange,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 625,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadForm, \"kCXaFZPYZcH0TjNBGU/cevmWSNQ=\");\n_c = UploadForm;\nexport default UploadForm;\nvar _c;\n$RefreshReg$(_c, \"UploadForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UploadForm","_s","formData","setFormData","FullName","ReqId","resume","setResume","handleChange","e","name","value","target","prevState","handleResumeChange","files","handleSubmit","preventDefault","uploadDetails","details","file","fileData","FormData","append","uploadResponse","fetch","method","body","uploadResult","json","success","detailsResponse","headers","JSON","stringify","email","resumeUrl","fileUrl","detailsResult","alert","error","console","onSubmit","children","type","placeholder","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx"],"sourcesContent":["// // import React, { useState, useRef } from \"react\";\n// // import axios from \"axios\";\n\n// // const SuccessPage = () => {\n// //   const initialFormData = {\n// //     FullName: \"\",\n// //     RequiredID: \"\",\n// //     RequiredTitle: \"\",\n// //     Role: \"\",\n// //     RequiredCreationDate: \"\",\n// //     VendorID: \"\",\n// //     ImmigrationStatus: \"\",\n// //     ContractType: \"\",\n// //     SubmissionDate: \"\",\n// //     RequiredSubmissionEndDate: \"\",\n// //     CandidateCurrentLocation: \"\",\n// //     ContactNumber: \"\",\n// //     RecruiterName: \"\",\n// //     State: \"\",\n// //     SubmissionStatus: \"\",\n// //     VendorRate: \"\",\n// //     CandidatePayRate: \"\",\n// //     BillRateMargin: \"\",\n// //     ResumeSource: \"\",\n// //     EmailId: \"\",\n// //     LinkedInID: \"\",\n// //     EmployerInformation: \"\",\n// //     ProfessionalReferences: \"\",\n// //     DOB: \"\",\n// //     RequiredSkills: \"\",\n// //     ResumeFormatingNeeded: \"\",\n// //     FormatedBy: \"\",\n// //     // Resume: null,\n// //   };\n\n// //   const [formData, setFormData] = useState(initialFormData);\n// //   const [validationErrors, setValidationErrors] = useState({});\n// //   const [showPopup, setShowPopup] = useState(false);\n// //   const resumeInputRef = useRef(null); // Create a ref for the resume input\n\n// //   const isValidEmail = (email) => {\n// //     return /\\S+@\\S+\\.\\S+/.test(email);\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { id, value, files } = e.target;\n// //     if (id === \"Resume\" && files) {\n// //       const file = files[0];\n// //       if (file) {\n// //         const allowedTypes = [\n// //           \"application/pdf\",\n// //           \"application/msword\",\n// //           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n// //         ];\n// //         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n// //           setValidationErrors({\n// //             ...validationErrors,\n// //             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n// //           });\n// //         } else {\n// //           setFormData({\n// //             ...formData,\n// //             Resume: file,\n// //           });\n// //           let newErrors = { ...validationErrors };\n// //           delete newErrors.Resume;\n// //           setValidationErrors(newErrors);\n// //         }\n// //       }\n// //     } else {\n// //       setFormData({\n// //         ...formData,\n// //         [id]: value,\n// //       });\n// //       let newErrors = { ...validationErrors };\n// //       delete newErrors[id];\n// //       setValidationErrors(newErrors);\n// //     }\n// //   };\n\n// //   const validateForm = () => {\n// //     let isValid = true;\n// //     const newErrors = {};\n// //     Object.keys(formData).forEach((key) => {\n// //       if (!formData[key] && key !== \"Resume\") {\n// //         newErrors[key] = \"This field is required.\";\n// //         isValid = false;\n// //       }\n// //     });\n// //     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n// //       newErrors.EmailId = \"Invalid email format.\";\n// //       isValid = false;\n// //     }\n\n// //     if (!formData.Resume) {\n// //       newErrors.Resume = \"Please upload a resume.\";\n// //       isValid = false;\n// //     }\n\n// //     setValidationErrors(newErrors);\n// //     return isValid;\n// //   };\n\n// //   const handleSubmit = async (event) => {\n// //     event.preventDefault();\n// //     if (validateForm()) {\n// //       console.log(\"Form Data Submitted:\", formData);\n// //       setShowPopup(true);\n// //     }\n// //     event.preventDefault();\n// //     if (validateForm()) {\n// //       try {\n// //         // 1. Upload the resume to S3\n// //         const s3UploadResponse = await uploadResumeToS3(formData.Resume);\n\n// //         // 2. If the S3 upload is successful, proceed to submit the form data\n// //         if (s3UploadResponse.success) {\n// //           console.log(\"Form Data Submitted:\", formData);\n// //           setShowPopup(true);\n// //         } else {\n// //           // Handle S3 upload error\n// //           console.error(\"S3 Upload Error:\", s3UploadResponse.error);\n// //         }\n// //       } catch (error) {\n// //         // Handle any other errors that may occur during the process\n// //         console.error(\"Submission Error:\", error);\n// //       }\n// //     }\n// //   };\n\n// //   // Function to upload resume to S3\n// //   const uploadResumeToS3 = async (resumeFile) => {\n// //     try {\n// //       // Create a FormData object to send the file\n// //       const formData = new FormData();\n// //       formData.append(\"resume\", resumeFile);\n\n// //       // Make a POST request to your API endpoint for S3 upload\n// //       const response = await fetch(\n// //         \"https://8t9nfrdxf9.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}\",\n// //         {\n// //           method: \"POST\",\n// //           body: formData,\n// //         }\n// //       );\n\n// //       if (response.ok) {\n// //         // S3 upload successful\n// //         return { success: true };\n// //       } else {\n// //         // S3 upload failed, return the error message\n// //         const errorData = await response.json();\n// //         return { success: false, error: errorData.message };\n// //       }\n// //     } catch (error) {\n// //       // Handle any errors that occur during the upload process\n// //       return { success: false, error: error.message };\n// //     }\n// //   };\n\n// //   const handleClosePopup = () => {\n// //     setShowPopup(false);\n// //     setFormData(initialFormData);\n// //     setValidationErrors({});\n// //     if (resumeInputRef.current) {\n// //       resumeInputRef.current.value = \"\"; // Clear the file input\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n// //         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n// //           Employee Information Form\n// //         </h1>\n// //         <form onSubmit={handleSubmit}>\n// //           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n// //             {/* Dynamically generate input fields based on formData */}\n// //             {Object.keys(initialFormData)\n// //               .filter((key) => key !== \"Resume\")\n// //               .map((key) => (\n// //                 <div key={key} className=\"mb-4\">\n// //                   <label\n// //                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n// //                     htmlFor={key}\n// //                   >\n// //                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n// //                   </label>\n// //                   <input\n// //                     type=\"text\"\n// //                     id={key}\n// //                     value={formData[key]}\n// //                     onChange={handleInputChange}\n// //                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n// //                   />\n// //                   {validationErrors[key] && (\n// //                     <p className=\"text-red-500 text-xs italic\">\n// //                       {validationErrors[key]}\n// //                     </p>\n// //                   )}\n// //                 </div>\n// //               ))}\n// //             <div className=\"mb-4\">\n// //               <label className=\"block text-sm font-medium text-white\">\n// //                 Resume\n// //               </label>\n// //               <input\n// //                 id=\"Resume\"\n// //                 name=\"Resume\"\n// //                 type=\"file\"\n// //                 onChange={handleInputChange}\n// //                 ref={resumeInputRef} // Assign the ref to the file input\n// //                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n// //               />\n// //               {validationErrors.Resume && (\n// //                 <p className=\"text-red-500 text-xs italic\">\n// //                   {validationErrors.Resume}\n// //                 </p>\n// //               )}\n// //             </div>\n// //             <button\n// //               type=\"submit\"\n// //               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n// //             >\n// //               Submit\n// //             </button>\n// //           </div>\n// //         </form>\n// //       </section>\n// //       {showPopup && (\n// //         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n// //           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n// //             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n// //             <p>Your form has been submitted successfully.</p>\n// //             <button\n// //               onClick={handleClosePopup}\n// //               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n// //             >\n// //               Close\n// //             </button>\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default SuccessPage;\n\n// //2\n\n// import React, { useState, useRef } from \"react\";\n// import axios from \"axios\"; // Ensure axios is installed via npm or yarn\n\n// const SuccessPage = () => {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormatingNeeded: \"\",\n//     FormatedBy: \"\",\n//     // Resume is initially null; it will be set to the file object when a file is selected\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => /\\S+@\\S+\\.\\S+/.test(email);\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors((prevErrors) => ({\n//             ...prevErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           }));\n//         } else {\n//           setFormData((prevFormData) => ({\n//             ...prevFormData,\n//             Resume: file,\n//           }));\n//           setValidationErrors((prevErrors) => {\n//             const newErrors = { ...prevErrors };\n//             delete newErrors.Resume;\n//             return newErrors;\n//           });\n//         }\n//       }\n//     } else {\n//       setFormData((prevFormData) => ({\n//         ...prevFormData,\n//         [id]: value,\n//       }));\n//       setValidationErrors((prevErrors) => {\n//         const newErrors = { ...prevErrors };\n//         delete newErrors[id];\n//         return newErrors;\n//       });\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   // const uploadResumeToS3 = async (file) => {\n//   //   const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`; // Replace with your actual upload URL\n//   //   try {\n//   //     const formData = new FormData();\n//   //     formData.append(\"file\", file); // Ensure your API expects the file under this key\n//   //     const response = await axios.post(url, formData, {\n//   //       headers: {\n//   //         \"Content-Type\": \"multipart/form-data\",\n//   //       },\n//   //     });\n//   //     return { success: true, data: response.data };\n//   //   } catch (error) {\n//   //     return { success: false, error: error.message };\n//   //   }\n//   // };\n\n//   const uploadResumeToS3 = async (file) => {\n//     const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`;\n//     try {\n//       const formData = new FormData();\n//       formData.append(\"file\", file);\n//       await axios.post(url, formData, {\n//         // Notice the removal of `response =`\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//         },\n//       });\n//       return { success: true };\n//     } catch (error) {\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   // const submitFormData = async (data) => {\n//   //   try {\n//   //     const url =\n//   //       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//   //     // Assuming your server expects JSON data:\n//   //     const response = await axios.post(url, JSON.stringify(data), {\n//   //       headers: {\n//   //         \"Content-Type\": \"application/json\",\n//   //         // Add any other required headers here, like authentication tokens\n//   //       },\n//   //     });\n//   //     return { success: true };\n//   //   } catch (error) {\n//   //     console.error(\"Error submitting form data:\", error);\n//   //     return { success: false, error: error.message };\n//   //   }\n//   // };\n\n//   const submitFormData = async (data) => {\n//     try {\n//       const url =\n//         \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n\n//       // Ensure data is correctly structured for your API's expectations\n//       const payload = JSON.stringify(data);\n\n//       const response = await axios.post(url, payload, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       console.log(\"Submission response:\", response.data); // Log the response data for debugging\n//       return { success: true, data: response.data };\n//     } catch (error) {\n//       console.error(\n//         \"Error submitting form data:\",\n//         error.response ? error.response.data : error.message\n//       );\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       // Attempt to upload the resume before submitting form data\n//       if (formData.Resume) {\n//         const uploadResponse = await uploadResumeToS3(formData.Resume);\n//         if (uploadResponse.success) {\n//           console.log(\n//             \"Resume uploaded successfully. Proceeding with form submission.\"\n//           );\n//           // Prepare form data for submission (excluding the file itself)\n//           const dataToSubmit = { ...formData, Resume: undefined };\n//           const formSubmitResponse = await submitFormData(dataToSubmit);\n//           if (formSubmitResponse.success) {\n//             console.log(\"Form data submitted successfully.\");\n//             setShowPopup(true); // Show success popup\n//           } else {\n//             // Handle form submission error\n//             console.error(\n//               \"Failed to submit form data:\",\n//               formSubmitResponse.error\n//             );\n//           }\n//         } else {\n//           console.error(\"Failed to upload resume:\", uploadResponse.error);\n//         }\n//       }\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData); // Reset form\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\"; // Clear the file input\n//     }\n//   };\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                     htmlFor={key}\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors.Resume && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Resume}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SuccessPage;\n\nimport React, { useState } from \"react\";\n\nfunction UploadForm() {\n  const [formData, setFormData] = useState({\n    FullName: \"\",\n    ReqId: \"\",\n  });\n  const [resume, setResume] = useState(null);\n\n  // Handles changes in text inputs\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  // Handles resume file selection\n  const handleResumeChange = (e) => {\n    setResume(e.target.files[0]);\n  };\n\n  // Handles the form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    await uploadDetails(formData, resume);\n  };\n\n  // Uploads form details and the resume file\n  async function uploadDetails(details, file) {\n    // First, upload the resume to S3\n    const fileData = new FormData();\n    fileData.append(\"file\", file);\n\n    try {\n      const uploadResponse = await fetch(\n        \"https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}\",\n        {\n          method: \"POST\",\n          body: fileData,\n        }\n      );\n      const uploadResult = await uploadResponse.json();\n\n      // If the file upload is successful, send form details to DynamoDB\n      if (uploadResult.success) {\n        const detailsResponse = await fetch(\n          \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              name: details.name,\n              email: details.email,\n              resumeUrl: uploadResult.fileUrl, // Assuming the S3 upload returns the file URL\n            }),\n          }\n        );\n        const detailsResult = await detailsResponse.json();\n        if (detailsResult.success) {\n          alert(\"Form submitted successfully!\");\n        } else {\n          alert(\"Failed to submit form details.\");\n        }\n      } else {\n        alert(\"Failed to upload resume.\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      alert(\"An error occurred while submitting the form.\");\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"FullName\"\n        placeholder=\"FullName\"\n        value={formData.FullName}\n        onChange={handleChange}\n        required\n      />\n      <input\n        type=\"text\"\n        name=\"ReqId\" // This should match the key in your formData state\n        placeholder=\"ReqId\"\n        value={formData.ReqId} // Make sure this matches the corrected name attribute\n        onChange={handleChange}\n        required\n      />\n      <input type=\"file\" name=\"resume\" onChange={handleResumeChange} required />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default UploadForm;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}