{"ast":null,"code":"var _jsxFileName = \"/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SuccessPage() {\n  _s();\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormattingNeeded: \"\",\n    FormattedBy: \"\",\n    Resume: null // Placeholder for the resume file\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const resumeInputRef = useRef(null);\n  const isValidEmail = email => {\n    return /\\S+@\\S+\\.\\S+/.test(email);\n  };\n  const handleInputChange = e => {\n    const {\n      id,\n      value,\n      files\n    } = e.target;\n    if (id === \"Resume\" && files) {\n      const file = files[0];\n      if (file) {\n        const allowedTypes = [\"application/pdf\", \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"];\n        if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n          setValidationErrors({\n            ...validationErrors,\n            Resume: \"Only PDF or DOC files under 10MB are allowed.\"\n          });\n        } else {\n          setFormData({\n            ...formData,\n            Resume: file\n          });\n          let newErrors = {\n            ...validationErrors\n          };\n          delete newErrors.Resume;\n          setValidationErrors(newErrors);\n        }\n      }\n    } else {\n      setFormData({\n        ...formData,\n        [id]: value\n      });\n      let newErrors = {\n        ...validationErrors\n      };\n      delete newErrors[id];\n      setValidationErrors(newErrors);\n    }\n  };\n  const validateForm = () => {\n    let isValid = true;\n    const newErrors = {};\n    Object.keys(formData).forEach(key => {\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n        isValid = false;\n      }\n    });\n    if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n      newErrors.EmailId = \"Invalid email format.\";\n      isValid = false;\n    }\n    if (!formData.Resume) {\n      newErrors.Resume = \"Please upload a resume.\";\n      isValid = false;\n    }\n    setValidationErrors(newErrors);\n    return isValid;\n  };\n  const uploadResume = async file => {\n    const filename = encodeURIComponent(file.name);\n    // const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n\n    const fileData = new FormData();\n    fileData.append(\"file\", file);\n    try {\n      const response = await fetch(uploadUrl, {\n        method: \"POST\",\n        body: fileData\n      });\n      const data = await response.json();\n      console.log(\"Server response:\", data);\n      if (!response.ok) {\n        throw new Error(`Server responded with status: ${response.status}`);\n      }\n\n      // Since the server confirms success but doesn't provide a URL, log the success and maybe return a success message instead\n      if (data.message === \"File uploaded successfully\") {\n        console.log(data.message);\n        // Return a static message or a mock URL, or adjust as needed\n        return \"Upload successful, no URL provided\"; // Placeholder return value\n      } else {\n        throw new Error(\"Unexpected server response, upload may not be successful.\");\n      }\n    } catch (error) {\n      console.error(\"Upload Error:\", error);\n      throw error;\n    }\n  };\n\n  //Dynamo DB API Call\n\n  const submitForm = async () => {\n    // Assuming you have an API endpoint to submit form data to DynamoDB\n    const submitUrl = \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n    try {\n      const response = await fetch(submitUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      if (!response.ok) throw new Error(\"Failed to submit form.\");\n      return await response.json(); // or handle success without expecting a return value\n    } catch (error) {\n      console.error(\"Submission error:\", error);\n      throw error;\n    }\n  };\n\n  //Working Submit Function for storing resume in S3 bucket\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n\n  //   if (!validateForm()) {\n  //     console.log(\"Form validation failed\", validationErrors);\n  //     return;\n  //   }\n\n  //   if (formData.Resume) {\n  //     try {\n  //       // Note: `uploadResult` now may not be a URL but a success message\n  //       const uploadResult = await uploadResume(formData.Resume);\n  //       console.log(uploadResult); // Log the success message or handle as needed\n\n  //       // Proceed with the rest of your form submission logic\n  //       console.log(\"Form Data:\", JSON.stringify(formData, null, 2));\n  //       setShowPopup(true);\n  //     } catch (error) {\n  //       alert(\"Failed to upload resume: \" + error.message);\n  //     }\n  //   } else {\n  //     alert(\"Please select a resume to upload.\");\n  //   }\n  // };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    setIsSubmitting(true);\n    try {\n      if (formData.Resume) {\n        const resumeUrl = await uploadResume(formData.Resume);\n        // Update formData with the resume URL for submission\n        const updatedFormData = {\n          ...formData,\n          ResumeUrl: resumeUrl\n        };\n        await submitForm(updatedFormData);\n        setShowPopup(true); // Show success message\n        setFormData(initialFormData); // Reset form\n      } else {\n        // Handle the case where a resume is required but not uploaded\n        throw new Error(\"Resume is required.\");\n      }\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  const handleClosePopup = () => {\n    setShowPopup(false);\n    setFormData(initialFormData);\n    setValidationErrors({});\n    if (resumeInputRef.current) {\n      resumeInputRef.current.value = \"\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl font-bold text-white capitalize dark:text-white\",\n        children: \"Employee Information Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\",\n          children: [Object.keys(initialFormData).filter(key => key !== \"Resume\").map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: key,\n              className: \"text-white dark:text-gray-200 block text-sm font-bold mb-2\",\n              children: key.replace(/([A-Z])/g, \" $1\").trim()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: key,\n              name: key,\n              value: formData[key],\n              onChange: handleInputChange,\n              className: \"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 19\n            }, this), validationErrors[key] && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-red-500 text-xs italic\",\n              children: validationErrors[key]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 21\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"Resume\",\n              className: \"block text-sm font-medium text-white\",\n              children: \"Resume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"Resume\",\n              name: \"Resume\",\n              type: \"file\",\n              onChange: handleInputChange,\n              ref: resumeInputRef,\n              className: \"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), validationErrors[\"Resume\"] && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-red-500 text-xs italic\",\n              children: validationErrors[\"Resume\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-5 rounded-lg shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg mb-4\",\n          children: \"Submission Successful\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your form has been submitted successfully.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClosePopup,\n          disabled: isSubmitting,\n          className: \"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n}\n_s(SuccessPage, \"osro9qDtlEGVyyuyGb/+RYuMuFY=\");\n_c = SuccessPage;\nexport default SuccessPage;\n\n// Upload form to dynamoDB\n// import React, { useState } from \"react\";\n\n// function App() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//     // Add other form fields as needed\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsSubmitting(true);\n\n//     // Replace 'YOUR_DYNAMODB_API_ENDPOINT' with your actual DynamoDB API endpoint\n//     const apiEndpoint =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n\n//     try {\n//       const response = await fetch(apiEndpoint, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit form data\");\n//       }\n\n//       // Handle successful submission here (e.g., clear form, show message)\n//       console.log(\"Form submitted successfully\");\n//       setFormData(initialFormData); // Reset form\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//       // Handle submission error here (e.g., show error message)\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h2>Submit Form Data</h2>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Full Name:\n//           <input\n//             type=\"String\"\n//             name=\"FullName\"\n//             value={formData.FullName}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           ReqId:\n//           <input\n//             type=\"Number\"\n//             name=\"ReqId\"\n//             value={formData.ReqId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Email ID:\n//           <input\n//             type=\"String\"\n//             name=\"EmailId\"\n//             value={formData.EmailId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         {/* Add other fields as needed */}\n//         <button type=\"submit\" disabled={isSubmitting}>\n//           Submit\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//     // Additional form fields\n//     ResumeUrl: \"\", // This will hold the URL of the uploaded resume\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleFileChange = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setFormData({ ...formData, Resume: file });\n//     }\n//   };\n\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     const response = await fetch(uploadUrl, {\n//       method: \"POST\",\n//       body: fileData,\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(\"Failed to upload file.\");\n//     }\n\n//     const data = await response.json();\n//     return data.url; // Assuming the response contains the URL of the uploaded file\n//   };\n\n//   const submitFormDataToDynamoDB = async (data) => {\n//     const apiEndpoint =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     const response = await fetch(apiEndpoint, {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(data),\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(\"Failed to submit form data.\");\n//     }\n\n//     return await response.json(); // Assuming the API returns some response\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsSubmitting(true);\n\n//     try {\n//       if (formData.Resume) {\n//         const resumeUrl = await uploadResume(formData.Resume);\n//         const updatedFormData = { ...formData, ResumeUrl: resumeUrl };\n//         delete updatedFormData.Resume; // Remove the file object\n\n//         await submitFormDataToDynamoDB(updatedFormData);\n//         console.log(\"Form and resume submitted successfully\");\n//         setShowPopup(true);\n//         setFormData(initialFormData); // Reset form\n//       } else {\n//         throw new Error(\"Resume file is required.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Submission error:\", error);\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Submit Form and Resume</h2>\n//       <form onSubmit={handleSubmit}>\n//         {/* Form fields */}\n//         <input\n//           type=\"String\"\n//           name=\"FullName\"\n//           value={formData.FullName}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"String\"\n//           name=\"EmailId\"\n//           value={formData.EmailId}\n//           onChange={handleInputChange}\n//         />\n//         <label>\n//           ReqId:\n//           <input\n//             type=\"Number\"\n//             name=\"ReqId\"\n//             value={formData.ReqId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         {/* Include other fields as needed */}\n//         <input type=\"file\" onChange={handleFileChange} ref={resumeInputRef} />\n//         <button type=\"submit\" disabled={isSubmitting}>\n//           Submit\n//         </button>\n//       </form>\n\n//       {showPopup && (\n//         <div>\n//           <p>Your form has been submitted successfully.</p>\n//           <button onClick={() => setShowPopup(false)}>Close</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n// import React, { useState } from \"react\";\n\n// function FormPage() {\n//   const [formData, setFormData] = useState({\n//     fullName: \"\",\n//     email: \"\",\n//     // Add other fields as necessary\n//   });\n//   const [resume, setResume] = useState(null);\n//   const [showSuccessPopup, setShowSuccessPopup] = useState(false);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const handleResumeChange = (e) => {\n//     setResume(e.target.files[0]);\n//   };\n\n//   const uploadResumeToS3 = async (file) => {\n//     const uploadUrl = \"https://your-amazon-s3-api-url.com/upload\";\n//     // Fetch the pre-signed URL or direct S3 bucket upload URL here\n\n//     const formData = new FormData();\n//     formData.append(\"file\", file);\n\n//     const response = await fetch(uploadUrl, {\n//       method: \"POST\",\n//       body: formData,\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(\"Failed to upload resume\");\n//     }\n\n//     return response.json(); // Assuming the response includes the file URL\n//   };\n\n//   const submitFormToDynamoDB = async (data) => {\n//     const submissionUrl = \"https://your-dynamodb-api-url.com/submit\";\n\n//     const response = await fetch(submissionUrl, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(data),\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(\"Failed to submit form\");\n//     }\n\n//     return response.json(); // Assuming the API responds with success or relevant data\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsSubmitting(true);\n\n//     try {\n//       // First, upload the resume to S3\n//       const uploadResponse = await uploadResumeToS3(resume);\n//       const resumeUrl = uploadResponse.url; // Assuming the response contains the URL\n\n//       // Then, submit the form data along with the resume URL to DynamoDB\n//       await submitFormToDynamoDB({ ...formData, resumeUrl });\n\n//       // Show success popup\n//       setShowSuccessPopup(true);\n//     } catch (error) {\n//       alert(error.message); // Handle errors more gracefully in production\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           name=\"fullName\"\n//           value={formData.fullName}\n//           onChange={handleInputChange}\n//           placeholder=\"Full Name\"\n//         />\n//         <input\n//           type=\"email\"\n//           name=\"email\"\n//           value={formData.email}\n//           onChange={handleInputChange}\n//           placeholder=\"Email\"\n//         />\n//         {/* Add other input fields as necessary */}\n//         <input type=\"file\" onChange={handleResumeChange} />\n//         <button type=\"submit\" disabled={isSubmitting}>\n//           Submit\n//         </button>\n//       </form>\n\n//       {showSuccessPopup && (\n//         <div>\n//           <p>Your form has been successfully submitted.</p>\n//           <button onClick={() => setShowSuccessPopup(false)}>Close</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FormPage;\nvar _c;\n$RefreshReg$(_c, \"SuccessPage\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","SuccessPage","_s","initialFormData","FullName","RequiredID","RequiredTitle","Role","RequiredCreationDate","VendorID","ImmigrationStatus","ContractType","SubmissionDate","RequiredSubmissionEndDate","CandidateCurrentLocation","ContactNumber","RecruiterName","State","SubmissionStatus","VendorRate","CandidatePayRate","BillRateMargin","ResumeSource","EmailId","LinkedInID","EmployerInformation","ProfessionalReferences","DOB","RequiredSkills","ResumeFormattingNeeded","FormattedBy","Resume","formData","setFormData","validationErrors","setValidationErrors","showPopup","setShowPopup","isSubmitting","setIsSubmitting","resumeInputRef","isValidEmail","email","test","handleInputChange","e","id","value","files","target","file","allowedTypes","includes","type","size","newErrors","validateForm","isValid","Object","keys","forEach","key","uploadResume","filename","encodeURIComponent","name","fileData","FormData","append","response","fetch","uploadUrl","method","body","data","json","console","log","ok","Error","status","message","error","submitForm","submitUrl","headers","JSON","stringify","handleSubmit","preventDefault","resumeUrl","updatedFormData","ResumeUrl","alert","handleClosePopup","current","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","filter","map","htmlFor","replace","trim","onChange","ref","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\n\nfunction SuccessPage() {\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormattingNeeded: \"\",\n    FormattedBy: \"\",\n    Resume: null, // Placeholder for the resume file\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const resumeInputRef = useRef(null);\n\n  const isValidEmail = (email) => {\n    return /\\S+@\\S+\\.\\S+/.test(email);\n  };\n\n  const handleInputChange = (e) => {\n    const { id, value, files } = e.target;\n    if (id === \"Resume\" && files) {\n      const file = files[0];\n      if (file) {\n        const allowedTypes = [\n          \"application/pdf\",\n          \"application/msword\",\n          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        ];\n        if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n          setValidationErrors({\n            ...validationErrors,\n            Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n          });\n        } else {\n          setFormData({\n            ...formData,\n            Resume: file,\n          });\n          let newErrors = { ...validationErrors };\n          delete newErrors.Resume;\n          setValidationErrors(newErrors);\n        }\n      }\n    } else {\n      setFormData({\n        ...formData,\n        [id]: value,\n      });\n      let newErrors = { ...validationErrors };\n      delete newErrors[id];\n      setValidationErrors(newErrors);\n    }\n  };\n\n  const validateForm = () => {\n    let isValid = true;\n    const newErrors = {};\n    Object.keys(formData).forEach((key) => {\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n        isValid = false;\n      }\n    });\n    if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n      newErrors.EmailId = \"Invalid email format.\";\n      isValid = false;\n    }\n\n    if (!formData.Resume) {\n      newErrors.Resume = \"Please upload a resume.\";\n      isValid = false;\n    }\n\n    setValidationErrors(newErrors);\n    return isValid;\n  };\n  const uploadResume = async (file) => {\n    const filename = encodeURIComponent(file.name);\n    // const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n\n    const fileData = new FormData();\n    fileData.append(\"file\", file);\n\n    try {\n      const response = await fetch(uploadUrl, {\n        method: \"POST\",\n        body: fileData,\n      });\n      const data = await response.json();\n\n      console.log(\"Server response:\", data);\n\n      if (!response.ok) {\n        throw new Error(`Server responded with status: ${response.status}`);\n      }\n\n      // Since the server confirms success but doesn't provide a URL, log the success and maybe return a success message instead\n      if (data.message === \"File uploaded successfully\") {\n        console.log(data.message);\n        // Return a static message or a mock URL, or adjust as needed\n        return \"Upload successful, no URL provided\"; // Placeholder return value\n      } else {\n        throw new Error(\n          \"Unexpected server response, upload may not be successful.\"\n        );\n      }\n    } catch (error) {\n      console.error(\"Upload Error:\", error);\n      throw error;\n    }\n  };\n\n  //Dynamo DB API Call\n\n  const submitForm = async () => {\n    // Assuming you have an API endpoint to submit form data to DynamoDB\n    const submitUrl =\n      \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n    try {\n      const response = await fetch(submitUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      });\n      if (!response.ok) throw new Error(\"Failed to submit form.\");\n      return await response.json(); // or handle success without expecting a return value\n    } catch (error) {\n      console.error(\"Submission error:\", error);\n      throw error;\n    }\n  };\n\n  //Working Submit Function for storing resume in S3 bucket\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n\n  //   if (!validateForm()) {\n  //     console.log(\"Form validation failed\", validationErrors);\n  //     return;\n  //   }\n\n  //   if (formData.Resume) {\n  //     try {\n  //       // Note: `uploadResult` now may not be a URL but a success message\n  //       const uploadResult = await uploadResume(formData.Resume);\n  //       console.log(uploadResult); // Log the success message or handle as needed\n\n  //       // Proceed with the rest of your form submission logic\n  //       console.log(\"Form Data:\", JSON.stringify(formData, null, 2));\n  //       setShowPopup(true);\n  //     } catch (error) {\n  //       alert(\"Failed to upload resume: \" + error.message);\n  //     }\n  //   } else {\n  //     alert(\"Please select a resume to upload.\");\n  //   }\n  // };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!validateForm()) return;\n    setIsSubmitting(true);\n\n    try {\n      if (formData.Resume) {\n        const resumeUrl = await uploadResume(formData.Resume);\n        // Update formData with the resume URL for submission\n        const updatedFormData = { ...formData, ResumeUrl: resumeUrl };\n        await submitForm(updatedFormData);\n        setShowPopup(true); // Show success message\n        setFormData(initialFormData); // Reset form\n      } else {\n        // Handle the case where a resume is required but not uploaded\n        throw new Error(\"Resume is required.\");\n      }\n    } catch (error) {\n      alert(`Error: ${error.message}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleClosePopup = () => {\n    setShowPopup(false);\n    setFormData(initialFormData);\n    setValidationErrors({});\n    if (resumeInputRef.current) {\n      resumeInputRef.current.value = \"\";\n    }\n  };\n\n  return (\n    <div>\n      {/* The form component with Tailwind CSS */}\n      <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n        <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n          Employee Information Form\n        </h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n            {/* Input fields generated based on formData */}\n            {Object.keys(initialFormData)\n              .filter((key) => key !== \"Resume\")\n              .map((key) => (\n                <div key={key} className=\"mb-4\">\n                  <label\n                    htmlFor={key}\n                    className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n                  >\n                    {key.replace(/([A-Z])/g, \" $1\").trim()}\n                  </label>\n                  <input\n                    type=\"text\"\n                    id={key}\n                    name={key}\n                    value={formData[key]}\n                    onChange={handleInputChange}\n                    className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n                  />\n                  {validationErrors[key] && (\n                    <p className=\"text-red-500 text-xs italic\">\n                      {validationErrors[key]}\n                    </p>\n                  )}\n                </div>\n              ))}\n            <div className=\"mb-4\">\n              <label\n                htmlFor=\"Resume\"\n                className=\"block text-sm font-medium text-white\"\n              >\n                Resume\n              </label>\n              <input\n                id=\"Resume\"\n                name=\"Resume\"\n                type=\"file\"\n                onChange={handleInputChange}\n                ref={resumeInputRef}\n                className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n              />\n              {validationErrors[\"Resume\"] && (\n                <p className=\"text-red-500 text-xs italic\">\n                  {validationErrors[\"Resume\"]}\n                </p>\n              )}\n            </div>\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </section>\n      {showPopup && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n          <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n            <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n            <p>Your form has been submitted successfully.</p>\n            <button\n              onClick={handleClosePopup}\n              disabled={isSubmitting}\n              className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SuccessPage;\n\n// Upload form to dynamoDB\n// import React, { useState } from \"react\";\n\n// function App() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//     // Add other form fields as needed\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsSubmitting(true);\n\n//     // Replace 'YOUR_DYNAMODB_API_ENDPOINT' with your actual DynamoDB API endpoint\n//     const apiEndpoint =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n\n//     try {\n//       const response = await fetch(apiEndpoint, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit form data\");\n//       }\n\n//       // Handle successful submission here (e.g., clear form, show message)\n//       console.log(\"Form submitted successfully\");\n//       setFormData(initialFormData); // Reset form\n//     } catch (error) {\n//       console.error(\"Error submitting form:\", error);\n//       // Handle submission error here (e.g., show error message)\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h2>Submit Form Data</h2>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Full Name:\n//           <input\n//             type=\"String\"\n//             name=\"FullName\"\n//             value={formData.FullName}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           ReqId:\n//           <input\n//             type=\"Number\"\n//             name=\"ReqId\"\n//             value={formData.ReqId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Email ID:\n//           <input\n//             type=\"String\"\n//             name=\"EmailId\"\n//             value={formData.EmailId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         <br />\n//         {/* Add other fields as needed */}\n//         <button type=\"submit\" disabled={isSubmitting}>\n//           Submit\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//     // Additional form fields\n//     ResumeUrl: \"\", // This will hold the URL of the uploaded resume\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData({ ...formData, [name]: value });\n//   };\n\n//   const handleFileChange = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setFormData({ ...formData, Resume: file });\n//     }\n//   };\n\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     const response = await fetch(uploadUrl, {\n//       method: \"POST\",\n//       body: fileData,\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(\"Failed to upload file.\");\n//     }\n\n//     const data = await response.json();\n//     return data.url; // Assuming the response contains the URL of the uploaded file\n//   };\n\n//   const submitFormDataToDynamoDB = async (data) => {\n//     const apiEndpoint =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     const response = await fetch(apiEndpoint, {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(data),\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(\"Failed to submit form data.\");\n//     }\n\n//     return await response.json(); // Assuming the API returns some response\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsSubmitting(true);\n\n//     try {\n//       if (formData.Resume) {\n//         const resumeUrl = await uploadResume(formData.Resume);\n//         const updatedFormData = { ...formData, ResumeUrl: resumeUrl };\n//         delete updatedFormData.Resume; // Remove the file object\n\n//         await submitFormDataToDynamoDB(updatedFormData);\n//         console.log(\"Form and resume submitted successfully\");\n//         setShowPopup(true);\n//         setFormData(initialFormData); // Reset form\n//       } else {\n//         throw new Error(\"Resume file is required.\");\n//       }\n//     } catch (error) {\n//       console.error(\"Submission error:\", error);\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Submit Form and Resume</h2>\n//       <form onSubmit={handleSubmit}>\n//         {/* Form fields */}\n//         <input\n//           type=\"String\"\n//           name=\"FullName\"\n//           value={formData.FullName}\n//           onChange={handleInputChange}\n//         />\n//         <input\n//           type=\"String\"\n//           name=\"EmailId\"\n//           value={formData.EmailId}\n//           onChange={handleInputChange}\n//         />\n//         <label>\n//           ReqId:\n//           <input\n//             type=\"Number\"\n//             name=\"ReqId\"\n//             value={formData.ReqId}\n//             onChange={handleInputChange}\n//           />\n//         </label>\n//         {/* Include other fields as needed */}\n//         <input type=\"file\" onChange={handleFileChange} ref={resumeInputRef} />\n//         <button type=\"submit\" disabled={isSubmitting}>\n//           Submit\n//         </button>\n//       </form>\n\n//       {showPopup && (\n//         <div>\n//           <p>Your form has been submitted successfully.</p>\n//           <button onClick={() => setShowPopup(false)}>Close</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n// import React, { useState } from \"react\";\n\n// function FormPage() {\n//   const [formData, setFormData] = useState({\n//     fullName: \"\",\n//     email: \"\",\n//     // Add other fields as necessary\n//   });\n//   const [resume, setResume] = useState(null);\n//   const [showSuccessPopup, setShowSuccessPopup] = useState(false);\n//   const [isSubmitting, setIsSubmitting] = useState(false);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prev) => ({ ...prev, [name]: value }));\n//   };\n\n//   const handleResumeChange = (e) => {\n//     setResume(e.target.files[0]);\n//   };\n\n//   const uploadResumeToS3 = async (file) => {\n//     const uploadUrl = \"https://your-amazon-s3-api-url.com/upload\";\n//     // Fetch the pre-signed URL or direct S3 bucket upload URL here\n\n//     const formData = new FormData();\n//     formData.append(\"file\", file);\n\n//     const response = await fetch(uploadUrl, {\n//       method: \"POST\",\n//       body: formData,\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(\"Failed to upload resume\");\n//     }\n\n//     return response.json(); // Assuming the response includes the file URL\n//   };\n\n//   const submitFormToDynamoDB = async (data) => {\n//     const submissionUrl = \"https://your-dynamodb-api-url.com/submit\";\n\n//     const response = await fetch(submissionUrl, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(data),\n//     });\n\n//     if (!response.ok) {\n//       throw new Error(\"Failed to submit form\");\n//     }\n\n//     return response.json(); // Assuming the API responds with success or relevant data\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsSubmitting(true);\n\n//     try {\n//       // First, upload the resume to S3\n//       const uploadResponse = await uploadResumeToS3(resume);\n//       const resumeUrl = uploadResponse.url; // Assuming the response contains the URL\n\n//       // Then, submit the form data along with the resume URL to DynamoDB\n//       await submitFormToDynamoDB({ ...formData, resumeUrl });\n\n//       // Show success popup\n//       setShowSuccessPopup(true);\n//     } catch (error) {\n//       alert(error.message); // Handle errors more gracefully in production\n//     } finally {\n//       setIsSubmitting(false);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           name=\"fullName\"\n//           value={formData.fullName}\n//           onChange={handleInputChange}\n//           placeholder=\"Full Name\"\n//         />\n//         <input\n//           type=\"email\"\n//           name=\"email\"\n//           value={formData.email}\n//           onChange={handleInputChange}\n//           placeholder=\"Email\"\n//         />\n//         {/* Add other input fields as necessary */}\n//         <input type=\"file\" onChange={handleResumeChange} />\n//         <button type=\"submit\" disabled={isSubmitting}>\n//           Submit\n//         </button>\n//       </form>\n\n//       {showSuccessPopup && (\n//         <div>\n//           <p>Your form has been successfully submitted.</p>\n//           <button onClick={() => setShowSuccessPopup(false)}>Close</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FormPage;\n"],"mappings":"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AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA+G,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}