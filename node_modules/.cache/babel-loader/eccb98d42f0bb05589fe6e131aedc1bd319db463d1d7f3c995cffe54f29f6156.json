{"ast":null,"code":"var _jsxFileName = \"/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SuccessPage = () => {\n  _s();\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormatingNeeded: \"\",\n    FormatedBy: \"\"\n    // Resume: null,\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const resumeInputRef = useRef(null); // Create a ref for the resume input\n\n  const isValidEmail = email => {\n    return /\\S+@\\S+\\.\\S+/.test(email);\n  };\n  const handleInputChange = e => {\n    const {\n      id,\n      value,\n      files\n    } = e.target;\n    if (id === \"Resume\" && files) {\n      const file = files[0];\n      if (file) {\n        const allowedTypes = [\"application/pdf\", \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"];\n        if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n          setValidationErrors({\n            ...validationErrors,\n            Resume: \"Only PDF or DOC files under 10MB are allowed.\"\n          });\n        } else {\n          setFormData({\n            ...formData,\n            Resume: file\n          });\n          let newErrors = {\n            ...validationErrors\n          };\n          delete newErrors.Resume;\n          setValidationErrors(newErrors);\n        }\n      }\n    } else {\n      setFormData({\n        ...formData,\n        [id]: value\n      });\n      let newErrors = {\n        ...validationErrors\n      };\n      delete newErrors[id];\n      setValidationErrors(newErrors);\n    }\n  };\n  const validateForm = () => {\n    let isValid = true;\n    const newErrors = {};\n    Object.keys(formData).forEach(key => {\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n        isValid = false;\n      }\n    });\n    if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n      newErrors.EmailId = \"Invalid email format.\";\n      isValid = false;\n    }\n    if (!formData.Resume) {\n      newErrors.Resume = \"Please upload a resume.\";\n      isValid = false;\n    }\n    setValidationErrors(newErrors);\n    return isValid;\n  };\n\n  // Upload resume to S3 and return the file URL\n  const uploadResume = async file => {\n    const filename = encodeURIComponent(file.name);\n    const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n    const fileData = new FormData();\n    fileData.append(\"file\", file);\n    try {\n      const response = await fetch(uploadUrl, {\n        method: \"POST\",\n        body: fileData\n      });\n      if (!response.ok) throw new Error(\"Failed to upload resume\");\n      return await response.json();\n    } catch (error) {\n      console.error(\"Upload Error:\", error);\n      alert(\"Upload failed: \" + error.message);\n      return null;\n    }\n  };\n\n  // Submit form details including resume URL to DynamoDB\n  const submitFormDetails = async formData => {\n    const submitUrl = \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n    try {\n      const response = await fetch(submitUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formData)\n      });\n      if (!response.ok) throw new Error(\"Failed to submit form details\");\n      return await response.json();\n    } catch (error) {\n      console.error(\"Submission Error:\", error);\n      alert(\"Submission failed: \" + error.message);\n      return null;\n    }\n  };\n  // const handleSubmit = async (event) => {\n  //   event.preventDefault();\n  //   if (validateForm()) {\n  //     console.log(\"Form Data Submitted:\", formData);\n  //     setShowPopup(true);\n  //   }\n  //   event.preventDefault();\n  //   if (validateForm()) {\n  //     try {\n  //       // 1. Upload the resume to S3\n  //       const s3UploadResponse = await uploadResumeToS3(formData.Resume);\n\n  //       // 2. If the S3 upload is successful, proceed to submit the form data\n  //       if (s3UploadResponse.success) {\n  //         console.log(\"Form Data Submitted:\", formData);\n  //         setShowPopup(true);\n  //       } else {\n  //         // Handle S3 upload error\n  //         console.error(\"S3 Upload Error:\", s3UploadResponse.error);\n  //       }\n  //     } catch (error) {\n  //       // Handle any other errors that may occur during the process\n  //       console.error(\"Submission Error:\", error);\n  //     }\n  //   }\n  // };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (formData.Resume) {\n      const uploadResult = await uploadResume(formData.Resume);\n      if (uploadResult && uploadResult.url) {\n        // Assume uploadResult contains the URL of the uploaded file\n        const formSubmissionResponse = await submitFormDetails({\n          ...formData,\n          ResumeUrl: uploadResult.url\n        });\n        if (formSubmissionResponse) {\n          console.log(\"Form submitted successfully\");\n          setShowPopup(true);\n        }\n      }\n    } else {\n      console.log(\"Please select a resume to upload.\");\n    }\n  };\n\n  // Function to upload resume to S3\n\n  const handleClosePopup = () => {\n    setShowPopup(false);\n    setFormData(initialFormData);\n    setValidationErrors({});\n    if (resumeInputRef.current) {\n      resumeInputRef.current.value = \"\"; // Clear the file input\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl font-bold text-white capitalize dark:text-white\",\n        children: \"Employee Information Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\",\n          children: [Object.keys(initialFormData).filter(key => key !== \"Resume\").map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-white dark:text-gray-200 block text-sm font-bold mb-2\",\n              htmlFor: key,\n              children: key.replace(/([A-Z])/g, \" $1\").trim()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: key,\n              value: formData[key],\n              onChange: handleInputChange,\n              className: \"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 19\n            }, this), validationErrors[key] && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-red-500 text-xs italic\",\n              children: validationErrors[key]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 21\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-sm font-medium text-white\",\n              children: \"Resume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"Resume\",\n              name: \"Resume\",\n              type: \"file\",\n              onChange: handleInputChange,\n              ref: resumeInputRef // Assign the ref to the file input\n              ,\n              className: \"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 15\n            }, this), validationErrors.Resume && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-red-500 text-xs italic\",\n              children: validationErrors.Resume\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-5 rounded-lg shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg mb-4\",\n          children: \"Submission Successful\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your form has been submitted successfully.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClosePopup,\n          className: \"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(SuccessPage, \"YWwwmHvGuABOeL2WUGvea5cf81M=\");\n_c = SuccessPage;\nexport default SuccessPage;\n\n// //2\n\n// import React, { useState, useRef } from \"react\";\n// import axios from \"axios\"; // Ensure axios is installed via npm or yarn\n\n// const SuccessPage = () => {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormatingNeeded: \"\",\n//     FormatedBy: \"\",\n//     // Resume is initially null; it will be set to the file object when a file is selected\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => /\\S+@\\S+\\.\\S+/.test(email);\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors((prevErrors) => ({\n//             ...prevErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           }));\n//         } else {\n//           setFormData((prevFormData) => ({\n//             ...prevFormData,\n//             Resume: file,\n//           }));\n//           setValidationErrors((prevErrors) => {\n//             const newErrors = { ...prevErrors };\n//             delete newErrors.Resume;\n//             return newErrors;\n//           });\n//         }\n//       }\n//     } else {\n//       setFormData((prevFormData) => ({\n//         ...prevFormData,\n//         [id]: value,\n//       }));\n//       setValidationErrors((prevErrors) => {\n//         const newErrors = { ...prevErrors };\n//         delete newErrors[id];\n//         return newErrors;\n//       });\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   // const uploadResumeToS3 = async (file) => {\n//   //   const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`; // Replace with your actual upload URL\n//   //   try {\n//   //     const formData = new FormData();\n//   //     formData.append(\"file\", file); // Ensure your API expects the file under this key\n//   //     const response = await axios.post(url, formData, {\n//   //       headers: {\n//   //         \"Content-Type\": \"multipart/form-data\",\n//   //       },\n//   //     });\n//   //     return { success: true, data: response.data };\n//   //   } catch (error) {\n//   //     return { success: false, error: error.message };\n//   //   }\n//   // };\n\n//   const uploadResumeToS3 = async (file) => {\n//     const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`;\n//     try {\n//       const formData = new FormData();\n//       formData.append(\"file\", file);\n//       await axios.post(url, formData, {\n//         // Notice the removal of `response =`\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//         },\n//       });\n//       return { success: true };\n//     } catch (error) {\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   // const submitFormData = async (data) => {\n//   //   try {\n//   //     const url =\n//   //       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//   //     // Assuming your server expects JSON data:\n//   //     const response = await axios.post(url, JSON.stringify(data), {\n//   //       headers: {\n//   //         \"Content-Type\": \"application/json\",\n//   //         // Add any other required headers here, like authentication tokens\n//   //       },\n//   //     });\n//   //     return { success: true };\n//   //   } catch (error) {\n//   //     console.error(\"Error submitting form data:\", error);\n//   //     return { success: false, error: error.message };\n//   //   }\n//   // };\n\n//   const submitFormData = async (data) => {\n//     try {\n//       const url =\n//         \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n\n//       // Ensure data is correctly structured for your API's expectations\n//       const payload = JSON.stringify(data);\n\n//       const response = await axios.post(url, payload, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       console.log(\"Submission response:\", response.data); // Log the response data for debugging\n//       return { success: true, data: response.data };\n//     } catch (error) {\n//       console.error(\n//         \"Error submitting form data:\",\n//         error.response ? error.response.data : error.message\n//       );\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       // Attempt to upload the resume before submitting form data\n//       if (formData.Resume) {\n//         const uploadResponse = await uploadResumeToS3(formData.Resume);\n//         if (uploadResponse.success) {\n//           console.log(\n//             \"Resume uploaded successfully. Proceeding with form submission.\"\n//           );\n//           // Prepare form data for submission (excluding the file itself)\n//           const dataToSubmit = { ...formData, Resume: undefined };\n//           const formSubmitResponse = await submitFormData(dataToSubmit);\n//           if (formSubmitResponse.success) {\n//             console.log(\"Form data submitted successfully.\");\n//             setShowPopup(true); // Show success popup\n//           } else {\n//             // Handle form submission error\n//             console.error(\n//               \"Failed to submit form data:\",\n//               formSubmitResponse.error\n//             );\n//           }\n//         } else {\n//           console.error(\"Failed to upload resume:\", uploadResponse.error);\n//         }\n//       }\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData); // Reset form\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\"; // Clear the file input\n//     }\n//   };\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                     htmlFor={key}\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors.Resume && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Resume}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SuccessPage;\n\n//3\n// import React, { useState } from \"react\";\n\n// function UploadForm() {\n//   const [formData, setFormData] = useState({\n//     FullName: \"\",\n//     ReqId: \"\",\n//   });\n//   const [resume, setResume] = useState(null);\n\n//   // Handles changes in text inputs\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handles resume file selection\n//   const handleResumeChange = (e) => {\n//     setResume(e.target.files[0]);\n//   };\n\n//   // Uploads the resume file\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to upload resume\");\n//       }\n//       return await response.json(); // Assuming the response contains the URL of the uploaded file\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \", error.message);\n//     }\n//   };\n\n//   // Handles the form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!resume) {\n//       alert(\"Please select a resume to upload.\");\n//       return;\n//     }\n\n//     // Upload the resume first\n//     const uploadResult = await uploadResume(resume);\n//     if (uploadResult && uploadResult.success) {\n//       alert(\"Resume successfully uploaded.\");\n//       // Here, you can also handle additional actions post-upload,\n//       // such as updating the database with the form data and the URL of the uploaded file.\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label>Full Name:</label>\n//         <input\n//           type=\"text\"\n//           name=\"FullName\"\n//           value={formData.FullName}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Req ID:</label>\n//         <input\n//           type=\"text\"\n//           name=\"ReqId\"\n//           value={formData.ReqId}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Resume:</label>\n//         <input\n//           type=\"file\"\n//           name=\"resume\"\n//           onChange={handleResumeChange}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Submit</button>\n//     </form>\n//   );\n// }\n\n// export default UploadForm;\n\n//4\n\n// import React, { useState } from \"react\";\n\n// function UploadForm() {\n//   const [formData, setFormData] = useState({\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//   });\n//   const [resume, setResume] = useState(null);\n\n//   // Handles changes in text inputs\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handles resume file selection\n//   const handleResumeChange = (e) => {\n//     setResume(e.target.files[0]);\n//   };\n\n//   // Upload the resume to S3\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) {\n//         throw new Error(\"Failed to upload resume\");\n//       }\n//       const uploadResult = await response.json();\n//       return uploadResult; // Assuming this includes the URL of the uploaded file\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \", error.message);\n//       return null;\n//     }\n//   };\n\n//   // Submit form details to DynamoDB\n//   const submitFormDetails = async (details, resumeUrl) => {\n//     const submitUrl =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     details.resumeUrl = resumeUrl; // Add the resume URL to form details\n\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(details),\n//       });\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit form details\");\n//       }\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Submission Error:\", error);\n//       alert(\"Submission failed: \", error.message);\n//       return null;\n//     }\n//   };\n\n//   // Handles the form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!resume) {\n//       alert(\"Please select a resume to upload.\");\n//       return;\n//     }\n\n//     // First, upload the resume\n//     const uploadResult = await uploadResume(resume);\n//     if (uploadResult && uploadResult.fileUrl) {\n//       // Then, submit the form details along with the resume URL\n//       const submitResult = await submitFormDetails(\n//         formData,\n//         uploadResult.fileUrl\n//       );\n//       if (submitResult) {\n//         alert(\"Form and resume submitted successfully!\");\n//       }\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label>Full Name:</label>\n//         <input\n//           type=\"text\"\n//           name=\"FullName\"\n//           value={formData.FullName}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Req ID:</label>\n//         <input\n//           type=\"text\"\n//           name=\"ReqId\"\n//           value={formData.ReqId}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Email:</label>\n//         <input\n//           type=\"email\"\n//           name=\"EmailId\"\n//           value={formData.EmailId}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Resume:</label>\n//         <input\n//           type=\"file\"\n//           name=\"resume\"\n//           onChange={handleResumeChange}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Submit</button>\n//     </form>\n//   );\n// }\n\n// export default UploadForm;\n\n//5\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Reference for the file input\n\n//   const isValidEmail = (email) => {\n//     return /\\S+@\\S+\\.\\S+/.test(email);\n//   };\n\n//   // // Update form state on user input\n//   // const handleInputChange = (e) => {\n//   //   const { name, value, files } = e.target;\n//   //   if (name === \"Resume\" && files) {\n//   //     setFormData({ ...formData, Resume: files[0] });\n//   //   } else {\n//   //     setFormData({ ...formData, [name]: value });\n//   //   }\n//   // };\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors({\n//             ...validationErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           });\n//         } else {\n//           setFormData({\n//             ...formData,\n//             Resume: file,\n//           });\n//           let newErrors = { ...validationErrors };\n//           delete newErrors.Resume;\n//           setValidationErrors(newErrors);\n//         }\n//       }\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [id]: value,\n//       });\n//       let newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   // Upload resume to S3 and return the file URL\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) throw new Error(\"Failed to upload resume\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // // Submit form details including resume URL to DynamoDB\n//   // const submitFormDetails = async (formData) => {\n//   //   const submitUrl =\n//   //     \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//   //   try {\n//   //     const response = await fetch(submitUrl, {\n//   //       method: \"POST\",\n//   //       headers: { \"Content-Type\": \"application/json\" },\n//   //       body: JSON.stringify(formData),\n//   //     });\n//   //     if (!response.ok) throw new Error(\"Failed to submit form details\");\n//   //     return await response.json();\n//   //   } catch (error) {\n//   //     console.error(\"Submission Error:\", error);\n//   //     alert(\"Submission failed: \" + error.message);\n//   //     return null;\n//   //   }\n//   // };\n\n//   // Handle form submission\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   if (formData.Resume) {\n//   //     const uploadResult = await uploadResume(formData.Resume);\n//   //     if (uploadResult && uploadResult.url) {\n//   //       // Assume uploadResult contains the URL of the uploaded file\n//   //       const formSubmissionResponse = await submitFormDetails({\n//   //         ...formData,\n//   //         ResumeUrl: uploadResult.url,\n//   //       });\n//   //       if (formSubmissionResponse) {\n//   //         console.log(\"Form submitted successfully\");\n//   //         setShowPopup(true);\n//   //       }\n//   //     }\n//   //   } else {\n//   //     console.log(\"Please select a resume to upload.\");\n//   //   }\n//   // };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       console.log(\"Form Data Submitted:\", formData);\n//       setShowPopup(true);\n//     }\n//     event.preventDefault();\n//     if (validateForm()) {\n//       try {\n//         // 1. Upload the resume to S3\n//         const s3UploadResponse = await uploadResume(formData.Resume);\n\n//         // 2. If the S3 upload is successful, proceed to submit the form data\n//         if (s3UploadResponse.success) {\n//           console.log(\"Form Data Submitted:\", formData);\n//           setShowPopup(true);\n//         } else {\n//           // Handle S3 upload error\n//           console.error(\"S3 Upload Error:\", s3UploadResponse.error);\n//         }\n//       } catch (error) {\n//         // Handle any other errors that may occur during the process\n//         console.error(\"Submission Error:\", error);\n//       }\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\"; // Clear the file input\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit} className=\"mt-6\">\n//           <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n//             {Object.keys(initialFormData).map((key) =>\n//               key !== \"Resume\" ? (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor={key}\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     name={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                 </div>\n//               ) : (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor=\"Resume\"\n//                     className=\"block text-sm font-medium text-white\"\n//                   >\n//                     Resume\n//                   </label>\n//                   <input\n//                     id=\"Resume\"\n//                     name=\"Resume\"\n//                     type=\"file\"\n//                     onChange={handleInputChange}\n//                     ref={resumeInputRef}\n//                     className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//                   />\n//                 </div>\n//               )\n//             )}\n//             <button\n//               type=\"submit\"\n//               className=\"col-span-1 sm:col-span-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n//6 - Working\n\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Reference for the file input\n\n//   // Update form state on user input\n//   const handleInputChange = (e) => {\n//     const { name, value, files } = e.target;\n//     if (name === \"Resume\" && files) {\n//       setFormData({ ...formData, Resume: files[0] });\n//     } else {\n//       setFormData({ ...formData, [name]: value });\n//     }\n//   };\n\n//   // Upload resume to S3 and return the file URL\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) throw new Error(\"Failed to upload resume\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Submit form details including resume URL to DynamoDB\n//   const submitFormDetails = async (formData) => {\n//     const submitUrl =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to submit form details\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Submission Error:\", error);\n//       alert(\"Submission failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (formData.Resume) {\n//       const uploadResult = await uploadResume(formData.Resume);\n//       if (uploadResult && uploadResult.url) {\n//         // Assume uploadResult contains the URL of the uploaded file\n//         const formSubmissionResponse = await submitFormDetails({\n//           ...formData,\n//           ResumeUrl: uploadResult.url,\n//         });\n//         if (formSubmissionResponse) {\n//           console.log(\"Form submitted successfully\");\n//           setShowPopup(true);\n//         }\n//       }\n//     } else {\n//       console.log(\"Please select a resume to upload.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         {/* Iterate over the formData keys to generate input fields */}\n//         {Object.keys(initialFormData).map((key) => {\n//           if (key === \"Resume\") {\n//             return (\n//               <div key={key}>\n//                 <label>{key}:</label>\n//                 <input\n//                   type=\"file\"\n//                   name={key}\n//                   onChange={handleInputChange}\n//                   ref={resumeInputRef}\n//                   required\n//                 />\n//               </div>\n//             );\n//           } else {\n//             return (\n//               <div key={key}>\n//                 <label>{key}:</label>\n//                 <input\n//                   type=\"text\"\n//                   name={key}\n//                   value={formData[key]}\n//                   onChange={handleInputChange}\n//                   required\n//                 />\n//               </div>\n//             );\n//           }\n//         })}\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//       {showPopup && (\n//         <div className=\"popup\">\n//           <p>Form submitted successfully!</p>\n//           <button onClick={() => setShowPopup(false)}>Close</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n///7 -- Testing\n\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   // Initial state for form data, including a placeholder for the resume file\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null, // Placeholder for the resume file\n//   };\n\n//   // State hooks for form data, validation errors, and submission status\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Ref for the resume input to reset it upon submission\n\n//   // Handles form input changes and updates state accordingly\n//   const handleInputChange = (e) => {\n//     const { name, value, files } = e.target;\n//     // Reset validation errors for the current input\n//     setValidationErrors((prevErrors) => ({ ...prevErrors, [name]: null }));\n\n//     if (name === \"Resume\" && files) {\n//       setFormData((prevFormData) => ({ ...prevFormData, Resume: files[0] }));\n//     } else {\n//       setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\n//     }\n//   };\n\n//   // Function to validate the entire form before submission\n//   const validateForm = () => {\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       // Check for empty fields, excluding the Resume for separate validation\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//       }\n//     });\n\n//     // Validate the resume file, if selected\n//     if (formData.Resume) {\n//       const { Resume } = formData;\n//       const allowedTypes = [\n//         \"application/pdf\",\n//         \"application/msword\",\n//         \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//       ];\n//       const maxSize = 10485760; // 10MB\n\n//       if (!allowedTypes.includes(Resume.type) || Resume.size > maxSize) {\n//         newErrors.Resume = \"Only PDF or DOC files under 10MB are allowed.\";\n//       }\n//     } else {\n//       // Ensure a file is selected\n//       newErrors.Resume = \"Please upload a resume.\";\n//     }\n\n//     setValidationErrors(newErrors);\n//     // Form is valid if no errors were added\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   // Handle form submission with validation and data processing\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (validateForm()) {\n//       console.log(\"Form Data:\", formData);\n//       // Implement the upload logic here\n//       setShowPopup(true); // Show success message on successful validation/submission\n//     } else {\n//       console.log(\"Validation errors:\", validationErrors);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         {Object.keys(initialFormData).map((key) => (\n//           <div key={key} className=\"mb-4\">\n//             <label htmlFor={key}>\n//               {key.replace(/([A-Z])/g, \" $1\").trim()}:\n//             </label>\n//             {key === \"Resume\" ? (\n//               <input\n//                 type=\"file\"\n//                 name=\"key\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className={validationErrors[key] ? \"border-red-500\" : \"\"}\n//                 required\n//               />\n//             ) : (\n//               <input\n//                 type=\"text\"\n//                 name={key}\n//                 value={formData[key]}\n//                 onChange={handleInputChange}\n//                 className={validationErrors[key] ? \"border-red-500\" : \"\"}\n//                 required\n//               />\n//             )}\n//             {validationErrors[key] && (\n//               <div className=\"text-red-500\">{validationErrors[key]}</div>\n//             )}\n//           </div>\n//         ))}\n//         <button\n//           type=\"submit\"\n//           className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//         >\n//           Submit\n//         </button>\n//       </form>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg text-center\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <pre>{JSON.stringify(formData, null, 2)}</pre>\n//             <button\n//               onClick={() => setShowPopup(false)}\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\nvar _c;\n$RefreshReg$(_c, \"SuccessPage\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","SuccessPage","_s","initialFormData","FullName","RequiredID","RequiredTitle","Role","RequiredCreationDate","VendorID","ImmigrationStatus","ContractType","SubmissionDate","RequiredSubmissionEndDate","CandidateCurrentLocation","ContactNumber","RecruiterName","State","SubmissionStatus","VendorRate","CandidatePayRate","BillRateMargin","ResumeSource","EmailId","LinkedInID","EmployerInformation","ProfessionalReferences","DOB","RequiredSkills","ResumeFormatingNeeded","FormatedBy","formData","setFormData","validationErrors","setValidationErrors","showPopup","setShowPopup","resumeInputRef","isValidEmail","email","test","handleInputChange","e","id","value","files","target","file","allowedTypes","includes","type","size","Resume","newErrors","validateForm","isValid","Object","keys","forEach","key","uploadResume","filename","encodeURIComponent","name","uploadUrl","fileData","FormData","append","response","fetch","method","body","ok","Error","json","error","console","alert","message","submitFormDetails","submitUrl","headers","JSON","stringify","handleSubmit","preventDefault","uploadResult","url","formSubmissionResponse","ResumeUrl","log","handleClosePopup","current","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","filter","map","htmlFor","replace","trim","onChange","ref","onClick","_c","$RefreshReg$"],"sources":["/Users/sachin_veera/Desktop/ats-cloudinityinc/src/pages/SuccessPage.jsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\n\nconst SuccessPage = () => {\n  const initialFormData = {\n    FullName: \"\",\n    RequiredID: \"\",\n    RequiredTitle: \"\",\n    Role: \"\",\n    RequiredCreationDate: \"\",\n    VendorID: \"\",\n    ImmigrationStatus: \"\",\n    ContractType: \"\",\n    SubmissionDate: \"\",\n    RequiredSubmissionEndDate: \"\",\n    CandidateCurrentLocation: \"\",\n    ContactNumber: \"\",\n    RecruiterName: \"\",\n    State: \"\",\n    SubmissionStatus: \"\",\n    VendorRate: \"\",\n    CandidatePayRate: \"\",\n    BillRateMargin: \"\",\n    ResumeSource: \"\",\n    EmailId: \"\",\n    LinkedInID: \"\",\n    EmployerInformation: \"\",\n    ProfessionalReferences: \"\",\n    DOB: \"\",\n    RequiredSkills: \"\",\n    ResumeFormatingNeeded: \"\",\n    FormatedBy: \"\",\n    // Resume: null,\n  };\n\n  const [formData, setFormData] = useState(initialFormData);\n  const [validationErrors, setValidationErrors] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const resumeInputRef = useRef(null); // Create a ref for the resume input\n\n  const isValidEmail = (email) => {\n    return /\\S+@\\S+\\.\\S+/.test(email);\n  };\n\n  const handleInputChange = (e) => {\n    const { id, value, files } = e.target;\n    if (id === \"Resume\" && files) {\n      const file = files[0];\n      if (file) {\n        const allowedTypes = [\n          \"application/pdf\",\n          \"application/msword\",\n          \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        ];\n        if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n          setValidationErrors({\n            ...validationErrors,\n            Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n          });\n        } else {\n          setFormData({\n            ...formData,\n            Resume: file,\n          });\n          let newErrors = { ...validationErrors };\n          delete newErrors.Resume;\n          setValidationErrors(newErrors);\n        }\n      }\n    } else {\n      setFormData({\n        ...formData,\n        [id]: value,\n      });\n      let newErrors = { ...validationErrors };\n      delete newErrors[id];\n      setValidationErrors(newErrors);\n    }\n  };\n\n  const validateForm = () => {\n    let isValid = true;\n    const newErrors = {};\n    Object.keys(formData).forEach((key) => {\n      if (!formData[key] && key !== \"Resume\") {\n        newErrors[key] = \"This field is required.\";\n        isValid = false;\n      }\n    });\n    if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n      newErrors.EmailId = \"Invalid email format.\";\n      isValid = false;\n    }\n\n    if (!formData.Resume) {\n      newErrors.Resume = \"Please upload a resume.\";\n      isValid = false;\n    }\n\n    setValidationErrors(newErrors);\n    return isValid;\n  };\n\n  // Upload resume to S3 and return the file URL\n  const uploadResume = async (file) => {\n    const filename = encodeURIComponent(file.name);\n    const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n    const fileData = new FormData();\n    fileData.append(\"file\", file);\n\n    try {\n      const response = await fetch(uploadUrl, {\n        method: \"POST\",\n        body: fileData,\n      });\n      if (!response.ok) throw new Error(\"Failed to upload resume\");\n      return await response.json();\n    } catch (error) {\n      console.error(\"Upload Error:\", error);\n      alert(\"Upload failed: \" + error.message);\n      return null;\n    }\n  };\n\n  // Submit form details including resume URL to DynamoDB\n  const submitFormDetails = async (formData) => {\n    const submitUrl =\n      \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n    try {\n      const response = await fetch(submitUrl, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(formData),\n      });\n      if (!response.ok) throw new Error(\"Failed to submit form details\");\n      return await response.json();\n    } catch (error) {\n      console.error(\"Submission Error:\", error);\n      alert(\"Submission failed: \" + error.message);\n      return null;\n    }\n  };\n  // const handleSubmit = async (event) => {\n  //   event.preventDefault();\n  //   if (validateForm()) {\n  //     console.log(\"Form Data Submitted:\", formData);\n  //     setShowPopup(true);\n  //   }\n  //   event.preventDefault();\n  //   if (validateForm()) {\n  //     try {\n  //       // 1. Upload the resume to S3\n  //       const s3UploadResponse = await uploadResumeToS3(formData.Resume);\n\n  //       // 2. If the S3 upload is successful, proceed to submit the form data\n  //       if (s3UploadResponse.success) {\n  //         console.log(\"Form Data Submitted:\", formData);\n  //         setShowPopup(true);\n  //       } else {\n  //         // Handle S3 upload error\n  //         console.error(\"S3 Upload Error:\", s3UploadResponse.error);\n  //       }\n  //     } catch (error) {\n  //       // Handle any other errors that may occur during the process\n  //       console.error(\"Submission Error:\", error);\n  //     }\n  //   }\n  // };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (formData.Resume) {\n      const uploadResult = await uploadResume(formData.Resume);\n      if (uploadResult && uploadResult.url) {\n        // Assume uploadResult contains the URL of the uploaded file\n        const formSubmissionResponse = await submitFormDetails({\n          ...formData,\n          ResumeUrl: uploadResult.url,\n        });\n        if (formSubmissionResponse) {\n          console.log(\"Form submitted successfully\");\n          setShowPopup(true);\n        }\n      }\n    } else {\n      console.log(\"Please select a resume to upload.\");\n    }\n  };\n\n  // Function to upload resume to S3\n\n  const handleClosePopup = () => {\n    setShowPopup(false);\n    setFormData(initialFormData);\n    setValidationErrors({});\n    if (resumeInputRef.current) {\n      resumeInputRef.current.value = \"\"; // Clear the file input\n    }\n  };\n\n  return (\n    <div>\n      <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n        <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n          Employee Information Form\n        </h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n            {/* Dynamically generate input fields based on formData */}\n            {Object.keys(initialFormData)\n              .filter((key) => key !== \"Resume\")\n              .map((key) => (\n                <div key={key} className=\"mb-4\">\n                  <label\n                    className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n                    htmlFor={key}\n                  >\n                    {key.replace(/([A-Z])/g, \" $1\").trim()}\n                  </label>\n                  <input\n                    type=\"text\"\n                    id={key}\n                    value={formData[key]}\n                    onChange={handleInputChange}\n                    className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n                  />\n                  {validationErrors[key] && (\n                    <p className=\"text-red-500 text-xs italic\">\n                      {validationErrors[key]}\n                    </p>\n                  )}\n                </div>\n              ))}\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-white\">\n                Resume\n              </label>\n              <input\n                id=\"Resume\"\n                name=\"Resume\"\n                type=\"file\"\n                onChange={handleInputChange}\n                ref={resumeInputRef} // Assign the ref to the file input\n                className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n              />\n              {validationErrors.Resume && (\n                <p className=\"text-red-500 text-xs italic\">\n                  {validationErrors.Resume}\n                </p>\n              )}\n            </div>\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </section>\n      {showPopup && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n          <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n            <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n            <p>Your form has been submitted successfully.</p>\n            <button\n              onClick={handleClosePopup}\n              className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SuccessPage;\n\n// //2\n\n// import React, { useState, useRef } from \"react\";\n// import axios from \"axios\"; // Ensure axios is installed via npm or yarn\n\n// const SuccessPage = () => {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormatingNeeded: \"\",\n//     FormatedBy: \"\",\n//     // Resume is initially null; it will be set to the file object when a file is selected\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null);\n\n//   const isValidEmail = (email) => /\\S+@\\S+\\.\\S+/.test(email);\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors((prevErrors) => ({\n//             ...prevErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           }));\n//         } else {\n//           setFormData((prevFormData) => ({\n//             ...prevFormData,\n//             Resume: file,\n//           }));\n//           setValidationErrors((prevErrors) => {\n//             const newErrors = { ...prevErrors };\n//             delete newErrors.Resume;\n//             return newErrors;\n//           });\n//         }\n//       }\n//     } else {\n//       setFormData((prevFormData) => ({\n//         ...prevFormData,\n//         [id]: value,\n//       }));\n//       setValidationErrors((prevErrors) => {\n//         const newErrors = { ...prevErrors };\n//         delete newErrors[id];\n//         return newErrors;\n//       });\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   // const uploadResumeToS3 = async (file) => {\n//   //   const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`; // Replace with your actual upload URL\n//   //   try {\n//   //     const formData = new FormData();\n//   //     formData.append(\"file\", file); // Ensure your API expects the file under this key\n//   //     const response = await axios.post(url, formData, {\n//   //       headers: {\n//   //         \"Content-Type\": \"multipart/form-data\",\n//   //       },\n//   //     });\n//   //     return { success: true, data: response.data };\n//   //   } catch (error) {\n//   //     return { success: false, error: error.message };\n//   //   }\n//   // };\n\n//   const uploadResumeToS3 = async (file) => {\n//     const url = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/{filename}`;\n//     try {\n//       const formData = new FormData();\n//       formData.append(\"file\", file);\n//       await axios.post(url, formData, {\n//         // Notice the removal of `response =`\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//         },\n//       });\n//       return { success: true };\n//     } catch (error) {\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   // const submitFormData = async (data) => {\n//   //   try {\n//   //     const url =\n//   //       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//   //     // Assuming your server expects JSON data:\n//   //     const response = await axios.post(url, JSON.stringify(data), {\n//   //       headers: {\n//   //         \"Content-Type\": \"application/json\",\n//   //         // Add any other required headers here, like authentication tokens\n//   //       },\n//   //     });\n//   //     return { success: true };\n//   //   } catch (error) {\n//   //     console.error(\"Error submitting form data:\", error);\n//   //     return { success: false, error: error.message };\n//   //   }\n//   // };\n\n//   const submitFormData = async (data) => {\n//     try {\n//       const url =\n//         \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n\n//       // Ensure data is correctly structured for your API's expectations\n//       const payload = JSON.stringify(data);\n\n//       const response = await axios.post(url, payload, {\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n\n//       console.log(\"Submission response:\", response.data); // Log the response data for debugging\n//       return { success: true, data: response.data };\n//     } catch (error) {\n//       console.error(\n//         \"Error submitting form data:\",\n//         error.response ? error.response.data : error.message\n//       );\n//       return { success: false, error: error.message };\n//     }\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       // Attempt to upload the resume before submitting form data\n//       if (formData.Resume) {\n//         const uploadResponse = await uploadResumeToS3(formData.Resume);\n//         if (uploadResponse.success) {\n//           console.log(\n//             \"Resume uploaded successfully. Proceeding with form submission.\"\n//           );\n//           // Prepare form data for submission (excluding the file itself)\n//           const dataToSubmit = { ...formData, Resume: undefined };\n//           const formSubmitResponse = await submitFormData(dataToSubmit);\n//           if (formSubmitResponse.success) {\n//             console.log(\"Form data submitted successfully.\");\n//             setShowPopup(true); // Show success popup\n//           } else {\n//             // Handle form submission error\n//             console.error(\n//               \"Failed to submit form data:\",\n//               formSubmitResponse.error\n//             );\n//           }\n//         } else {\n//           console.error(\"Failed to upload resume:\", uploadResponse.error);\n//         }\n//       }\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData); // Reset form\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\"; // Clear the file input\n//     }\n//   };\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2\">\n//             {Object.keys(initialFormData)\n//               .filter((key) => key !== \"Resume\")\n//               .map((key) => (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                     htmlFor={key}\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                   {validationErrors[key] && (\n//                     <p className=\"text-red-500 text-xs italic\">\n//                       {validationErrors[key]}\n//                     </p>\n//                   )}\n//                 </div>\n//               ))}\n//             <div className=\"mb-4\">\n//               <label className=\"block text-sm font-medium text-white\">\n//                 Resume\n//               </label>\n//               <input\n//                 id=\"Resume\"\n//                 name=\"Resume\"\n//                 type=\"file\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//               />\n//               {validationErrors.Resume && (\n//                 <p className=\"text-red-500 text-xs italic\">\n//                   {validationErrors.Resume}\n//                 </p>\n//               )}\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SuccessPage;\n\n//3\n// import React, { useState } from \"react\";\n\n// function UploadForm() {\n//   const [formData, setFormData] = useState({\n//     FullName: \"\",\n//     ReqId: \"\",\n//   });\n//   const [resume, setResume] = useState(null);\n\n//   // Handles changes in text inputs\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handles resume file selection\n//   const handleResumeChange = (e) => {\n//     setResume(e.target.files[0]);\n//   };\n\n//   // Uploads the resume file\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to upload resume\");\n//       }\n//       return await response.json(); // Assuming the response contains the URL of the uploaded file\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \", error.message);\n//     }\n//   };\n\n//   // Handles the form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!resume) {\n//       alert(\"Please select a resume to upload.\");\n//       return;\n//     }\n\n//     // Upload the resume first\n//     const uploadResult = await uploadResume(resume);\n//     if (uploadResult && uploadResult.success) {\n//       alert(\"Resume successfully uploaded.\");\n//       // Here, you can also handle additional actions post-upload,\n//       // such as updating the database with the form data and the URL of the uploaded file.\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label>Full Name:</label>\n//         <input\n//           type=\"text\"\n//           name=\"FullName\"\n//           value={formData.FullName}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Req ID:</label>\n//         <input\n//           type=\"text\"\n//           name=\"ReqId\"\n//           value={formData.ReqId}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Resume:</label>\n//         <input\n//           type=\"file\"\n//           name=\"resume\"\n//           onChange={handleResumeChange}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Submit</button>\n//     </form>\n//   );\n// }\n\n// export default UploadForm;\n\n//4\n\n// import React, { useState } from \"react\";\n\n// function UploadForm() {\n//   const [formData, setFormData] = useState({\n//     FullName: \"\",\n//     ReqId: \"\",\n//     EmailId: \"\",\n//   });\n//   const [resume, setResume] = useState(null);\n\n//   // Handles changes in text inputs\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   };\n\n//   // Handles resume file selection\n//   const handleResumeChange = (e) => {\n//     setResume(e.target.files[0]);\n//   };\n\n//   // Upload the resume to S3\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) {\n//         throw new Error(\"Failed to upload resume\");\n//       }\n//       const uploadResult = await response.json();\n//       return uploadResult; // Assuming this includes the URL of the uploaded file\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \", error.message);\n//       return null;\n//     }\n//   };\n\n//   // Submit form details to DynamoDB\n//   const submitFormDetails = async (details, resumeUrl) => {\n//     const submitUrl =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     details.resumeUrl = resumeUrl; // Add the resume URL to form details\n\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(details),\n//       });\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit form details\");\n//       }\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Submission Error:\", error);\n//       alert(\"Submission failed: \", error.message);\n//       return null;\n//     }\n//   };\n\n//   // Handles the form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!resume) {\n//       alert(\"Please select a resume to upload.\");\n//       return;\n//     }\n\n//     // First, upload the resume\n//     const uploadResult = await uploadResume(resume);\n//     if (uploadResult && uploadResult.fileUrl) {\n//       // Then, submit the form details along with the resume URL\n//       const submitResult = await submitFormDetails(\n//         formData,\n//         uploadResult.fileUrl\n//       );\n//       if (submitResult) {\n//         alert(\"Form and resume submitted successfully!\");\n//       }\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label>Full Name:</label>\n//         <input\n//           type=\"text\"\n//           name=\"FullName\"\n//           value={formData.FullName}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Req ID:</label>\n//         <input\n//           type=\"text\"\n//           name=\"ReqId\"\n//           value={formData.ReqId}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Email:</label>\n//         <input\n//           type=\"email\"\n//           name=\"EmailId\"\n//           value={formData.EmailId}\n//           onChange={handleChange}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label>Resume:</label>\n//         <input\n//           type=\"file\"\n//           name=\"resume\"\n//           onChange={handleResumeChange}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Submit</button>\n//     </form>\n//   );\n// }\n\n// export default UploadForm;\n\n//5\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Reference for the file input\n\n//   const isValidEmail = (email) => {\n//     return /\\S+@\\S+\\.\\S+/.test(email);\n//   };\n\n//   // // Update form state on user input\n//   // const handleInputChange = (e) => {\n//   //   const { name, value, files } = e.target;\n//   //   if (name === \"Resume\" && files) {\n//   //     setFormData({ ...formData, Resume: files[0] });\n//   //   } else {\n//   //     setFormData({ ...formData, [name]: value });\n//   //   }\n//   // };\n\n//   const handleInputChange = (e) => {\n//     const { id, value, files } = e.target;\n//     if (id === \"Resume\" && files) {\n//       const file = files[0];\n//       if (file) {\n//         const allowedTypes = [\n//           \"application/pdf\",\n//           \"application/msword\",\n//           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//         ];\n//         if (!allowedTypes.includes(file.type) || file.size > 1024 * 1024 * 10) {\n//           setValidationErrors({\n//             ...validationErrors,\n//             Resume: \"Only PDF or DOC files under 10MB are allowed.\",\n//           });\n//         } else {\n//           setFormData({\n//             ...formData,\n//             Resume: file,\n//           });\n//           let newErrors = { ...validationErrors };\n//           delete newErrors.Resume;\n//           setValidationErrors(newErrors);\n//         }\n//       }\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [id]: value,\n//       });\n//       let newErrors = { ...validationErrors };\n//       delete newErrors[id];\n//       setValidationErrors(newErrors);\n//     }\n//   };\n\n//   const validateForm = () => {\n//     let isValid = true;\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//         isValid = false;\n//       }\n//     });\n//     if (formData.EmailId && !isValidEmail(formData.EmailId)) {\n//       newErrors.EmailId = \"Invalid email format.\";\n//       isValid = false;\n//     }\n\n//     if (!formData.Resume) {\n//       newErrors.Resume = \"Please upload a resume.\";\n//       isValid = false;\n//     }\n\n//     setValidationErrors(newErrors);\n//     return isValid;\n//   };\n\n//   // Upload resume to S3 and return the file URL\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) throw new Error(\"Failed to upload resume\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // // Submit form details including resume URL to DynamoDB\n//   // const submitFormDetails = async (formData) => {\n//   //   const submitUrl =\n//   //     \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//   //   try {\n//   //     const response = await fetch(submitUrl, {\n//   //       method: \"POST\",\n//   //       headers: { \"Content-Type\": \"application/json\" },\n//   //       body: JSON.stringify(formData),\n//   //     });\n//   //     if (!response.ok) throw new Error(\"Failed to submit form details\");\n//   //     return await response.json();\n//   //   } catch (error) {\n//   //     console.error(\"Submission Error:\", error);\n//   //     alert(\"Submission failed: \" + error.message);\n//   //     return null;\n//   //   }\n//   // };\n\n//   // Handle form submission\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   if (formData.Resume) {\n//   //     const uploadResult = await uploadResume(formData.Resume);\n//   //     if (uploadResult && uploadResult.url) {\n//   //       // Assume uploadResult contains the URL of the uploaded file\n//   //       const formSubmissionResponse = await submitFormDetails({\n//   //         ...formData,\n//   //         ResumeUrl: uploadResult.url,\n//   //       });\n//   //       if (formSubmissionResponse) {\n//   //         console.log(\"Form submitted successfully\");\n//   //         setShowPopup(true);\n//   //       }\n//   //     }\n//   //   } else {\n//   //     console.log(\"Please select a resume to upload.\");\n//   //   }\n//   // };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     if (validateForm()) {\n//       console.log(\"Form Data Submitted:\", formData);\n//       setShowPopup(true);\n//     }\n//     event.preventDefault();\n//     if (validateForm()) {\n//       try {\n//         // 1. Upload the resume to S3\n//         const s3UploadResponse = await uploadResume(formData.Resume);\n\n//         // 2. If the S3 upload is successful, proceed to submit the form data\n//         if (s3UploadResponse.success) {\n//           console.log(\"Form Data Submitted:\", formData);\n//           setShowPopup(true);\n//         } else {\n//           // Handle S3 upload error\n//           console.error(\"S3 Upload Error:\", s3UploadResponse.error);\n//         }\n//       } catch (error) {\n//         // Handle any other errors that may occur during the process\n//         console.error(\"Submission Error:\", error);\n//       }\n//     }\n//   };\n\n//   const handleClosePopup = () => {\n//     setShowPopup(false);\n//     setFormData(initialFormData);\n//     setValidationErrors({});\n//     if (resumeInputRef.current) {\n//       resumeInputRef.current.value = \"\"; // Clear the file input\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <section className=\"max-w-4xl p-6 mx-auto bg-indigo-600 rounded-md shadow-md dark:bg-gray-800 mt-20\">\n//         <h1 className=\"text-xl font-bold text-white capitalize dark:text-white\">\n//           Employee Information Form\n//         </h1>\n//         <form onSubmit={handleSubmit} className=\"mt-6\">\n//           <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n//             {Object.keys(initialFormData).map((key) =>\n//               key !== \"Resume\" ? (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor={key}\n//                     className=\"text-white dark:text-gray-200 block text-sm font-bold mb-2\"\n//                   >\n//                     {key.replace(/([A-Z])/g, \" $1\").trim()}\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     id={key}\n//                     name={key}\n//                     value={formData[key]}\n//                     onChange={handleInputChange}\n//                     className=\"block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring\"\n//                   />\n//                 </div>\n//               ) : (\n//                 <div key={key} className=\"mb-4\">\n//                   <label\n//                     htmlFor=\"Resume\"\n//                     className=\"block text-sm font-medium text-white\"\n//                   >\n//                     Resume\n//                   </label>\n//                   <input\n//                     id=\"Resume\"\n//                     name=\"Resume\"\n//                     type=\"file\"\n//                     onChange={handleInputChange}\n//                     ref={resumeInputRef}\n//                     className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100\"\n//                   />\n//                 </div>\n//               )\n//             )}\n//             <button\n//               type=\"submit\"\n//               className=\"col-span-1 sm:col-span-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </section>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <button\n//               onClick={handleClosePopup}\n//               className=\"mt-3 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n//6 - Working\n\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null,\n//   };\n\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Reference for the file input\n\n//   // Update form state on user input\n//   const handleInputChange = (e) => {\n//     const { name, value, files } = e.target;\n//     if (name === \"Resume\" && files) {\n//       setFormData({ ...formData, Resume: files[0] });\n//     } else {\n//       setFormData({ ...formData, [name]: value });\n//     }\n//   };\n\n//   // Upload resume to S3 and return the file URL\n//   const uploadResume = async (file) => {\n//     const filename = encodeURIComponent(file.name);\n//     const uploadUrl = `https://lrl0r0t06c.execute-api.us-east-1.amazonaws.com/Prod/upload/${filename}`;\n//     const fileData = new FormData();\n//     fileData.append(\"file\", file);\n\n//     try {\n//       const response = await fetch(uploadUrl, {\n//         method: \"POST\",\n//         body: fileData,\n//       });\n//       if (!response.ok) throw new Error(\"Failed to upload resume\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Upload Error:\", error);\n//       alert(\"Upload failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Submit form details including resume URL to DynamoDB\n//   const submitFormDetails = async (formData) => {\n//     const submitUrl =\n//       \"https://8ofx3c8vk0.execute-api.us-east-1.amazonaws.com/Prod/submit\";\n//     try {\n//       const response = await fetch(submitUrl, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to submit form details\");\n//       return await response.json();\n//     } catch (error) {\n//       console.error(\"Submission Error:\", error);\n//       alert(\"Submission failed: \" + error.message);\n//       return null;\n//     }\n//   };\n\n//   // Handle form submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (formData.Resume) {\n//       const uploadResult = await uploadResume(formData.Resume);\n//       if (uploadResult && uploadResult.url) {\n//         // Assume uploadResult contains the URL of the uploaded file\n//         const formSubmissionResponse = await submitFormDetails({\n//           ...formData,\n//           ResumeUrl: uploadResult.url,\n//         });\n//         if (formSubmissionResponse) {\n//           console.log(\"Form submitted successfully\");\n//           setShowPopup(true);\n//         }\n//       }\n//     } else {\n//       console.log(\"Please select a resume to upload.\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         {/* Iterate over the formData keys to generate input fields */}\n//         {Object.keys(initialFormData).map((key) => {\n//           if (key === \"Resume\") {\n//             return (\n//               <div key={key}>\n//                 <label>{key}:</label>\n//                 <input\n//                   type=\"file\"\n//                   name={key}\n//                   onChange={handleInputChange}\n//                   ref={resumeInputRef}\n//                   required\n//                 />\n//               </div>\n//             );\n//           } else {\n//             return (\n//               <div key={key}>\n//                 <label>{key}:</label>\n//                 <input\n//                   type=\"text\"\n//                   name={key}\n//                   value={formData[key]}\n//                   onChange={handleInputChange}\n//                   required\n//                 />\n//               </div>\n//             );\n//           }\n//         })}\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//       {showPopup && (\n//         <div className=\"popup\">\n//           <p>Form submitted successfully!</p>\n//           <button onClick={() => setShowPopup(false)}>Close</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n\n///7 -- Testing\n\n// import React, { useState, useRef } from \"react\";\n\n// function SuccessPage() {\n//   // Initial state for form data, including a placeholder for the resume file\n//   const initialFormData = {\n//     FullName: \"\",\n//     RequiredID: \"\",\n//     RequiredTitle: \"\",\n//     Role: \"\",\n//     RequiredCreationDate: \"\",\n//     VendorID: \"\",\n//     ImmigrationStatus: \"\",\n//     ContractType: \"\",\n//     SubmissionDate: \"\",\n//     RequiredSubmissionEndDate: \"\",\n//     CandidateCurrentLocation: \"\",\n//     ContactNumber: \"\",\n//     RecruiterName: \"\",\n//     State: \"\",\n//     SubmissionStatus: \"\",\n//     VendorRate: \"\",\n//     CandidatePayRate: \"\",\n//     BillRateMargin: \"\",\n//     ResumeSource: \"\",\n//     EmailId: \"\",\n//     LinkedInID: \"\",\n//     EmployerInformation: \"\",\n//     ProfessionalReferences: \"\",\n//     DOB: \"\",\n//     RequiredSkills: \"\",\n//     ResumeFormattingNeeded: \"\",\n//     FormattedBy: \"\",\n//     Resume: null, // Placeholder for the resume file\n//   };\n\n//   // State hooks for form data, validation errors, and submission status\n//   const [formData, setFormData] = useState(initialFormData);\n//   const [validationErrors, setValidationErrors] = useState({});\n//   const [showPopup, setShowPopup] = useState(false);\n//   const resumeInputRef = useRef(null); // Ref for the resume input to reset it upon submission\n\n//   // Handles form input changes and updates state accordingly\n//   const handleInputChange = (e) => {\n//     const { name, value, files } = e.target;\n//     // Reset validation errors for the current input\n//     setValidationErrors((prevErrors) => ({ ...prevErrors, [name]: null }));\n\n//     if (name === \"Resume\" && files) {\n//       setFormData((prevFormData) => ({ ...prevFormData, Resume: files[0] }));\n//     } else {\n//       setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\n//     }\n//   };\n\n//   // Function to validate the entire form before submission\n//   const validateForm = () => {\n//     const newErrors = {};\n//     Object.keys(formData).forEach((key) => {\n//       // Check for empty fields, excluding the Resume for separate validation\n//       if (!formData[key] && key !== \"Resume\") {\n//         newErrors[key] = \"This field is required.\";\n//       }\n//     });\n\n//     // Validate the resume file, if selected\n//     if (formData.Resume) {\n//       const { Resume } = formData;\n//       const allowedTypes = [\n//         \"application/pdf\",\n//         \"application/msword\",\n//         \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n//       ];\n//       const maxSize = 10485760; // 10MB\n\n//       if (!allowedTypes.includes(Resume.type) || Resume.size > maxSize) {\n//         newErrors.Resume = \"Only PDF or DOC files under 10MB are allowed.\";\n//       }\n//     } else {\n//       // Ensure a file is selected\n//       newErrors.Resume = \"Please upload a resume.\";\n//     }\n\n//     setValidationErrors(newErrors);\n//     // Form is valid if no errors were added\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   // Handle form submission with validation and data processing\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (validateForm()) {\n//       console.log(\"Form Data:\", formData);\n//       // Implement the upload logic here\n//       setShowPopup(true); // Show success message on successful validation/submission\n//     } else {\n//       console.log(\"Validation errors:\", validationErrors);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmit}>\n//         {Object.keys(initialFormData).map((key) => (\n//           <div key={key} className=\"mb-4\">\n//             <label htmlFor={key}>\n//               {key.replace(/([A-Z])/g, \" $1\").trim()}:\n//             </label>\n//             {key === \"Resume\" ? (\n//               <input\n//                 type=\"file\"\n//                 name=\"key\"\n//                 onChange={handleInputChange}\n//                 ref={resumeInputRef}\n//                 className={validationErrors[key] ? \"border-red-500\" : \"\"}\n//                 required\n//               />\n//             ) : (\n//               <input\n//                 type=\"text\"\n//                 name={key}\n//                 value={formData[key]}\n//                 onChange={handleInputChange}\n//                 className={validationErrors[key] ? \"border-red-500\" : \"\"}\n//                 required\n//               />\n//             )}\n//             {validationErrors[key] && (\n//               <div className=\"text-red-500\">{validationErrors[key]}</div>\n//             )}\n//           </div>\n//         ))}\n//         <button\n//           type=\"submit\"\n//           className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//         >\n//           Submit\n//         </button>\n//       </form>\n//       {showPopup && (\n//         <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center\">\n//           <div className=\"bg-white p-5 rounded-lg shadow-lg text-center\">\n//             <h2 className=\"text-lg mb-4\">Submission Successful</h2>\n//             <p>Your form has been submitted successfully.</p>\n//             <pre>{JSON.stringify(formData, null, 2)}</pre>\n//             <button\n//               onClick={() => setShowPopup(false)}\n//               className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4\"\n//             >\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default SuccessPage;\n"],"mappings":"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CN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChG,EAAA,CAjRID,WAAW;AAAA2G,EAAA,GAAX3G,WAAW;AAmRjB,eAAeA,WAAW;;AAE1B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA2G,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}